----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 10/02/2015 01:48:36 PM
-- Design Name: 
-- Module Name: file_gen - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity file_gen is
    Port ( clk : in STD_LOGIC;
           sample_out : out STD_LOGIC_VECTOR(15 downto 0);
           sel : in STD_LOGIC;
           enable : in STD_LOGIC);
end file_gen;

architecture Behavioral of file_gen is

    -- array sine_src   : array(255 downto 0,15 downto 0);
    
    COMPONENT blk_mem_gen_0
      PORT (
          clka : IN STD_LOGIC;
          ena : IN STD_LOGIC;
          wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
          addra : IN STD_LOGIC_VECTOR(16 DOWNTO 0);
          dina : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
          clkb : IN STD_LOGIC;
          enb : IN STD_LOGIC;
          addrb : IN STD_LOGIC_VECTOR(16 DOWNTO 0);
          doutb : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
        );
    END COMPONENT;
    
    COMPONENT blk_mem_gen_1
          PORT (
            clka : IN STD_LOGIC;
            ena : IN STD_LOGIC;
            wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
            addra : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
            dina : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
            clkb : IN STD_LOGIC;
            enb : IN STD_LOGIC;
            addrb : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
            doutb : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
          );
    END COMPONENT;
    
    signal addr0    : STD_LOGIC_VECTOR(16 downto 0) := "00000000000000000";
    signal addr1    : STD_LOGIC_VECTOR(17 downto 0) := "000000000000000000";
    signal dout0    : STD_LOGIC_VECTOR(15 downto 0);
    signal dout1    : STD_LOGIC_VECTOR(15 downto 0);
    signal inc      : unsigned(12 downto 0) := "0000000000000";


begin

    -- sine_src <= ("1000000000000000", "1000001100000000", "1000011000000000", "1000100100000000", "1000110000000000", "1000111100000000", "1001001000000000", "1001010100000000", "1001100000000000", "1001110000000000", "1001111100000000", "1010001000000000", "1010010100000000", "1010100000000000", "1010101100000000", "1010111000000000", "1011000000000000", "1011001100000000", "1011011000000000", "1011100100000000", "1011110000000000", "1011111100000000", "1100000100000000", "1100010000000000", "1100011100000000", "1100100100000000", "1100110000000000", "1100111000000000", "1101000100000000", "1101001100000000", "1101010100000000", "1101100000000000", "1101101000000000", "1101110000000000", "1101111000000000", "1110000000000000", "1110001000000000", "1110010000000000", "1110011000000000", "1110100000000000", "1110101000000000", "1110110000000000", "1110110100000000", "1110111100000000", "1111000000000000", "1111001000000000", "1111001100000000", "1111010100000000", "1111011000000000", "1111011100000000", "1111100000000000", "1111100100000000", "1111101000000000", "1111101100000000", "1111110000000000", "1111110000000000", "1111110100000000", "1111111000000000", "1111111000000000", "1111111100000000", "1111111100000000", "1111111100000000", "1111111100000000", "1111111100000000", "1111111100000000", "1111111100000000", "1111111100000000", "1111111100000000", "1111111100000000", "1111111100000000", "1111111000000000", "1111111000000000", "1111110100000000", "1111110000000000", "1111110000000000", "1111101100000000", "1111101000000000", "1111100100000000", "1111100000000000", "1111011100000000", "1111011000000000", "1111010100000000", "1111001100000000", "1111001000000000", "1111000000000000", "1110111100000000", "1110110100000000", "1110110000000000", "1110101000000000", "1110100000000000", "1110011000000000", "1110010000000000", "1110001000000000", "1110000000000000", "1101111000000000", "1101110000000000", "1101101000000000", "1101100000000000", "1101010100000000", "1101001100000000", "1101000100000000", "1100111000000000", "1100110000000000", "1100100100000000", "1100011100000000", "1100010000000000", "1100000100000000", "1011111100000000", "1011110000000000", "1011100100000000", "1011011000000000", "1011001100000000", "1011000000000000", "1010111000000000", "1010101100000000", "1010100000000000", "1010010100000000", "1010001000000000", "1001111100000000", "1001110000000000", "1001100000000000", "1001010100000000", "1001001000000000", "1000111100000000", "1000110000000000", "1000100100000000", "1000011000000000", "1000001100000000", "1000000000000000", "0111110000000000", "0111100100000000", "0111011000000000", "0111001100000000", "0111000000000000", "0110110100000000", "0110101000000000", "0110011100000000", "0110001100000000", "0110000000000000", "0101110100000000", "0101101000000000", "0101011100000000", "0101010000000000", "0101000100000000", "0100111100000000", "0100110000000000", "0100100100000000", "0100011000000000", "0100001100000000", "0100000000000000", "0011111000000000", "0011101100000000", "0011100000000000", "0011011000000000", "0011001100000000", "0011000100000000", "0010111000000000", "0010110000000000", "0010101000000000", "0010011100000000", "0010010100000000", "0010001100000000", "0010000100000000", "0001111100000000", "0001110100000000", "0001101100000000", "0001100100000000", "0001011100000000", "0001010100000000", "0001001100000000", "0001001000000000", "0001000000000000", "0000111100000000", "0000110100000000", "0000110000000000", "0000101000000000", "0000100100000000", "0000100000000000", "0000011100000000", "0000011000000000", "0000010100000000", "0000010000000000", "0000001100000000", "0000001100000000", "0000001000000000", "0000000100000000", "0000000100000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000100000000", "0000000100000000", "0000001000000000", "0000001100000000", "0000001100000000", "0000010000000000", "0000010100000000", "0000011000000000", "0000011100000000", "0000100000000000", "0000100100000000", "0000101000000000", "0000110000000000", "0000110100000000", "0000111100000000", "0001000000000000", "0001001000000000", "0001001100000000", "0001010100000000", "0001011100000000", "0001100100000000", "0001101100000000", "0001110100000000", "0001111100000000", "0010000100000000", "0010001100000000", "0010010100000000", "0010011100000000", "0010101000000000", "0010110000000000", "0010111000000000", "0011000100000000", "0011001100000000", "0011011000000000", "0011100000000000", "0011101100000000", "0011111000000000", "0100000000000000", "0100001100000000", "0100011000000000", "0100100100000000", "0100110000000000", "0100111100000000", "0101000100000000", "0101010000000000", "0101011100000000", "0101101000000000", "0101110100000000", "0110000000000000", "0110001100000000", "0110011100000000", "0110101000000000", "0110110100000000", "0111000000000000", "0111001100000000", "0111011000000000", "0111100100000000", "0111110000000000");

mem0 : blk_mem_gen_0
  PORT MAP (
    clka => clk,
    ena => '0',
    wea => "0",
    addra => "00000000000000000",
    dina => "0000000000000000",
    clkb => clk,
    enb => '1',
    addrb => addr0,
    doutb => dout0
  );
  
mem1 : blk_mem_gen_1
    PORT MAP (
      clka => clk,
      ena => '0',
      wea => "0",
      addra => "000000000000000000",
      dina => "0000000000000000",
      clkb => clk,
      enb => '1',
      addrb => addr1,
      doutb => dout1
    );

    
    process(clk)
       begin
          if rising_edge(clk) then
            if (enable = '1') then
                if (sel = '1') then
                    addr1 <= "000000000000000000";
                    if (UNSIGNED(addr0) < 83151) then
                        sample_out <= dout0;
                        if (inc = 6291) then  
                            addr0 <= STD_LOGIC_VECTOR(UNSIGNED(addr0) + 1);
                            inc <= "0000000000000";
                        else
                            inc <= inc + 1;
                        end if;
                    else 
                        sample_out <= "0000000000000000";
                    end if;
                 else
                    addr0 <= "00000000000000000";
                    if (UNSIGNED(addr1) < 220561) then
                        sample_out <= dout1;
                        if (inc = 1048) then  
                             addr1 <= STD_LOGIC_VECTOR(UNSIGNED(addr1) + 1);
                             inc <= "0000000000000";
                        else
                             inc <= inc + 1;
                        end if;
                     else 
                         sample_out <= "0000000000000000";
                     end if;
                 end if;
            else 
                addr0 <= "00000000000000000";
                addr1 <= "000000000000000000";
                sample_out <= "0000000000000000";
            end if;
         end if;  
       end process;
       

end Behavioral;

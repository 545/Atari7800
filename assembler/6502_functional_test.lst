AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5938 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2015  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ;
                        ; version 24-aug-2015
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $50 (80) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
0040 =                  zero_page = $40
                        
                        ;data_segment memory start address, $6A (106) consecutive Bytes required
0200 =                  data_segment = $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif
                        
                        ;code_segment memory start address, 13kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
4000 =                  code_segment = $4000
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(data_segment) ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(data_bss)+15 ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
0040 =                          org zero_page
                        ;break test interrupt save
0040 : 00               irq_a   ds  1               ;a register
0041 : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
0042 :                  zpt                         ;5 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
0042 : 00               adfc    ds  1               ;carry flag before op
0043 : 00               ad1     ds  1               ;operand 1 - accumulator
0044 : 00               ad2     ds  1               ;operand 2 - memory / immediate
0045 : 00               adrl    ds  1               ;expected result bits 0-7
0046 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0047 : 00               adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0048 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0049 :                  zp_bss
0049 : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
004d : 7f               zp7f    db  $7f             ;test pattern for compare
                        ;logical zeropage operands
004e : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
0052 : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0056 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
005a : 1702             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
005c : 1802                     dw  abs1+1
005e : 1902                     dw  abs1+2
0060 : 1a02                     dw  abs1+3
0062 : 1b02                     dw  abs7f
0064 : 1f01             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0066 : 0302             indt    dw  abst            ;indirect pointer to store area in absolute memory
0068 : 0402                     dw  abst+1
006a : 0502                     dw  abst+2
006c : 0602                     dw  abst+3
006e : 0b01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0070 : 4e02             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
0072 : 4f02                     dw  absAN+1
0074 : 5002                     dw  absAN+2
0076 : 5102                     dw  absAN+3
0078 : 5202             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
007a : 5302                     dw  absEO+1
007c : 5402                     dw  absEO+2
007e : 5502                     dw  absEO+3
0080 : 4a02             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
0082 : 4b02                     dw  absOR+1
0084 : 4c02                     dw  absOR+2
0086 : 4d02                     dw  absOR+3
                        ;add/subtract indirect pointers
0088 : 0302             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
008a : 0402             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
008c : 0401             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
008e : 0501             sbiy2   dw  sba2-$ff
0090 :                  zp_bss_end
                        
0200 =                          org data_segment
0200 : 00               test_case   ds  1           ;current test number
0201 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 :                  abst                        ;5 bytes store/modify test area
0203 : 00               ada2    ds  1               ;operand 2
0204 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0205 : 000000                   ds  3               ;fill remaining bytes
0208 :                  data_bss
                            if load_data_direct = 1
0208 : 2900             ex_andi and #0              ;execute immediate opcodes
020a : 60                       rts
020b : 4900             ex_eori eor #0              ;execute immediate opcodes
020d : 60                       rts
020e : 0900             ex_orai ora #0              ;execute immediate opcodes
0210 : 60                       rts
0211 : 6900             ex_adci adc #0              ;execute immediate opcodes
0213 : 60                       rts
0214 : e900             ex_sbci sbc #0              ;execute immediate opcodes
0216 : 60                       rts
                            else
                        ex_andi ds  3
                        ex_eori ds  3
                        ex_orai ds  3
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
0217 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021b : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
021c : 80800002         fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0220 :                  rASL                        ;expected result ASL & ROL -carry
0220 : 86048200         rROL    db  $86,$04,$82,0   ; "
0224 : 87058301         rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
0228 :                  rLSR                        ;expected result LSR & ROR -carry
0228 : 61412000         rROR    db  $61,$41,$20,0   ; "
022c : e1c1a080         rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
0230 :                  fASL                        ;expected flags for shifts
0230 : 81018002         fROL    db  fnc,fc,fn,fz    ;no carry in
0234 : 81018000         fROLc   db  fnc,fc,fn,0     ;carry in
0238 :                  fLSR
0238 : 01000102         fROR    db  fc,0,fc,fz      ;no carry in
023c : 81808180         fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0240 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
0245 : 0080800200       fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
024a : 001f7180         absOR   db  0,$1f,$71,$80   ;test pattern for OR
024e : 0fff7f80         absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
0252 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
0256 : 00f11f00         absORa  db  0,$f1,$1f,0     ;test pattern for OR
025a : f0ffffff         absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
025e : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
0262 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
0266 : 02800080         absflo  db  fz,fn,0,fn
026a :                  data_bss_end
                        
                        
                                code
4000 =                          org code_segment
4000 : d8               start   cld
4001 : a2ff                     ldx #$ff
4003 : 9a                       txs
4004 : a900                     lda #0          ;*** test 0 = initialize
4006 : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                        
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                        
                        ;pretest small branch offset
4009 : a205                     ldx #5
400b : 4c3340                   jmp psb_test
400e :                  psb_bwok
400e : a005                     ldy #5
4010 : d008                     bne psb_forw
                                trap        ;branch should be taken
4012 : 4c1240          >        jmp *           ;failed anyway
                        
4015 : 88                       dey         ;forward landing zone
4016 : 88                       dey
4017 : 88                       dey
4018 : 88                       dey
4019 : 88                       dey
401a :                  psb_forw
401a : 88                       dey
401b : 88                       dey
401c : 88                       dey
401d : 88                       dey
401e : 88                       dey
401f : f017                     beq psb_fwok
                                trap        ;forward offset
4021 : 4c2140          >        jmp *           ;failed anyway
                        
                        
4024 : ca                       dex         ;backward landing zone
4025 : ca                       dex
4026 : ca                       dex
4027 : ca                       dex
4028 : ca                       dex
4029 :                  psb_back
4029 : ca                       dex
402a : ca                       dex
402b : ca                       dex
402c : ca                       dex
402d : ca                       dex
402e : f0de                     beq psb_bwok
                                trap        ;backward offset
4030 : 4c3040          >        jmp *           ;failed anyway
                        
4033 :                  psb_test
4033 : d0f4                     bne psb_back
                                trap        ;branch should be taken
4035 : 4c3540          >        jmp *           ;failed anyway
                        
4038 :                  psb_fwok
                        
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                        
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(data_segment) ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(data_bss)+15 ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test
4038 : ad0002          >            lda test_case   ;previous test
403b : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
403d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
403f : a901            >            lda #test_num   ;*** next tests' number
4041 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
4044 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
4046 :                  range_loop
4046 : 88                       dey             ;next relative address
4047 : 98                       tya
4048 : aa                       tax             ;precharge count to end of loop
4049 : 1008                     bpl range_fw    ;calculate relative address
404b : 18                       clc             ;avoid branch self or to relative address of branch
404c : 6902                     adc #2
404e : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
404f : ea                       nop
4050 : ea                       nop
4051 : ea                       nop
4052 : ea                       nop
4053 :                  range_fw
4053 : ea                       nop
4054 : ea                       nop
4055 : ea                       nop
4056 : ea                       nop
4057 : ea                       nop
4058 : 497f                     eor #$7f        ;complement except sign
405a : 8de640                   sta range_adr   ;load into test target
405d : a900                     lda #0          ;should set zero flag in status register
405f : 4ce540                   jmp range_op
                        
4062 : ca                       dex             ; offset landing zone - backward branch too far
4063 : ca                       dex
4064 : ca                       dex
4065 : ca                       dex
4066 : ca                       dex
                                ;relative address target field with branch under test in the middle
4067 : ca                       dex             ;-128 - max backward
4068 : ca                       dex
4069 : ca                       dex
406a : ca                       dex
406b : ca                       dex
406c : ca                       dex
406d : ca                       dex
406e : ca                       dex
406f : ca                       dex             ;-120
4070 : ca                       dex
4071 : ca                       dex
4072 : ca                       dex
4073 : ca                       dex
4074 : ca                       dex
4075 : ca                       dex
4076 : ca                       dex
4077 : ca                       dex
4078 : ca                       dex
4079 : ca                       dex             ;-110
407a : ca                       dex
407b : ca                       dex
407c : ca                       dex
407d : ca                       dex
407e : ca                       dex
407f : ca                       dex
4080 : ca                       dex
4081 : ca                       dex
4082 : ca                       dex
4083 : ca                       dex             ;-100
4084 : ca                       dex
4085 : ca                       dex
4086 : ca                       dex
4087 : ca                       dex
4088 : ca                       dex
4089 : ca                       dex
408a : ca                       dex
408b : ca                       dex
408c : ca                       dex
408d : ca                       dex             ;-90
408e : ca                       dex
408f : ca                       dex
4090 : ca                       dex
4091 : ca                       dex
4092 : ca                       dex
4093 : ca                       dex
4094 : ca                       dex
4095 : ca                       dex
4096 : ca                       dex
4097 : ca                       dex             ;-80
4098 : ca                       dex
4099 : ca                       dex
409a : ca                       dex
409b : ca                       dex
409c : ca                       dex
409d : ca                       dex
409e : ca                       dex
409f : ca                       dex
40a0 : ca                       dex
40a1 : ca                       dex             ;-70
40a2 : ca                       dex
40a3 : ca                       dex
40a4 : ca                       dex
40a5 : ca                       dex
40a6 : ca                       dex
40a7 : ca                       dex
40a8 : ca                       dex
40a9 : ca                       dex
40aa : ca                       dex
40ab : ca                       dex             ;-60
40ac : ca                       dex
40ad : ca                       dex
40ae : ca                       dex
40af : ca                       dex
40b0 : ca                       dex
40b1 : ca                       dex
40b2 : ca                       dex
40b3 : ca                       dex
40b4 : ca                       dex
40b5 : ca                       dex             ;-50
40b6 : ca                       dex
40b7 : ca                       dex
40b8 : ca                       dex
40b9 : ca                       dex
40ba : ca                       dex
40bb : ca                       dex
40bc : ca                       dex
40bd : ca                       dex
40be : ca                       dex
40bf : ca                       dex             ;-40
40c0 : ca                       dex
40c1 : ca                       dex
40c2 : ca                       dex
40c3 : ca                       dex
40c4 : ca                       dex
40c5 : ca                       dex
40c6 : ca                       dex
40c7 : ca                       dex
40c8 : ca                       dex
40c9 : ca                       dex             ;-30
40ca : ca                       dex
40cb : ca                       dex
40cc : ca                       dex
40cd : ca                       dex
40ce : ca                       dex
40cf : ca                       dex
40d0 : ca                       dex
40d1 : ca                       dex
40d2 : ca                       dex
40d3 : ca                       dex             ;-20
40d4 : ca                       dex
40d5 : ca                       dex
40d6 : ca                       dex
40d7 : ca                       dex
40d8 : ca                       dex
40d9 : ca                       dex
40da : ca                       dex
40db : ca                       dex
40dc : ca                       dex
40dd : ca                       dex             ;-10
40de : ca                       dex
40df : ca                       dex
40e0 : ca                       dex
40e1 : ca                       dex
40e2 : ca                       dex
40e3 : ca                       dex
40e4 : ca                       dex             ;-3
40e5 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
40e6 =                  range_adr   = *+1       ;modifiable relative address
40e5 : f03e                     beq *+64        ;+64 if called without modification
40e7 : ca                       dex             ;+0
40e8 : ca                       dex
40e9 : ca                       dex
40ea : ca                       dex
40eb : ca                       dex
40ec : ca                       dex
40ed : ca                       dex
40ee : ca                       dex
40ef : ca                       dex
40f0 : ca                       dex
40f1 : ca                       dex             ;+10
40f2 : ca                       dex
40f3 : ca                       dex
40f4 : ca                       dex
40f5 : ca                       dex
40f6 : ca                       dex
40f7 : ca                       dex
40f8 : ca                       dex
40f9 : ca                       dex
40fa : ca                       dex
40fb : ca                       dex             ;+20
40fc : ca                       dex
40fd : ca                       dex
40fe : ca                       dex
40ff : ca                       dex
4100 : ca                       dex
4101 : ca                       dex
4102 : ca                       dex
4103 : ca                       dex
4104 : ca                       dex
4105 : ca                       dex             ;+30
4106 : ca                       dex
4107 : ca                       dex
4108 : ca                       dex
4109 : ca                       dex
410a : ca                       dex
410b : ca                       dex
410c : ca                       dex
410d : ca                       dex
410e : ca                       dex
410f : ca                       dex             ;+40
4110 : ca                       dex
4111 : ca                       dex
4112 : ca                       dex
4113 : ca                       dex
4114 : ca                       dex
4115 : ca                       dex
4116 : ca                       dex
4117 : ca                       dex
4118 : ca                       dex
4119 : ca                       dex             ;+50
411a : ca                       dex
411b : ca                       dex
411c : ca                       dex
411d : ca                       dex
411e : ca                       dex
411f : ca                       dex
4120 : ca                       dex
4121 : ca                       dex
4122 : ca                       dex
4123 : ca                       dex             ;+60
4124 : ca                       dex
4125 : ca                       dex
4126 : ca                       dex
4127 : ca                       dex
4128 : ca                       dex
4129 : ca                       dex
412a : ca                       dex
412b : ca                       dex
412c : ca                       dex
412d : ca                       dex             ;+70
412e : ca                       dex
412f : ca                       dex
4130 : ca                       dex
4131 : ca                       dex
4132 : ca                       dex
4133 : ca                       dex
4134 : ca                       dex
4135 : ca                       dex
4136 : ca                       dex
4137 : ca                       dex             ;+80
4138 : ca                       dex
4139 : ca                       dex
413a : ca                       dex
413b : ca                       dex
413c : ca                       dex
413d : ca                       dex
413e : ca                       dex
413f : ca                       dex
4140 : ca                       dex
4141 : ca                       dex             ;+90
4142 : ca                       dex
4143 : ca                       dex
4144 : ca                       dex
4145 : ca                       dex
4146 : ca                       dex
4147 : ca                       dex
4148 : ca                       dex
4149 : ca                       dex
414a : ca                       dex
414b : ca                       dex             ;+100
414c : ca                       dex
414d : ca                       dex
414e : ca                       dex
414f : ca                       dex
4150 : ca                       dex
4151 : ca                       dex
4152 : ca                       dex
4153 : ca                       dex
4154 : ca                       dex
4155 : ca                       dex             ;+110
4156 : ca                       dex
4157 : ca                       dex
4158 : ca                       dex
4159 : ca                       dex
415a : ca                       dex
415b : ca                       dex
415c : ca                       dex
415d : ca                       dex
415e : ca                       dex
415f : ca                       dex             ;+120
4160 : ca                       dex
4161 : ca                       dex
4162 : ca                       dex
4163 : ca                       dex
4164 : ca                       dex
4165 : ca                       dex
4166 : ea                       nop             ;offset landing zone - forward branch too far
4167 : ea                       nop
4168 : ea                       nop
4169 : ea                       nop
416a : ea                       nop
416b : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
416d : 4c6d41          >        jmp *           ;failed anyway
                        
4170 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
4171 : ea                       nop
4172 : ea                       nop
4173 : ea                       nop
4174 : ea                       nop
4175 :                  range_ok
4175 : ea                       nop
4176 : ea                       nop
4177 : ea                       nop
4178 : ea                       nop
4179 : ea                       nop
417a : c000                     cpy #0
417c : f003                     beq range_end
417e : 4c4640                   jmp range_loop
4181 :                  range_end               ;range test successful
                            endif
                                next_test
4181 : ad0002          >            lda test_case   ;previous test
4184 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4186 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
4188 : a902            >            lda #test_num   ;*** next tests' number
418a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
418d : c001                     cpy #1          ;testing BNE true
418f : d003                     bne test_bne
                                trap
4191 : 4c9141          >        jmp *           ;failed anyway
                        
4194 :                  test_bne
4194 : a900                     lda #0
4196 : c900                     cmp #0          ;test compare immediate
                                trap_ne
4198 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
419a : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
419c : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
419e : c901                     cmp #1
                                trap_eq
41a0 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
41a2 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
41a4 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
41a6 : aa                       tax
41a7 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
41a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
41ab : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
41ad : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
41af : e001                     cpx #1
                                trap_eq
41b1 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
41b3 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
41b5 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
41b7 : a8                       tay
41b8 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
41ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
41bc : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
41be : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
41c0 : c001                     cpy #1
                                trap_eq
41c2 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
41c4 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
41c6 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                next_test
41c8 : ad0002          >            lda test_case   ;previous test
41cb : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
41cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
41cf : a903            >            lda #test_num   ;*** next tests' number
41d1 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ;testing stack operations PHA PHP PLA PLP
                        
41d4 : a2ff                     ldx #$ff        ;initialize stack
41d6 : 9a                       txs
41d7 : a955                     lda #$55
41d9 : 48                       pha
41da : a9aa                     lda #$aa
41dc : 48                       pha
41dd : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
41e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
41e2 : ba                       tsx
41e3 : 8a                       txa             ;overwrite accu
41e4 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
41e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
41e8 : 68                       pla
41e9 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
41eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
41ed : 68                       pla
41ee : c955                     cmp #$55
                                trap_ne
41f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
41f2 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
41f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
41f7 : ba                       tsx
41f8 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
41fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
41fc : ad0002          >            lda test_case   ;previous test
41ff : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4201 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
4203 : a904            >            lda #test_num   ;*** next tests' number
4205 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                       >            load_flag $ff    
4208 : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
420a : 48              >            pha         ;use stack to load status
420b : 28              >            plp
                        
420c : 101a                     bpl nbr1        ;branches should not be taken
420e : 501b                     bvc nbr2
4210 : 901c                     bcc nbr3
4212 : d01d                     bne nbr4
4214 : 3003                     bmi br1         ;branches should be taken
                                trap
4216 : 4c1642          >        jmp *           ;failed anyway
                        
4219 : 7003             br1     bvs br2
                                trap
421b : 4c1b42          >        jmp *           ;failed anyway
                        
421e : b003             br2     bcs br3
                                trap
4220 : 4c2042          >        jmp *           ;failed anyway
                        
4223 : f00f             br3     beq br4
                                trap
4225 : 4c2542          >        jmp *           ;failed anyway
                        
4228 :                  nbr1
                                trap            ;previous bpl taken
4228 : 4c2842          >        jmp *           ;failed anyway
                        
422b :                  nbr2
                                trap            ;previous bvc taken
422b : 4c2b42          >        jmp *           ;failed anyway
                        
422e :                  nbr3
                                trap            ;previous bcc taken
422e : 4c2e42          >        jmp *           ;failed anyway
                        
4231 :                  nbr4
                                trap            ;previous bne taken
4231 : 4c3142          >        jmp *           ;failed anyway
                        
4234 : 08               br4     php
4235 : ba                       tsx
4236 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
4238 : d0fe            >        bne *           ;failed not equal (non zero)
                        
423a : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
423b : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
423d : d0fe            >        bne *           ;failed not equal (non zero)
                        
423f : ba                       tsx
4240 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
4242 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
4244 : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
4246 : 48              >            pha         ;use stack to load status
4247 : 28              >            plp
                        
4248 : 301a                     bmi nbr11       ;branches should not be taken
424a : 701b                     bvs nbr12
424c : b01c                     bcs nbr13
424e : f01d                     beq nbr14
4250 : 1003                     bpl br11        ;branches should be taken
                                trap
4252 : 4c5242          >        jmp *           ;failed anyway
                        
4255 : 5003             br11    bvc br12
                                trap
4257 : 4c5742          >        jmp *           ;failed anyway
                        
425a : 9003             br12    bcc br13
                                trap
425c : 4c5c42          >        jmp *           ;failed anyway
                        
425f : d00f             br13    bne br14
                                trap
4261 : 4c6142          >        jmp *           ;failed anyway
                        
4264 :                  nbr11
                                trap            ;previous bmi taken
4264 : 4c6442          >        jmp *           ;failed anyway
                        
4267 :                  nbr12
                                trap            ;previous bvs taken
4267 : 4c6742          >        jmp *           ;failed anyway
                        
426a :                  nbr13
                                trap            ;previous bcs taken
426a : 4c6a42          >        jmp *           ;failed anyway
                        
426d :                  nbr14
                                trap            ;previous beq taken
426d : 4c6d42          >        jmp *           ;failed anyway
                        
4270 : 08               br14    php
4271 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
4272 : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
4274 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
4276 : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
4278 : 48              >            pha         ;use stack to load status
4279 : 28              >            plp
                        
427a : d002                     bne brzs1
427c : f003                     beq brzs2
427e :                  brzs1
                                trap            ;branch zero/non zero
427e : 4c7e42          >        jmp *           ;failed anyway
                        
4281 : b002             brzs2   bcs brzs3
4283 : 9003                     bcc brzs4
4285 :                  brzs3
                                trap            ;branch carry/no carry
4285 : 4c8542          >        jmp *           ;failed anyway
                        
4288 : 3002             brzs4   bmi brzs5
428a : 1003                     bpl brzs6
428c :                  brzs5
                                trap            ;branch minus/plus
428c : 4c8c42          >        jmp *           ;failed anyway
                        
428f : 7002             brzs6   bvs brzs7
4291 : 5003                     bvc brzs8
4293 :                  brzs7
                                trap            ;branch overflow/no overflow
4293 : 4c9342          >        jmp *           ;failed anyway
                        
4296 :                  brzs8
                                set_stat carry
                       >            load_flag carry
4296 : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
4298 : 48              >            pha         ;use stack to load status
4299 : 28              >            plp
                        
429a : f002                     beq brcs1
429c : d003                     bne brcs2
429e :                  brcs1
                                trap            ;branch zero/non zero
429e : 4c9e42          >        jmp *           ;failed anyway
                        
42a1 : 9002             brcs2   bcc brcs3
42a3 : b003                     bcs brcs4
42a5 :                  brcs3
                                trap            ;branch carry/no carry
42a5 : 4ca542          >        jmp *           ;failed anyway
                        
42a8 : 3002             brcs4   bmi brcs5
42aa : 1003                     bpl brcs6
42ac :                  brcs5
                                trap            ;branch minus/plus
42ac : 4cac42          >        jmp *           ;failed anyway
                        
42af : 7002             brcs6   bvs brcs7
42b1 : 5003                     bvc brcs8
42b3 :                  brcs7
                                trap            ;branch overflow/no overflow
42b3 : 4cb342          >        jmp *           ;failed anyway
                        
                        
42b6 :                  brcs8
                                set_stat minus
                       >            load_flag minus
42b6 : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
42b8 : 48              >            pha         ;use stack to load status
42b9 : 28              >            plp
                        
42ba : f002                     beq brmi1
42bc : d003                     bne brmi2
42be :                  brmi1
                                trap            ;branch zero/non zero
42be : 4cbe42          >        jmp *           ;failed anyway
                        
42c1 : b002             brmi2   bcs brmi3
42c3 : 9003                     bcc brmi4
42c5 :                  brmi3
                                trap            ;branch carry/no carry
42c5 : 4cc542          >        jmp *           ;failed anyway
                        
42c8 : 1002             brmi4   bpl brmi5
42ca : 3003                     bmi brmi6
42cc :                  brmi5
                                trap            ;branch minus/plus
42cc : 4ccc42          >        jmp *           ;failed anyway
                        
42cf : 7002             brmi6   bvs brmi7
42d1 : 5003                     bvc brmi8
42d3 :                  brmi7
                                trap            ;branch overflow/no overflow
42d3 : 4cd342          >        jmp *           ;failed anyway
                        
42d6 :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
42d6 : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
42d8 : 48              >            pha         ;use stack to load status
42d9 : 28              >            plp
                        
42da : f002                     beq brvs1
42dc : d003                     bne brvs2
42de :                  brvs1
                                trap            ;branch zero/non zero
42de : 4cde42          >        jmp *           ;failed anyway
                        
42e1 : b002             brvs2   bcs brvs3
42e3 : 9003                     bcc brvs4
42e5 :                  brvs3
                                trap            ;branch carry/no carry
42e5 : 4ce542          >        jmp *           ;failed anyway
                        
42e8 : 3002             brvs4   bmi brvs5
42ea : 1003                     bpl brvs6
42ec :                  brvs5
                                trap            ;branch minus/plus
42ec : 4cec42          >        jmp *           ;failed anyway
                        
42ef : 5002             brvs6   bvc brvs7
42f1 : 7003                     bvs brvs8
42f3 :                  brvs7
                                trap            ;branch overflow/no overflow
42f3 : 4cf342          >        jmp *           ;failed anyway
                        
42f6 :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
42f6 : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
42f8 : 48              >            pha         ;use stack to load status
42f9 : 28              >            plp
                        
42fa : f002                     beq brzc1
42fc : d003                     bne brzc2
42fe :                  brzc1
                                trap            ;branch zero/non zero
42fe : 4cfe42          >        jmp *           ;failed anyway
                        
4301 : 9002             brzc2   bcc brzc3
4303 : b003                     bcs brzc4
4305 :                  brzc3
                                trap            ;branch carry/no carry
4305 : 4c0543          >        jmp *           ;failed anyway
                        
4308 : 1002             brzc4   bpl brzc5
430a : 3003                     bmi brzc6
430c :                  brzc5
                                trap            ;branch minus/plus
430c : 4c0c43          >        jmp *           ;failed anyway
                        
430f : 5002             brzc6   bvc brzc7
4311 : 7003                     bvs brzc8
4313 :                  brzc7
                                trap            ;branch overflow/no overflow
4313 : 4c1343          >        jmp *           ;failed anyway
                        
4316 :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
4316 : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
4318 : 48              >            pha         ;use stack to load status
4319 : 28              >            plp
                        
431a : d002                     bne brcc1
431c : f003                     beq brcc2
431e :                  brcc1
                                trap            ;branch zero/non zero
431e : 4c1e43          >        jmp *           ;failed anyway
                        
4321 : b002             brcc2   bcs brcc3
4323 : 9003                     bcc brcc4
4325 :                  brcc3
                                trap            ;branch carry/no carry
4325 : 4c2543          >        jmp *           ;failed anyway
                        
4328 : 1002             brcc4   bpl brcc5
432a : 3003                     bmi brcc6
432c :                  brcc5
                                trap            ;branch minus/plus
432c : 4c2c43          >        jmp *           ;failed anyway
                        
432f : 5002             brcc6   bvc brcc7
4331 : 7003                     bvs brcc8
4333 :                  brcc7
                                trap            ;branch overflow/no overflow
4333 : 4c3343          >        jmp *           ;failed anyway
                        
4336 :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
4336 : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
4338 : 48              >            pha         ;use stack to load status
4339 : 28              >            plp
                        
433a : d002                     bne brpl1
433c : f003                     beq brpl2
433e :                  brpl1
                                trap            ;branch zero/non zero
433e : 4c3e43          >        jmp *           ;failed anyway
                        
4341 : 9002             brpl2   bcc brpl3
4343 : b003                     bcs brpl4
4345 :                  brpl3
                                trap            ;branch carry/no carry
4345 : 4c4543          >        jmp *           ;failed anyway
                        
4348 : 3002             brpl4   bmi brpl5
434a : 1003                     bpl brpl6
434c :                  brpl5
                                trap            ;branch minus/plus
434c : 4c4c43          >        jmp *           ;failed anyway
                        
434f : 5002             brpl6   bvc brpl7
4351 : 7003                     bvs brpl8
4353 :                  brpl7
                                trap            ;branch overflow/no overflow
4353 : 4c5343          >        jmp *           ;failed anyway
                        
4356 :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
4356 : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
4358 : 48              >            pha         ;use stack to load status
4359 : 28              >            plp
                        
435a : d002                     bne brvc1
435c : f003                     beq brvc2
435e :                  brvc1
                                trap            ;branch zero/non zero
435e : 4c5e43          >        jmp *           ;failed anyway
                        
4361 : 9002             brvc2   bcc brvc3
4363 : b003                     bcs brvc4
4365 :                  brvc3
                                trap            ;branch carry/no carry
4365 : 4c6543          >        jmp *           ;failed anyway
                        
4368 : 1002             brvc4   bpl brvc5
436a : 3003                     bmi brvc6
436c :                  brvc5
                                trap            ;branch minus/plus
436c : 4c6c43          >        jmp *           ;failed anyway
                        
436f : 7002             brvc6   bvs brvc7
4371 : 5003                     bvc brvc8
4373 :                  brvc7
                                trap            ;branch overflow/no overflow
4373 : 4c7343          >        jmp *           ;failed anyway
                        
4376 :                  brvc8
                                next_test
4376 : ad0002          >            lda test_case   ;previous test
4379 : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
437b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
437d : a905            >            lda #test_num   ;*** next tests' number
437f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
4382 : a255                     ldx #$55        ;x & y protected
4384 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
4386 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
4388 : 48              >            pha         ;use stack to load status
4389 : a901            >            lda #1     ;precharge accu
438b : 28              >            plp
                        
438c : 48                       pha
                                tst_a 1,$ff
438d : 08              >            php         ;save flags
438e : c901            >            cmp #1     ;test result
                       >            trap_ne
4390 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4392 : 68              >            pla         ;load status
4393 : 48              >            pha
                       >            cmp_flag $ff
4394 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4396 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4398 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
4399 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
439b : 48              >            pha         ;use stack to load status
439c : a900            >            lda #0     ;precharge accu
439e : 28              >            plp
                        
439f : 48                       pha
                                tst_a 0,0
43a0 : 08              >            php         ;save flags
43a1 : c900            >            cmp #0     ;test result
                       >            trap_ne
43a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43a5 : 68              >            pla         ;load status
43a6 : 48              >            pha
                       >            cmp_flag 0
43a7 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
43a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43ab : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
43ac : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
43ae : 48              >            pha         ;use stack to load status
43af : a9ff            >            lda #$ff     ;precharge accu
43b1 : 28              >            plp
                        
43b2 : 48                       pha
                                tst_a $ff,$ff
43b3 : 08              >            php         ;save flags
43b4 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
43b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43b8 : 68              >            pla         ;load status
43b9 : 48              >            pha
                       >            cmp_flag $ff
43ba : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
43bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43be : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
43bf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
43c1 : 48              >            pha         ;use stack to load status
43c2 : a901            >            lda #1     ;precharge accu
43c4 : 28              >            plp
                        
43c5 : 48                       pha
                                tst_a 1,0
43c6 : 08              >            php         ;save flags
43c7 : c901            >            cmp #1     ;test result
                       >            trap_ne
43c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43cb : 68              >            pla         ;load status
43cc : 48              >            pha
                       >            cmp_flag 0
43cd : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
43cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43d1 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
43d2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
43d4 : 48              >            pha         ;use stack to load status
43d5 : a900            >            lda #0     ;precharge accu
43d7 : 28              >            plp
                        
43d8 : 48                       pha
                                tst_a 0,$ff
43d9 : 08              >            php         ;save flags
43da : c900            >            cmp #0     ;test result
                       >            trap_ne
43dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43de : 68              >            pla         ;load status
43df : 48              >            pha
                       >            cmp_flag $ff
43e0 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
43e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43e4 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
43e5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
43e7 : 48              >            pha         ;use stack to load status
43e8 : a9ff            >            lda #$ff     ;precharge accu
43ea : 28              >            plp
                        
43eb : 48                       pha
                                tst_a $ff,0
43ec : 08              >            php         ;save flags
43ed : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
43ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43f1 : 68              >            pla         ;load status
43f2 : 48              >            pha
                       >            cmp_flag 0
43f3 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
43f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
43f7 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
43f8 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
43fa : 48              >            pha         ;use stack to load status
43fb : a900            >            lda #0     ;precharge accu
43fd : 28              >            plp
                        
43fe : 68                       pla
                                tst_a $ff,$ff-zero
43ff : 08              >            php         ;save flags
4400 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
4402 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4404 : 68              >            pla         ;load status
4405 : 48              >            pha
                       >            cmp_flag $ff-zero
4406 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4408 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
440a : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
440b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
440d : 48              >            pha         ;use stack to load status
440e : a9ff            >            lda #$ff     ;precharge accu
4410 : 28              >            plp
                        
4411 : 68                       pla
                                tst_a 0,zero
4412 : 08              >            php         ;save flags
4413 : c900            >            cmp #0     ;test result
                       >            trap_ne
4415 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4417 : 68              >            pla         ;load status
4418 : 48              >            pha
                       >            cmp_flag zero
4419 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
441b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
441d : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
441e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4420 : 48              >            pha         ;use stack to load status
4421 : a9fe            >            lda #$fe     ;precharge accu
4423 : 28              >            plp
                        
4424 : 68                       pla
                                tst_a 1,$ff-zero-minus
4425 : 08              >            php         ;save flags
4426 : c901            >            cmp #1     ;test result
                       >            trap_ne
4428 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
442a : 68              >            pla         ;load status
442b : 48              >            pha
                       >            cmp_flag $ff-zero-minus
442c : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
442e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4430 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
4431 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4433 : 48              >            pha         ;use stack to load status
4434 : a900            >            lda #0     ;precharge accu
4436 : 28              >            plp
                        
4437 : 68                       pla
                                tst_a $ff,minus
4438 : 08              >            php         ;save flags
4439 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
443b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
443d : 68              >            pla         ;load status
443e : 48              >            pha
                       >            cmp_flag minus
443f : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4441 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4443 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
4444 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4446 : 48              >            pha         ;use stack to load status
4447 : a9ff            >            lda #$ff     ;precharge accu
4449 : 28              >            plp
                        
444a : 68                       pla
                                tst_a 0,$ff-minus
444b : 08              >            php         ;save flags
444c : c900            >            cmp #0     ;test result
                       >            trap_ne
444e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4450 : 68              >            pla         ;load status
4451 : 48              >            pha
                       >            cmp_flag $ff-minus
4452 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4454 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4456 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
4457 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4459 : 48              >            pha         ;use stack to load status
445a : a9fe            >            lda #$fe     ;precharge accu
445c : 28              >            plp
                        
445d : 68                       pla
                                tst_a 1,0
445e : 08              >            php         ;save flags
445f : c901            >            cmp #1     ;test result
                       >            trap_ne
4461 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4463 : 68              >            pla         ;load status
4464 : 48              >            pha
                       >            cmp_flag 0
4465 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4467 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4469 : 28              >            plp         ;restore status
                        
446a : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
446c : d0fe            >        bne *           ;failed not equal (non zero)
                        
446e : c0aa                     cpy #$aa
                                trap_ne
4470 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
4472 : ad0002          >            lda test_case   ;previous test
4475 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4477 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
4479 : a906            >            lda #test_num   ;*** next tests' number
447b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
447e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4480 : 48              >            pha         ;use stack to load status
4481 : a93c            >            lda #$3c     ;precharge accu
4483 : 28              >            plp
                        
4484 : 49c3                     eor #$c3
                                tst_a $ff,fn
4486 : 08              >            php         ;save flags
4487 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
4489 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
448b : 68              >            pla         ;load status
448c : 48              >            pha
                       >            cmp_flag fn
448d : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
448f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4491 : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
4492 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4494 : 48              >            pha         ;use stack to load status
4495 : a9c3            >            lda #$c3     ;precharge accu
4497 : 28              >            plp
                        
4498 : 49c3                     eor #$c3
                                tst_a 0,fz
449a : 08              >            php         ;save flags
449b : c900            >            cmp #0     ;test result
                       >            trap_ne
449d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
449f : 68              >            pla         ;load status
44a0 : 48              >            pha
                       >            cmp_flag fz
44a1 : c932            >            cmp #(fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
44a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44a5 : 28              >            plp         ;restore status
                        
                                next_test
44a6 : ad0002          >            lda test_case   ;previous test
44a9 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
44ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
44ad : a907            >            lda #test_num   ;*** next tests' number
44af : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
44b2 : a224                     ldx #$24
44b4 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
44b6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
44b8 : 48              >            pha         ;use stack to load status
44b9 : a918            >            lda #$18     ;precharge accu
44bb : 28              >            plp
                        
44bc : ea                       nop
                                tst_a $18,0
44bd : 08              >            php         ;save flags
44be : c918            >            cmp #$18     ;test result
                       >            trap_ne
44c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44c2 : 68              >            pla         ;load status
44c3 : 48              >            pha
                       >            cmp_flag 0
44c4 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
44c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44c8 : 28              >            plp         ;restore status
                        
44c9 : e024                     cpx #$24
                                trap_ne
44cb : d0fe            >        bne *           ;failed not equal (non zero)
                        
44cd : c042                     cpy #$42
                                trap_ne
44cf : d0fe            >        bne *           ;failed not equal (non zero)
                        
44d1 : a2db                     ldx #$db
44d3 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
44d5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
44d7 : 48              >            pha         ;use stack to load status
44d8 : a9e7            >            lda #$e7     ;precharge accu
44da : 28              >            plp
                        
44db : ea                       nop
                                tst_a $e7,$ff
44dc : 08              >            php         ;save flags
44dd : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
44df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44e1 : 68              >            pla         ;load status
44e2 : 48              >            pha
                       >            cmp_flag $ff
44e3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
44e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
44e7 : 28              >            plp         ;restore status
                        
44e8 : e0db                     cpx #$db
                                trap_ne
44ea : d0fe            >        bne *           ;failed not equal (non zero)
                        
44ec : c0bd                     cpy #$bd
                                trap_ne
44ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
44f0 : ad0002          >            lda test_case   ;previous test
44f3 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
44f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
44f7 : a908            >            lda #test_num   ;*** next tests' number
44f9 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
44fc : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
44fe : 48              >            pha         ;use stack to load status
44ff : 28              >            plp
                        
4500 : a946                     lda #'F'
4502 : a241                     ldx #'A'
4504 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
4506 : 4cc972                   jmp test_far
4509 : ea                       nop
450a : ea                       nop
                                trap_ne         ;runover protection
450b : d0fe            >        bne *           ;failed not equal (non zero)
                        
450d : e8                       inx
450e : e8                       inx
450f :                  far_ret
                                trap_eq         ;returned flags OK?
450f : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
4511 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
4513 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
4515 : 50fe            >        bvc *           ;failed overflow clear
                        
4517 : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
4519 : d0fe            >        bne *           ;failed not equal (non zero)
                        
451b : e042                     cpx #('A'+1)
                                trap_ne
451d : d0fe            >        bne *           ;failed not equal (non zero)
                        
451f : c04f                     cpy #('R'-3)
                                trap_ne
4521 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4523 : ca                       dex
4524 : c8                       iny
4525 : c8                       iny
4526 : c8                       iny
4527 : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
4529 : 4c3245                   jmp test_near
452c : ea                       nop
452d : ea                       nop
                                trap_ne         ;runover protection
452e : d0fe            >        bne *           ;failed not equal (non zero)
                        
4530 : e8                       inx
4531 : e8                       inx
4532 :                  test_near
                                trap_eq         ;passed flags OK?
4532 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_mi
4534 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_cc
4536 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
4538 : 50fe            >        bvc *           ;failed overflow clear
                        
453a : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
453c : d0fe            >        bne *           ;failed not equal (non zero)
                        
453e : e041                     cpx #'A'
                                trap_ne
4540 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4542 : c052                     cpy #'R'
                                trap_ne
4544 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
4546 : ad0002          >            lda test_case   ;previous test
4549 : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
454b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
454d : a909            >            lda #test_num   ;*** next tests' number
454f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
4552 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4554 : 48              >            pha         ;use stack to load status
4555 : 28              >            plp
                        
4556 : a949                     lda #'I'
4558 : a24e                     ldx #'N'
455a : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
455c : 6cf872                   jmp (ptr_tst_ind)
455f : ea                       nop
                                trap_ne         ;runover protection
4560 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4562 : 88                       dey
4563 : 88                       dey
4564 :                  ind_ret
4564 : 08                       php             ;either SP or Y count will fail, if we do not hit
4565 : 88                       dey
4566 : 88                       dey
4567 : 88                       dey
4568 : 28                       plp
                                trap_eq         ;returned flags OK?
4569 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
456b : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
456d : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
456f : 50fe            >        bvc *           ;failed overflow clear
                        
4571 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
4573 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4575 : e04f                     cpx #('N'+1)
                                trap_ne
4577 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4579 : c03e                     cpy #('D'-6)
                                trap_ne
457b : d0fe            >        bne *           ;failed not equal (non zero)
                        
457d : ba                       tsx             ;SP check
457e : e0ff                     cpx #$ff
                                trap_ne
4580 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
4582 : ad0002          >            lda test_case   ;previous test
4585 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4587 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
4589 : a90a            >            lda #test_num   ;*** next tests' number
458b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
458e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4590 : 48              >            pha         ;use stack to load status
4591 : 28              >            plp
                        
4592 : a94a                     lda #'J'
4594 : a253                     ldx #'S'
4596 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
4598 : 203473                   jsr test_jsr
459a =                  jsr_ret = *-1           ;last address of jsr = return address
459b : 08                       php             ;either SP or Y count will fail, if we do not hit
459c : 88                       dey
459d : 88                       dey
459e : 88                       dey
459f : 28                       plp
                                trap_eq         ;returned flags OK?
45a0 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
45a2 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
45a4 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
45a6 : 50fe            >        bvc *           ;failed overflow clear
                        
45a8 : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
45aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
45ac : e054                     cpx #('S'+1)
                                trap_ne
45ae : d0fe            >        bne *           ;failed not equal (non zero)
                        
45b0 : c04c                     cpy #('R'-6)
                                trap_ne
45b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
45b4 : ba                       tsx             ;sp?
45b5 : e0ff                     cpx #$ff
                                trap_ne
45b7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
45b9 : ad0002          >            lda test_case   ;previous test
45bc : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
45be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
45c0 : a90b            >            lda #test_num   ;*** next tests' number
45c2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                set_stat 0
                       >            load_flag 0
45c5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
45c7 : 48              >            pha         ;use stack to load status
45c8 : 28              >            plp
                        
45c9 : a942                     lda #'B'
45cb : a252                     ldx #'R'
45cd : a04b                     ldy #'K'        ;N=0, V=0, Z=0, C=0
45cf : 00                       brk
                            else
                                lda #hi brk_ret ;emulated break
                                pha
                                lda #lo brk_ret
                                pha
                                lda #fao        ;set break & unused on stack
                                pha
                                set_stat intdis
                                lda #'B'
                                ldx #'R'
                                ldy #'K'        ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
45d0 : 88                       dey             ;should not be executed
45d1 :                  brk_ret                 ;address of break return
45d1 : 08                       php             ;either SP or Y count will fail, if we do not hit
45d2 : 88                       dey
45d3 : 88                       dey
45d4 : 88                       dey
45d5 : c9e8                     cmp #('B'^$aa)  ;returned registers OK?
                                trap_ne
45d7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
45d9 : e053                     cpx #('R'+1)
                                trap_ne
45db : d0fe            >        bne *           ;failed not equal (non zero)
                        
45dd : c045                     cpy #('K'-6)
                                trap_ne
45df : d0fe            >        bne *           ;failed not equal (non zero)
                        
45e1 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
45e2 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
45e4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
45e6 : ba                       tsx             ;sp?
45e7 : e0ff                     cpx #$ff
                                trap_ne
45e9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
45eb : ad0002          >            lda test_case   ;previous test
45ee : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
45f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
45f2 : a90c            >            lda #test_num   ;*** next tests' number
45f4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
45f7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
45f9 : 48              >            pha         ;use stack to load status
45fa : 28              >            plp
                        
45fb : 18                       clc
                                tst_stat $ff-carry
45fc : 08              >            php         ;save status
45fd : 68              >            pla         ;use stack to retrieve status
45fe : 48              >            pha
                       >            cmp_flag $ff-carry
45ff : c9fe            >            cmp #($ff-carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4601 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4603 : 28              >            plp         ;restore status
                        
4604 : 38                       sec
                                tst_stat $ff
4605 : 08              >            php         ;save status
4606 : 68              >            pla         ;use stack to retrieve status
4607 : 48              >            pha
                       >            cmp_flag $ff
4608 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
460a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
460c : 28              >            plp         ;restore status
                        
                            if I_flag = 3
460d : 58                       cli
                                tst_stat $ff-intdis
460e : 08              >            php         ;save status
460f : 68              >            pla         ;use stack to retrieve status
4610 : 48              >            pha
                       >            cmp_flag $ff-intdis
4611 : c9fb            >            cmp #($ff-intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4613 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4615 : 28              >            plp         ;restore status
                        
4616 : 78                       sei
                                tst_stat $ff
4617 : 08              >            php         ;save status
4618 : 68              >            pla         ;use stack to retrieve status
4619 : 48              >            pha
                       >            cmp_flag $ff
461a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
461c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
461e : 28              >            plp         ;restore status
                        
                            endif
461f : d8                       cld
                                tst_stat $ff-decmode
4620 : 08              >            php         ;save status
4621 : 68              >            pla         ;use stack to retrieve status
4622 : 48              >            pha
                       >            cmp_flag $ff-decmode
4623 : c9f7            >            cmp #($ff-decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4625 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4627 : 28              >            plp         ;restore status
                        
4628 : f8                       sed
                                tst_stat $ff
4629 : 08              >            php         ;save status
462a : 68              >            pla         ;use stack to retrieve status
462b : 48              >            pha
                       >            cmp_flag $ff
462c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
462e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4630 : 28              >            plp         ;restore status
                        
4631 : b8                       clv
                                tst_stat $ff-overfl
4632 : 08              >            php         ;save status
4633 : 68              >            pla         ;use stack to retrieve status
4634 : 48              >            pha
                       >            cmp_flag $ff-overfl
4635 : c9bf            >            cmp #($ff-overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4637 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4639 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
463a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
463c : 48              >            pha         ;use stack to load status
463d : 28              >            plp
                        
                                tst_stat 0
463e : 08              >            php         ;save status
463f : 68              >            pla         ;use stack to retrieve status
4640 : 48              >            pha
                       >            cmp_flag 0
4641 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4643 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4645 : 28              >            plp         ;restore status
                        
4646 : 38                       sec
                                tst_stat carry
4647 : 08              >            php         ;save status
4648 : 68              >            pla         ;use stack to retrieve status
4649 : 48              >            pha
                       >            cmp_flag carry
464a : c931            >            cmp #(carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
464c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
464e : 28              >            plp         ;restore status
                        
464f : 18                       clc
                                tst_stat 0
4650 : 08              >            php         ;save status
4651 : 68              >            pla         ;use stack to retrieve status
4652 : 48              >            pha
                       >            cmp_flag 0
4653 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4655 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4657 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
4658 : 78                       sei
                                tst_stat intdis
4659 : 08              >            php         ;save status
465a : 68              >            pla         ;use stack to retrieve status
465b : 48              >            pha
                       >            cmp_flag intdis
465c : c934            >            cmp #(intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
465e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4660 : 28              >            plp         ;restore status
                        
4661 : 58                       cli
                                tst_stat 0
4662 : 08              >            php         ;save status
4663 : 68              >            pla         ;use stack to retrieve status
4664 : 48              >            pha
                       >            cmp_flag 0
4665 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4667 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4669 : 28              >            plp         ;restore status
                        
                            endif
466a : f8                       sed
                                tst_stat decmode
466b : 08              >            php         ;save status
466c : 68              >            pla         ;use stack to retrieve status
466d : 48              >            pha
                       >            cmp_flag decmode
466e : c938            >            cmp #(decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4670 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4672 : 28              >            plp         ;restore status
                        
4673 : d8                       cld
                                tst_stat 0
4674 : 08              >            php         ;save status
4675 : 68              >            pla         ;use stack to retrieve status
4676 : 48              >            pha
                       >            cmp_flag 0
4677 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4679 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
467b : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
467c : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
467e : 48              >            pha         ;use stack to load status
467f : 28              >            plp
                        
                                tst_stat overfl
4680 : 08              >            php         ;save status
4681 : 68              >            pla         ;use stack to retrieve status
4682 : 48              >            pha
                       >            cmp_flag overfl
4683 : c970            >            cmp #(overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4685 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4687 : 28              >            plp         ;restore status
                        
4688 : b8                       clv
                                tst_stat 0
4689 : 08              >            php         ;save status
468a : 68              >            pla         ;use stack to retrieve status
468b : 48              >            pha
                       >            cmp_flag 0
468c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
468e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4690 : 28              >            plp         ;restore status
                        
                                next_test
4691 : ad0002          >            lda test_case   ;previous test
4694 : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4696 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
4698 : a90d            >            lda #test_num   ;*** next tests' number
469a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA
469d : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
469f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
46a1 : 48              >            pha         ;use stack to load status
46a2 : 28              >            plp
                        
46a3 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
46a4 : 08              >            php         ;save flags
46a5 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
46a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46a9 : 68              >            pla         ;load status
46aa : 48              >            pha
                       >            cmp_flag $ff-zero
46ab : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
46ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46af : 28              >            plp         ;restore status
                        
46b0 : e8                       inx             ;00
                                tst_x 0,$ff-minus
46b1 : 08              >            php         ;save flags
46b2 : e000            >            cpx #0     ;test result
                       >            trap_ne
46b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46b6 : 68              >            pla         ;load status
46b7 : 48              >            pha
                       >            cmp_flag $ff-minus
46b8 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
46ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46bc : 28              >            plp         ;restore status
                        
46bd : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
46be : 08              >            php         ;save flags
46bf : e001            >            cpx #1     ;test result
                       >            trap_ne
46c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46c3 : 68              >            pla         ;load status
46c4 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
46c5 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
46c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46c9 : 28              >            plp         ;restore status
                        
46ca : ca                       dex             ;00
                                tst_x 0,$ff-minus
46cb : 08              >            php         ;save flags
46cc : e000            >            cpx #0     ;test result
                       >            trap_ne
46ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46d0 : 68              >            pla         ;load status
46d1 : 48              >            pha
                       >            cmp_flag $ff-minus
46d2 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
46d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46d6 : 28              >            plp         ;restore status
                        
46d7 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
46d8 : 08              >            php         ;save flags
46d9 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
46db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46dd : 68              >            pla         ;load status
46de : 48              >            pha
                       >            cmp_flag $ff-zero
46df : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
46e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46e3 : 28              >            plp         ;restore status
                        
46e4 : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
46e5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
46e7 : 48              >            pha         ;use stack to load status
46e8 : 28              >            plp
                        
46e9 : e8                       inx             ;ff
                                tst_x $ff,minus
46ea : 08              >            php         ;save flags
46eb : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
46ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46ef : 68              >            pla         ;load status
46f0 : 48              >            pha
                       >            cmp_flag minus
46f1 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
46f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46f5 : 28              >            plp         ;restore status
                        
46f6 : e8                       inx             ;00
                                tst_x 0,zero
46f7 : 08              >            php         ;save flags
46f8 : e000            >            cpx #0     ;test result
                       >            trap_ne
46fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
46fc : 68              >            pla         ;load status
46fd : 48              >            pha
                       >            cmp_flag zero
46fe : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4700 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4702 : 28              >            plp         ;restore status
                        
4703 : e8                       inx             ;01
                                tst_x 1,0
4704 : 08              >            php         ;save flags
4705 : e001            >            cpx #1     ;test result
                       >            trap_ne
4707 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4709 : 68              >            pla         ;load status
470a : 48              >            pha
                       >            cmp_flag 0
470b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
470d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
470f : 28              >            plp         ;restore status
                        
4710 : ca                       dex             ;00
                                tst_x 0,zero
4711 : 08              >            php         ;save flags
4712 : e000            >            cpx #0     ;test result
                       >            trap_ne
4714 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4716 : 68              >            pla         ;load status
4717 : 48              >            pha
                       >            cmp_flag zero
4718 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
471a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
471c : 28              >            plp         ;restore status
                        
471d : ca                       dex             ;ff
                                tst_x $ff,minus
471e : 08              >            php         ;save flags
471f : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
4721 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4723 : 68              >            pla         ;load status
4724 : 48              >            pha
                       >            cmp_flag minus
4725 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4727 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4729 : 28              >            plp         ;restore status
                        
                        
472a : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
472c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
472e : 48              >            pha         ;use stack to load status
472f : 28              >            plp
                        
4730 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
4731 : 08              >            php         ;save flags
4732 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
4734 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4736 : 68              >            pla         ;load status
4737 : 48              >            pha
                       >            cmp_flag $ff-zero
4738 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
473a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
473c : 28              >            plp         ;restore status
                        
473d : c8                       iny             ;00
                                tst_y 0,$ff-minus
473e : 08              >            php         ;save flags
473f : c000            >            cpy #0     ;test result
                       >            trap_ne
4741 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4743 : 68              >            pla         ;load status
4744 : 48              >            pha
                       >            cmp_flag $ff-minus
4745 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4747 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4749 : 28              >            plp         ;restore status
                        
474a : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
474b : 08              >            php         ;save flags
474c : c001            >            cpy #1     ;test result
                       >            trap_ne
474e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4750 : 68              >            pla         ;load status
4751 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
4752 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4754 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4756 : 28              >            plp         ;restore status
                        
4757 : 88                       dey             ;00
                                tst_y 0,$ff-minus
4758 : 08              >            php         ;save flags
4759 : c000            >            cpy #0     ;test result
                       >            trap_ne
475b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
475d : 68              >            pla         ;load status
475e : 48              >            pha
                       >            cmp_flag $ff-minus
475f : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4761 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4763 : 28              >            plp         ;restore status
                        
4764 : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
4765 : 08              >            php         ;save flags
4766 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
4768 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
476a : 68              >            pla         ;load status
476b : 48              >            pha
                       >            cmp_flag $ff-zero
476c : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
476e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4770 : 28              >            plp         ;restore status
                        
4771 : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
4772 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4774 : 48              >            pha         ;use stack to load status
4775 : 28              >            plp
                        
4776 : c8                       iny             ;ff
                                tst_y $ff,0+minus
4777 : 08              >            php         ;save flags
4778 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
477a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
477c : 68              >            pla         ;load status
477d : 48              >            pha
                       >            cmp_flag 0+minus
477e : c9b0            >            cmp #(0+minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4780 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4782 : 28              >            plp         ;restore status
                        
4783 : c8                       iny             ;00
                                tst_y 0,zero
4784 : 08              >            php         ;save flags
4785 : c000            >            cpy #0     ;test result
                       >            trap_ne
4787 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4789 : 68              >            pla         ;load status
478a : 48              >            pha
                       >            cmp_flag zero
478b : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
478d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
478f : 28              >            plp         ;restore status
                        
4790 : c8                       iny             ;01
                                tst_y 1,0
4791 : 08              >            php         ;save flags
4792 : c001            >            cpy #1     ;test result
                       >            trap_ne
4794 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4796 : 68              >            pla         ;load status
4797 : 48              >            pha
                       >            cmp_flag 0
4798 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
479a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
479c : 28              >            plp         ;restore status
                        
479d : 88                       dey             ;00
                                tst_y 0,zero
479e : 08              >            php         ;save flags
479f : c000            >            cpy #0     ;test result
                       >            trap_ne
47a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47a3 : 68              >            pla         ;load status
47a4 : 48              >            pha
                       >            cmp_flag zero
47a5 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
47a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47a9 : 28              >            plp         ;restore status
                        
47aa : 88                       dey             ;ff
                                tst_y $ff,minus
47ab : 08              >            php         ;save flags
47ac : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
47ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47b0 : 68              >            pla         ;load status
47b1 : 48              >            pha
                       >            cmp_flag minus
47b2 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
47b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47b6 : 28              >            plp         ;restore status
                        
                        
47b7 : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
47b9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
47bb : 48              >            pha         ;use stack to load status
47bc : 28              >            plp
                        
47bd : 8a                       txa
                                tst_a $ff,$ff-zero
47be : 08              >            php         ;save flags
47bf : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
47c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47c3 : 68              >            pla         ;load status
47c4 : 48              >            pha
                       >            cmp_flag $ff-zero
47c5 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
47c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47c9 : 28              >            plp         ;restore status
                        
47ca : 08                       php
47cb : e8                       inx             ;00
47cc : 28                       plp
47cd : 8a                       txa
                                tst_a 0,$ff-minus
47ce : 08              >            php         ;save flags
47cf : c900            >            cmp #0     ;test result
                       >            trap_ne
47d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47d3 : 68              >            pla         ;load status
47d4 : 48              >            pha
                       >            cmp_flag $ff-minus
47d5 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
47d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47d9 : 28              >            plp         ;restore status
                        
47da : 08                       php
47db : e8                       inx             ;01
47dc : 28                       plp
47dd : 8a                       txa
                                tst_a 1,$ff-minus-zero
47de : 08              >            php         ;save flags
47df : c901            >            cmp #1     ;test result
                       >            trap_ne
47e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47e3 : 68              >            pla         ;load status
47e4 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
47e5 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
47e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47e9 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
47ea : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
47ec : 48              >            pha         ;use stack to load status
47ed : 28              >            plp
                        
47ee : 8a                       txa
                                tst_a 1,0
47ef : 08              >            php         ;save flags
47f0 : c901            >            cmp #1     ;test result
                       >            trap_ne
47f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47f4 : 68              >            pla         ;load status
47f5 : 48              >            pha
                       >            cmp_flag 0
47f6 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
47f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
47fa : 28              >            plp         ;restore status
                        
47fb : 08                       php
47fc : ca                       dex             ;00
47fd : 28                       plp
47fe : 8a                       txa
                                tst_a 0,zero
47ff : 08              >            php         ;save flags
4800 : c900            >            cmp #0     ;test result
                       >            trap_ne
4802 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4804 : 68              >            pla         ;load status
4805 : 48              >            pha
                       >            cmp_flag zero
4806 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4808 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
480a : 28              >            plp         ;restore status
                        
480b : 08                       php
480c : ca                       dex             ;ff
480d : 28                       plp
480e : 8a                       txa
                                tst_a $ff,minus
480f : 08              >            php         ;save flags
4810 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
4812 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4814 : 68              >            pla         ;load status
4815 : 48              >            pha
                       >            cmp_flag minus
4816 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4818 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
481a : 28              >            plp         ;restore status
                        
                        
481b : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
481d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
481f : 48              >            pha         ;use stack to load status
4820 : 28              >            plp
                        
4821 : 98                       tya
                                tst_a $ff,$ff-zero
4822 : 08              >            php         ;save flags
4823 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
4825 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4827 : 68              >            pla         ;load status
4828 : 48              >            pha
                       >            cmp_flag $ff-zero
4829 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
482b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
482d : 28              >            plp         ;restore status
                        
482e : 08                       php
482f : c8                       iny             ;00
4830 : 28                       plp
4831 : 98                       tya
                                tst_a 0,$ff-minus
4832 : 08              >            php         ;save flags
4833 : c900            >            cmp #0     ;test result
                       >            trap_ne
4835 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4837 : 68              >            pla         ;load status
4838 : 48              >            pha
                       >            cmp_flag $ff-minus
4839 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
483b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
483d : 28              >            plp         ;restore status
                        
483e : 08                       php
483f : c8                       iny             ;01
4840 : 28                       plp
4841 : 98                       tya
                                tst_a 1,$ff-minus-zero
4842 : 08              >            php         ;save flags
4843 : c901            >            cmp #1     ;test result
                       >            trap_ne
4845 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4847 : 68              >            pla         ;load status
4848 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
4849 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
484b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
484d : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
484e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4850 : 48              >            pha         ;use stack to load status
4851 : 28              >            plp
                        
4852 : 98                       tya
                                tst_a 1,0
4853 : 08              >            php         ;save flags
4854 : c901            >            cmp #1     ;test result
                       >            trap_ne
4856 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4858 : 68              >            pla         ;load status
4859 : 48              >            pha
                       >            cmp_flag 0
485a : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
485c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
485e : 28              >            plp         ;restore status
                        
485f : 08                       php
4860 : 88                       dey             ;00
4861 : 28                       plp
4862 : 98                       tya
                                tst_a 0,zero
4863 : 08              >            php         ;save flags
4864 : c900            >            cmp #0     ;test result
                       >            trap_ne
4866 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4868 : 68              >            pla         ;load status
4869 : 48              >            pha
                       >            cmp_flag zero
486a : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
486c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
486e : 28              >            plp         ;restore status
                        
486f : 08                       php
4870 : 88                       dey             ;ff
4871 : 28                       plp
4872 : 98                       tya
                                tst_a $ff,minus
4873 : 08              >            php         ;save flags
4874 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
4876 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4878 : 68              >            pla         ;load status
4879 : 48              >            pha
                       >            cmp_flag minus
487a : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
487c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
487e : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
487f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
4881 : 48                       pha
4882 : a2ff                     ldx #$ff        ;ff
4884 : 8a                       txa
4885 : 28                       plp
4886 : a8                       tay
                                tst_y $ff,$ff-zero
4887 : 08              >            php         ;save flags
4888 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
488a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
488c : 68              >            pla         ;load status
488d : 48              >            pha
                       >            cmp_flag $ff-zero
488e : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4890 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4892 : 28              >            plp         ;restore status
                        
4893 : 08                       php
4894 : e8                       inx             ;00
4895 : 8a                       txa
4896 : 28                       plp
4897 : a8                       tay
                                tst_y 0,$ff-minus
4898 : 08              >            php         ;save flags
4899 : c000            >            cpy #0     ;test result
                       >            trap_ne
489b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
489d : 68              >            pla         ;load status
489e : 48              >            pha
                       >            cmp_flag $ff-minus
489f : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
48a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48a3 : 28              >            plp         ;restore status
                        
48a4 : 08                       php
48a5 : e8                       inx             ;01
48a6 : 8a                       txa
48a7 : 28                       plp
48a8 : a8                       tay
                                tst_y 1,$ff-minus-zero
48a9 : 08              >            php         ;save flags
48aa : c001            >            cpy #1     ;test result
                       >            trap_ne
48ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48ae : 68              >            pla         ;load status
48af : 48              >            pha
                       >            cmp_flag $ff-minus-zero
48b0 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
48b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48b4 : 28              >            plp         ;restore status
                        
                                load_flag 0
48b5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
48b7 : 48                       pha
48b8 : a900                     lda #0
48ba : 8a                       txa
48bb : 28                       plp
48bc : a8                       tay
                                tst_y 1,0
48bd : 08              >            php         ;save flags
48be : c001            >            cpy #1     ;test result
                       >            trap_ne
48c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48c2 : 68              >            pla         ;load status
48c3 : 48              >            pha
                       >            cmp_flag 0
48c4 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
48c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48c8 : 28              >            plp         ;restore status
                        
48c9 : 08                       php
48ca : ca                       dex             ;00
48cb : 8a                       txa
48cc : 28                       plp
48cd : a8                       tay
                                tst_y 0,zero
48ce : 08              >            php         ;save flags
48cf : c000            >            cpy #0     ;test result
                       >            trap_ne
48d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48d3 : 68              >            pla         ;load status
48d4 : 48              >            pha
                       >            cmp_flag zero
48d5 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
48d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48d9 : 28              >            plp         ;restore status
                        
48da : 08                       php
48db : ca                       dex             ;ff
48dc : 8a                       txa
48dd : 28                       plp
48de : a8                       tay
                                tst_y $ff,minus
48df : 08              >            php         ;save flags
48e0 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
48e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48e4 : 68              >            pla         ;load status
48e5 : 48              >            pha
                       >            cmp_flag minus
48e6 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
48e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48ea : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
48eb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
48ed : 48                       pha
48ee : a0ff                     ldy #$ff        ;ff
48f0 : 98                       tya
48f1 : 28                       plp
48f2 : aa                       tax
                                tst_x $ff,$ff-zero
48f3 : 08              >            php         ;save flags
48f4 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
48f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48f8 : 68              >            pla         ;load status
48f9 : 48              >            pha
                       >            cmp_flag $ff-zero
48fa : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
48fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
48fe : 28              >            plp         ;restore status
                        
48ff : 08                       php
4900 : c8                       iny             ;00
4901 : 98                       tya
4902 : 28                       plp
4903 : aa                       tax
                                tst_x 0,$ff-minus
4904 : 08              >            php         ;save flags
4905 : e000            >            cpx #0     ;test result
                       >            trap_ne
4907 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4909 : 68              >            pla         ;load status
490a : 48              >            pha
                       >            cmp_flag $ff-minus
490b : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
490d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
490f : 28              >            plp         ;restore status
                        
4910 : 08                       php
4911 : c8                       iny             ;01
4912 : 98                       tya
4913 : 28                       plp
4914 : aa                       tax
                                tst_x 1,$ff-minus-zero
4915 : 08              >            php         ;save flags
4916 : e001            >            cpx #1     ;test result
                       >            trap_ne
4918 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
491a : 68              >            pla         ;load status
491b : 48              >            pha
                       >            cmp_flag $ff-minus-zero
491c : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
491e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4920 : 28              >            plp         ;restore status
                        
                                load_flag 0
4921 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
4923 : 48                       pha
4924 : a900                     lda #0          ;preset status
4926 : 98                       tya
4927 : 28                       plp
4928 : aa                       tax
                                tst_x 1,0
4929 : 08              >            php         ;save flags
492a : e001            >            cpx #1     ;test result
                       >            trap_ne
492c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
492e : 68              >            pla         ;load status
492f : 48              >            pha
                       >            cmp_flag 0
4930 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4932 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4934 : 28              >            plp         ;restore status
                        
4935 : 08                       php
4936 : 88                       dey             ;00
4937 : 98                       tya
4938 : 28                       plp
4939 : aa                       tax
                                tst_x 0,zero
493a : 08              >            php         ;save flags
493b : e000            >            cpx #0     ;test result
                       >            trap_ne
493d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
493f : 68              >            pla         ;load status
4940 : 48              >            pha
                       >            cmp_flag zero
4941 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4943 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4945 : 28              >            plp         ;restore status
                        
4946 : 08                       php
4947 : 88                       dey             ;ff
4948 : 98                       tya
4949 : 28                       plp
494a : aa                       tax
                                tst_x $ff,minus
494b : 08              >            php         ;save flags
494c : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
494e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4950 : 68              >            pla         ;load status
4951 : 48              >            pha
                       >            cmp_flag minus
4952 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4954 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
4956 : 28              >            plp         ;restore status
                        
                                next_test
4957 : ad0002          >            lda test_case   ;previous test
495a : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
495c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000e =                 >test_num = test_num + 1
495e : a90e            >            lda #test_num   ;*** next tests' number
4960 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
4963 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
4965 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4967 : 48              >            pha         ;use stack to load status
4968 : 28              >            plp
                        
4969 : 9a                       txs
496a : 08                       php
496b : ad0101                   lda $101
                                cmp_flag $ff
496e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
4970 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4972 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4974 : 48              >            pha         ;use stack to load status
4975 : 28              >            plp
                        
4976 : 9a                       txs
4977 : 08                       php
4978 : ad0101                   lda $101
                                cmp_flag 0
497b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
497d : d0fe            >        bne *           ;failed not equal (non zero)
                        
497f : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
4980 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4982 : 48              >            pha         ;use stack to load status
4983 : 28              >            plp
                        
4984 : 9a                       txs
4985 : 08                       php
4986 : ad0001                   lda $100
                                cmp_flag $ff
4989 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
498b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
498d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
498f : 48              >            pha         ;use stack to load status
4990 : 28              >            plp
                        
4991 : 9a                       txs
4992 : 08                       php
4993 : ad0001                   lda $100
                                cmp_flag 0
4996 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
4998 : d0fe            >        bne *           ;failed not equal (non zero)
                        
499a : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
499b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
499d : 48              >            pha         ;use stack to load status
499e : 28              >            plp
                        
499f : 9a                       txs
49a0 : 08                       php
49a1 : adff01                   lda $1ff
                                cmp_flag $ff
49a4 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
49a6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
49a8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
49aa : 48              >            pha         ;use stack to load status
49ab : 28              >            plp
                        
49ac : 9a                       txs
49ad : 08                       php
49ae : adff01                   lda $1ff
                                cmp_flag 0
49b1 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                        
49b3 : a201                     ldx #1
49b5 : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
49b6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
49b8 : 48              >            pha         ;use stack to load status
49b9 : 28              >            plp
                        
49ba : ba                       tsx             ;clears Z, N
49bb : 08                       php             ;sp=00
49bc : e001                     cpx #1
                                trap_ne
49be : d0fe            >        bne *           ;failed not equal (non zero)
                        
49c0 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
49c3 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
49c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
49c7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
49c9 : 48              >            pha         ;use stack to load status
49ca : 28              >            plp
                        
49cb : ba                       tsx             ;clears N, sets Z
49cc : 08                       php             ;sp=ff
49cd : e000                     cpx #0
                                trap_ne
49cf : d0fe            >        bne *           ;failed not equal (non zero)
                        
49d1 : ad0001                   lda $100
                                cmp_flag $ff-minus
49d4 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
49d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
49d8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
49da : 48              >            pha         ;use stack to load status
49db : 28              >            plp
                        
49dc : ba                       tsx             ;clears N, sets Z
49dd : 08                       php             ;sp=fe
49de : e0ff                     cpx #$ff
                                trap_ne
49e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
49e2 : adff01                   lda $1ff
                                cmp_flag $ff-zero
49e5 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
49e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
49e9 : a201                     ldx #1
49eb : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
49ec : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
49ee : 48              >            pha         ;use stack to load status
49ef : 28              >            plp
                        
49f0 : ba                       tsx             ;clears Z, N
49f1 : 08                       php             ;sp=00
49f2 : e001                     cpx #1
                                trap_ne
49f4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
49f6 : ad0101                   lda $101
                                cmp_flag 0
49f9 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
49fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
49fd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
49ff : 48              >            pha         ;use stack to load status
4a00 : 28              >            plp
                        
4a01 : ba                       tsx             ;clears N, sets Z
4a02 : 08                       php             ;sp=ff
4a03 : e000                     cpx #0
                                trap_ne
4a05 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4a07 : ad0001                   lda $100
                                cmp_flag zero
4a0a : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
4a0c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4a0e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4a10 : 48              >            pha         ;use stack to load status
4a11 : 28              >            plp
                        
4a12 : ba                       tsx             ;clears N, sets Z
4a13 : 08                       php             ;sp=fe
4a14 : e0ff                     cpx #$ff
                                trap_ne
4a16 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4a18 : adff01                   lda $1ff
                                cmp_flag minus
4a1b : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
4a1d : d0fe            >        bne *           ;failed not equal (non zero)
                        
4a1f : 68                       pla             ;sp=ff
                                next_test
4a20 : ad0002          >            lda test_case   ;previous test
4a23 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4a25 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000f =                 >test_num = test_num + 1
4a27 : a90f            >            lda #test_num   ;*** next tests' number
4a29 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
4a2c : a003                     ldy #3
4a2e :                  tldx
                                set_stat 0
                       >            load_flag 0
4a2e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4a30 : 48              >            pha         ;use stack to load status
4a31 : 28              >            plp
                        
4a32 : b649                     ldx zp1,y
4a34 : 08                       php         ;test stores do not alter flags
4a35 : 8a                       txa
4a36 : 49c3                     eor #$c3
4a38 : 28                       plp
4a39 : 990302                   sta abst,y
4a3c : 08                       php         ;flags after load/store sequence
4a3d : 49c3                     eor #$c3
4a3f : d91702                   cmp abs1,y  ;test result
                                trap_ne
4a42 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4a44 : 68                       pla         ;load status
                                eor_flag 0
4a45 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4a47 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
4a4a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4a4c : 88                       dey
4a4d : 10df                     bpl tldx
                        
4a4f : a003                     ldy #3
4a51 :                  tldx1
                                set_stat $ff
                       >            load_flag $ff
4a51 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4a53 : 48              >            pha         ;use stack to load status
4a54 : 28              >            plp
                        
4a55 : b649                     ldx zp1,y
4a57 : 08                       php         ;test stores do not alter flags
4a58 : 8a                       txa
4a59 : 49c3                     eor #$c3
4a5b : 28                       plp
4a5c : 990302                   sta abst,y
4a5f : 08                       php         ;flags after load/store sequence
4a60 : 49c3                     eor #$c3
4a62 : d91702                   cmp abs1,y  ;test result
                                trap_ne
4a65 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4a67 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4a68 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4a6a : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
4a6d : d0fe            >        bne *           ;failed not equal (non zero)
                        
4a6f : 88                       dey
4a70 : 10df                     bpl tldx1
                        
4a72 : a003                     ldy #3
4a74 :                  tldx2
                                set_stat 0
                       >            load_flag 0
4a74 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4a76 : 48              >            pha         ;use stack to load status
4a77 : 28              >            plp
                        
4a78 : be1702                   ldx abs1,y
4a7b : 08                       php         ;test stores do not alter flags
4a7c : 8a                       txa
4a7d : 49c3                     eor #$c3
4a7f : aa                       tax
4a80 : 28                       plp
4a81 : 9642                     stx zpt,y
4a83 : 08                       php         ;flags after load/store sequence
4a84 : 49c3                     eor #$c3
4a86 : d94900                   cmp zp1,y   ;test result
                                trap_ne
4a89 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4a8b : 68                       pla         ;load status
                                eor_flag 0
4a8c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4a8e : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
4a91 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4a93 : 88                       dey
4a94 : 10de                     bpl tldx2
                        
4a96 : a003                     ldy #3
4a98 :                  tldx3
                                set_stat $ff
                       >            load_flag $ff
4a98 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4a9a : 48              >            pha         ;use stack to load status
4a9b : 28              >            plp
                        
4a9c : be1702                   ldx abs1,y
4a9f : 08                       php         ;test stores do not alter flags
4aa0 : 8a                       txa
4aa1 : 49c3                     eor #$c3
4aa3 : aa                       tax
4aa4 : 28                       plp
4aa5 : 9642                     stx zpt,y
4aa7 : 08                       php         ;flags after load/store sequence
4aa8 : 49c3                     eor #$c3
4aaa : d94900                   cmp zp1,y   ;test result
                                trap_ne
4aad : d0fe            >        bne *           ;failed not equal (non zero)
                        
4aaf : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4ab0 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4ab2 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
4ab5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ab7 : 88                       dey
4ab8 : 10de                     bpl tldx3
                        
4aba : a003                     ldy #3      ;testing store result
4abc : a200                     ldx #0
4abe : b94200           tstx    lda zpt,y
4ac1 : 49c3                     eor #$c3
4ac3 : d94900                   cmp zp1,y
                                trap_ne     ;store to zp data
4ac6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ac8 : 9642                     stx zpt,y   ;clear
4aca : b90302                   lda abst,y
4acd : 49c3                     eor #$c3
4acf : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
4ad2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ad4 : 8a                       txa
4ad5 : 990302                   sta abst,y  ;clear
4ad8 : 88                       dey
4ad9 : 10e3                     bpl tstx
                                next_test
4adb : ad0002          >            lda test_case   ;previous test
4ade : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4ae0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
4ae2 : a910            >            lda #test_num   ;*** next tests' number
4ae4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
4ae7 : a0fd                     ldy #3+$fa
4ae9 : b64f             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
4aeb : 8a                       txa
4aec : 990901                   sta abst-$fa,y      ;no STX abs,y!
4aef : 88                       dey
4af0 : c0fa                     cpy #$fa
4af2 : b0f5                     bcs tldx4
4af4 : a0fd                     ldy #3+$fa
4af6 : be1d01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
4af9 : 9648                     stx zpt-$fa&$ff,y
4afb : 88                       dey
4afc : c0fa                     cpy #$fa
4afe : b0f6                     bcs tldx5
4b00 : a003                     ldy #3      ;testing wraparound result
4b02 : a200                     ldx #0
4b04 : b94200           tstx1   lda zpt,y
4b07 : d94900                   cmp zp1,y
                                trap_ne     ;store to zp data
4b0a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b0c : 9642                     stx zpt,y   ;clear
4b0e : b90302                   lda abst,y
4b11 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
4b14 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b16 : 8a                       txa
4b17 : 990302                   sta abst,y  ;clear
4b1a : 88                       dey
4b1b : 10e7                     bpl tstx1
                                next_test
4b1d : ad0002          >            lda test_case   ;previous test
4b20 : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4b22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
4b24 : a911            >            lda #test_num   ;*** next tests' number
4b26 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp,x / abs,x
4b29 : a203                     ldx #3
4b2b :                  tldy
                                set_stat 0
                       >            load_flag 0
4b2b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4b2d : 48              >            pha         ;use stack to load status
4b2e : 28              >            plp
                        
4b2f : b449                     ldy zp1,x
4b31 : 08                       php         ;test stores do not alter flags
4b32 : 98                       tya
4b33 : 49c3                     eor #$c3
4b35 : 28                       plp
4b36 : 9d0302                   sta abst,x
4b39 : 08                       php         ;flags after load/store sequence
4b3a : 49c3                     eor #$c3
4b3c : dd1702                   cmp abs1,x  ;test result
                                trap_ne
4b3f : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b41 : 68                       pla         ;load status
                                eor_flag 0
4b42 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4b44 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
4b47 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b49 : ca                       dex
4b4a : 10df                     bpl tldy
                        
4b4c : a203                     ldx #3
4b4e :                  tldy1
                                set_stat $ff
                       >            load_flag $ff
4b4e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4b50 : 48              >            pha         ;use stack to load status
4b51 : 28              >            plp
                        
4b52 : b449                     ldy zp1,x
4b54 : 08                       php         ;test stores do not alter flags
4b55 : 98                       tya
4b56 : 49c3                     eor #$c3
4b58 : 28                       plp
4b59 : 9d0302                   sta abst,x
4b5c : 08                       php         ;flags after load/store sequence
4b5d : 49c3                     eor #$c3
4b5f : dd1702                   cmp abs1,x  ;test result
                                trap_ne
4b62 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b64 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4b65 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4b67 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
4b6a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b6c : ca                       dex
4b6d : 10df                     bpl tldy1
                        
4b6f : a203                     ldx #3
4b71 :                  tldy2
                                set_stat 0
                       >            load_flag 0
4b71 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4b73 : 48              >            pha         ;use stack to load status
4b74 : 28              >            plp
                        
4b75 : bc1702                   ldy abs1,x
4b78 : 08                       php         ;test stores do not alter flags
4b79 : 98                       tya
4b7a : 49c3                     eor #$c3
4b7c : a8                       tay
4b7d : 28                       plp
4b7e : 9442                     sty zpt,x
4b80 : 08                       php         ;flags after load/store sequence
4b81 : 49c3                     eor #$c3
4b83 : d549                     cmp zp1,x   ;test result
                                trap_ne
4b85 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b87 : 68                       pla         ;load status
                                eor_flag 0
4b88 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4b8a : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
4b8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
4b8f : ca                       dex
4b90 : 10df                     bpl tldy2
                        
4b92 : a203                     ldx #3
4b94 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
4b94 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4b96 : 48              >            pha         ;use stack to load status
4b97 : 28              >            plp
                        
4b98 : bc1702                   ldy abs1,x
4b9b : 08                       php         ;test stores do not alter flags
4b9c : 98                       tya
4b9d : 49c3                     eor #$c3
4b9f : a8                       tay
4ba0 : 28                       plp
4ba1 : 9442                     sty zpt,x
4ba3 : 08                       php         ;flags after load/store sequence
4ba4 : 49c3                     eor #$c3
4ba6 : d549                     cmp zp1,x   ;test result
                                trap_ne
4ba8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4baa : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4bab : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4bad : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
4bb0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4bb2 : ca                       dex
4bb3 : 10df                     bpl tldy3
                        
4bb5 : a203                     ldx #3      ;testing store result
4bb7 : a000                     ldy #0
4bb9 : b542             tsty    lda zpt,x
4bbb : 49c3                     eor #$c3
4bbd : d549                     cmp zp1,x
                                trap_ne     ;store to zp,x data
4bbf : d0fe            >        bne *           ;failed not equal (non zero)
                        
4bc1 : 9442                     sty zpt,x   ;clear
4bc3 : bd0302                   lda abst,x
4bc6 : 49c3                     eor #$c3
4bc8 : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
4bcb : d0fe            >        bne *           ;failed not equal (non zero)
                        
4bcd : 8a                       txa
4bce : 9d0302                   sta abst,x  ;clear
4bd1 : ca                       dex
4bd2 : 10e5                     bpl tsty
                                next_test
4bd4 : ad0002          >            lda test_case   ;previous test
4bd7 : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4bd9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
4bdb : a912            >            lda #test_num   ;*** next tests' number
4bdd : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
4be0 : a2fd                     ldx #3+$fa
4be2 : b44f             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
4be4 : 98                       tya
4be5 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
4be8 : ca                       dex
4be9 : e0fa                     cpx #$fa
4beb : b0f5                     bcs tldy4
4bed : a2fd                     ldx #3+$fa
4bef : bc1d01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
4bf2 : 9448                     sty zpt-$fa&$ff,x
4bf4 : ca                       dex
4bf5 : e0fa                     cpx #$fa
4bf7 : b0f6                     bcs tldy5
4bf9 : a203                     ldx #3      ;testing wraparound result
4bfb : a000                     ldy #0
4bfd : b542             tsty1   lda zpt,x
4bff : d549                     cmp zp1,x
                                trap_ne     ;store to zp,x data
4c01 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c03 : 9442                     sty zpt,x   ;clear
4c05 : bd0302                   lda abst,x
4c08 : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
4c0b : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c0d : 8a                       txa
4c0e : 9d0302                   sta abst,x  ;clear
4c11 : ca                       dex
4c12 : 10e9                     bpl tsty1
                                next_test
4c14 : ad0002          >            lda test_case   ;previous test
4c17 : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4c19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
4c1b : a913            >            lda #test_num   ;*** next tests' number
4c1d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0
                       >            load_flag 0
4c20 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4c22 : 48              >            pha         ;use stack to load status
4c23 : 28              >            plp
                        
4c24 : a649                     ldx zp1
4c26 : 08                       php         ;test stores do not alter flags
4c27 : 8a                       txa
4c28 : 49c3                     eor #$c3
4c2a : aa                       tax
4c2b : 28                       plp
4c2c : 8e0302                   stx abst
4c2f : 08                       php         ;flags after load/store sequence
4c30 : 49c3                     eor #$c3
4c32 : aa                       tax
4c33 : e0c3                     cpx #$c3    ;test result
                                trap_ne
4c35 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c37 : 68                       pla         ;load status
                                eor_flag 0
4c38 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4c3a : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
4c3d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4c3f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4c41 : 48              >            pha         ;use stack to load status
4c42 : 28              >            plp
                        
4c43 : a64a                     ldx zp1+1
4c45 : 08                       php         ;test stores do not alter flags
4c46 : 8a                       txa
4c47 : 49c3                     eor #$c3
4c49 : aa                       tax
4c4a : 28                       plp
4c4b : 8e0402                   stx abst+1
4c4e : 08                       php         ;flags after load/store sequence
4c4f : 49c3                     eor #$c3
4c51 : aa                       tax
4c52 : e082                     cpx #$82    ;test result
                                trap_ne
4c54 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c56 : 68                       pla         ;load status
                                eor_flag 0
4c57 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4c59 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
4c5c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4c5e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4c60 : 48              >            pha         ;use stack to load status
4c61 : 28              >            plp
                        
4c62 : a64b                     ldx zp1+2
4c64 : 08                       php         ;test stores do not alter flags
4c65 : 8a                       txa
4c66 : 49c3                     eor #$c3
4c68 : aa                       tax
4c69 : 28                       plp
4c6a : 8e0502                   stx abst+2
4c6d : 08                       php         ;flags after load/store sequence
4c6e : 49c3                     eor #$c3
4c70 : aa                       tax
4c71 : e041                     cpx #$41    ;test result
                                trap_ne
4c73 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c75 : 68                       pla         ;load status
                                eor_flag 0
4c76 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4c78 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
4c7b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4c7d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4c7f : 48              >            pha         ;use stack to load status
4c80 : 28              >            plp
                        
4c81 : a64c                     ldx zp1+3
4c83 : 08                       php         ;test stores do not alter flags
4c84 : 8a                       txa
4c85 : 49c3                     eor #$c3
4c87 : aa                       tax
4c88 : 28                       plp
4c89 : 8e0602                   stx abst+3
4c8c : 08                       php         ;flags after load/store sequence
4c8d : 49c3                     eor #$c3
4c8f : aa                       tax
4c90 : e000                     cpx #0      ;test result
                                trap_ne
4c92 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4c94 : 68                       pla         ;load status
                                eor_flag 0
4c95 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4c97 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
4c9a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
4c9c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4c9e : 48              >            pha         ;use stack to load status
4c9f : 28              >            plp
                        
4ca0 : a649                     ldx zp1
4ca2 : 08                       php         ;test stores do not alter flags
4ca3 : 8a                       txa
4ca4 : 49c3                     eor #$c3
4ca6 : aa                       tax
4ca7 : 28                       plp
4ca8 : 8e0302                   stx abst
4cab : 08                       php         ;flags after load/store sequence
4cac : 49c3                     eor #$c3
4cae : aa                       tax
4caf : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
4cb1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4cb3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4cb4 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4cb6 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
4cb9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4cbb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4cbd : 48              >            pha         ;use stack to load status
4cbe : 28              >            plp
                        
4cbf : a64a                     ldx zp1+1
4cc1 : 08                       php         ;test stores do not alter flags
4cc2 : 8a                       txa
4cc3 : 49c3                     eor #$c3
4cc5 : aa                       tax
4cc6 : 28                       plp
4cc7 : 8e0402                   stx abst+1
4cca : 08                       php         ;flags after load/store sequence
4ccb : 49c3                     eor #$c3
4ccd : aa                       tax
4cce : e082                     cpx #$82    ;test result
                                trap_ne
4cd0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4cd2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4cd3 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4cd5 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
4cd8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4cda : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4cdc : 48              >            pha         ;use stack to load status
4cdd : 28              >            plp
                        
4cde : a64b                     ldx zp1+2
4ce0 : 08                       php         ;test stores do not alter flags
4ce1 : 8a                       txa
4ce2 : 49c3                     eor #$c3
4ce4 : aa                       tax
4ce5 : 28                       plp
4ce6 : 8e0502                   stx abst+2
4ce9 : 08                       php         ;flags after load/store sequence
4cea : 49c3                     eor #$c3
4cec : aa                       tax
4ced : e041                     cpx #$41    ;test result
                                trap_ne     ;
4cef : d0fe            >        bne *           ;failed not equal (non zero)
                        
4cf1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4cf2 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4cf4 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
4cf7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4cf9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4cfb : 48              >            pha         ;use stack to load status
4cfc : 28              >            plp
                        
4cfd : a64c                     ldx zp1+3
4cff : 08                       php         ;test stores do not alter flags
4d00 : 8a                       txa
4d01 : 49c3                     eor #$c3
4d03 : aa                       tax
4d04 : 28                       plp
4d05 : 8e0602                   stx abst+3
4d08 : 08                       php         ;flags after load/store sequence
4d09 : 49c3                     eor #$c3
4d0b : aa                       tax
4d0c : e000                     cpx #0      ;test result
                                trap_ne
4d0e : d0fe            >        bne *           ;failed not equal (non zero)
                        
4d10 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4d11 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4d13 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
4d16 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
4d18 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4d1a : 48              >            pha         ;use stack to load status
4d1b : 28              >            plp
                        
4d1c : ae1702                   ldx abs1
4d1f : 08                       php         ;test stores do not alter flags
4d20 : 8a                       txa
4d21 : 49c3                     eor #$c3
4d23 : aa                       tax
4d24 : 28                       plp
4d25 : 8642                     stx zpt
4d27 : 08                       php         ;flags after load/store sequence
4d28 : 49c3                     eor #$c3
4d2a : c549                     cmp zp1     ;test result
                                trap_ne
4d2c : d0fe            >        bne *           ;failed not equal (non zero)
                        
4d2e : 68                       pla         ;load status
                                eor_flag 0
4d2f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4d31 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
4d34 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4d36 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4d38 : 48              >            pha         ;use stack to load status
4d39 : 28              >            plp
                        
4d3a : ae1802                   ldx abs1+1
4d3d : 08                       php         ;test stores do not alter flags
4d3e : 8a                       txa
4d3f : 49c3                     eor #$c3
4d41 : aa                       tax
4d42 : 28                       plp
4d43 : 8643                     stx zpt+1
4d45 : 08                       php         ;flags after load/store sequence
4d46 : 49c3                     eor #$c3
4d48 : c54a                     cmp zp1+1   ;test result
                                trap_ne
4d4a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4d4c : 68                       pla         ;load status
                                eor_flag 0
4d4d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4d4f : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
4d52 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4d54 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4d56 : 48              >            pha         ;use stack to load status
4d57 : 28              >            plp
                        
4d58 : ae1902                   ldx abs1+2
4d5b : 08                       php         ;test stores do not alter flags
4d5c : 8a                       txa
4d5d : 49c3                     eor #$c3
4d5f : aa                       tax
4d60 : 28                       plp
4d61 : 8644                     stx zpt+2
4d63 : 08                       php         ;flags after load/store sequence
4d64 : 49c3                     eor #$c3
4d66 : c54b                     cmp zp1+2   ;test result
                                trap_ne
4d68 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4d6a : 68                       pla         ;load status
                                eor_flag 0
4d6b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4d6d : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
4d70 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4d72 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4d74 : 48              >            pha         ;use stack to load status
4d75 : 28              >            plp
                        
4d76 : ae1a02                   ldx abs1+3
4d79 : 08                       php         ;test stores do not alter flags
4d7a : 8a                       txa
4d7b : 49c3                     eor #$c3
4d7d : aa                       tax
4d7e : 28                       plp
4d7f : 8645                     stx zpt+3
4d81 : 08                       php         ;flags after load/store sequence
4d82 : 49c3                     eor #$c3
4d84 : c54c                     cmp zp1+3   ;test result
                                trap_ne
4d86 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4d88 : 68                       pla         ;load status
                                eor_flag 0
4d89 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4d8b : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
4d8e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
4d90 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4d92 : 48              >            pha         ;use stack to load status
4d93 : 28              >            plp
                        
4d94 : ae1702                   ldx abs1
4d97 : 08                       php         ;test stores do not alter flags
4d98 : 8a                       txa
4d99 : 49c3                     eor #$c3
4d9b : aa                       tax
4d9c : 28                       plp
4d9d : 8642                     stx zpt
4d9f : 08                       php         ;flags after load/store sequence
4da0 : 49c3                     eor #$c3
4da2 : aa                       tax
4da3 : e449                     cpx zp1     ;test result
                                trap_ne
4da5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4da7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4da8 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4daa : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
4dad : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4daf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4db1 : 48              >            pha         ;use stack to load status
4db2 : 28              >            plp
                        
4db3 : ae1802                   ldx abs1+1
4db6 : 08                       php         ;test stores do not alter flags
4db7 : 8a                       txa
4db8 : 49c3                     eor #$c3
4dba : aa                       tax
4dbb : 28                       plp
4dbc : 8643                     stx zpt+1
4dbe : 08                       php         ;flags after load/store sequence
4dbf : 49c3                     eor #$c3
4dc1 : aa                       tax
4dc2 : e44a                     cpx zp1+1   ;test result
                                trap_ne
4dc4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4dc6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4dc7 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4dc9 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
4dcc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4dce : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4dd0 : 48              >            pha         ;use stack to load status
4dd1 : 28              >            plp
                        
4dd2 : ae1902                   ldx abs1+2
4dd5 : 08                       php         ;test stores do not alter flags
4dd6 : 8a                       txa
4dd7 : 49c3                     eor #$c3
4dd9 : aa                       tax
4dda : 28                       plp
4ddb : 8644                     stx zpt+2
4ddd : 08                       php         ;flags after load/store sequence
4dde : 49c3                     eor #$c3
4de0 : aa                       tax
4de1 : e44b                     cpx zp1+2   ;test result
                                trap_ne
4de3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4de5 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4de6 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4de8 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
4deb : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4ded : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4def : 48              >            pha         ;use stack to load status
4df0 : 28              >            plp
                        
4df1 : ae1a02                   ldx abs1+3
4df4 : 08                       php         ;test stores do not alter flags
4df5 : 8a                       txa
4df6 : 49c3                     eor #$c3
4df8 : aa                       tax
4df9 : 28                       plp
4dfa : 8645                     stx zpt+3
4dfc : 08                       php         ;flags after load/store sequence
4dfd : 49c3                     eor #$c3
4dff : aa                       tax
4e00 : e44c                     cpx zp1+3   ;test result
                                trap_ne
4e02 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e04 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e05 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4e07 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
4e0a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
4e0c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4e0e : 48              >            pha         ;use stack to load status
4e0f : 28              >            plp
                        
4e10 : a2c3                     ldx #$c3
4e12 : 08                       php
4e13 : ec1702                   cpx abs1    ;test result
                                trap_ne
4e16 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e18 : 68                       pla         ;load status
                                eor_flag 0
4e19 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4e1b : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
4e1e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4e20 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4e22 : 48              >            pha         ;use stack to load status
4e23 : 28              >            plp
                        
4e24 : a282                     ldx #$82
4e26 : 08                       php
4e27 : ec1802                   cpx abs1+1  ;test result
                                trap_ne
4e2a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e2c : 68                       pla         ;load status
                                eor_flag 0
4e2d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4e2f : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
4e32 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4e34 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4e36 : 48              >            pha         ;use stack to load status
4e37 : 28              >            plp
                        
4e38 : a241                     ldx #$41
4e3a : 08                       php
4e3b : ec1902                   cpx abs1+2  ;test result
                                trap_ne
4e3e : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e40 : 68                       pla         ;load status
                                eor_flag 0
4e41 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4e43 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
4e46 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4e48 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4e4a : 48              >            pha         ;use stack to load status
4e4b : 28              >            plp
                        
4e4c : a200                     ldx #0
4e4e : 08                       php
4e4f : ec1a02                   cpx abs1+3  ;test result
                                trap_ne
4e52 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e54 : 68                       pla         ;load status
                                eor_flag 0
4e55 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4e57 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
4e5a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
4e5c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e5e : 48              >            pha         ;use stack to load status
4e5f : 28              >            plp
                        
4e60 : a2c3                     ldx #$c3
4e62 : 08                       php
4e63 : ec1702                   cpx abs1    ;test result
                                trap_ne
4e66 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e68 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e69 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4e6b : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
4e6e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4e70 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e72 : 48              >            pha         ;use stack to load status
4e73 : 28              >            plp
                        
4e74 : a282                     ldx #$82
4e76 : 08                       php
4e77 : ec1802                   cpx abs1+1  ;test result
                                trap_ne
4e7a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e7c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e7d : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4e7f : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
4e82 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4e84 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e86 : 48              >            pha         ;use stack to load status
4e87 : 28              >            plp
                        
4e88 : a241                     ldx #$41
4e8a : 08                       php
4e8b : ec1902                   cpx abs1+2  ;test result
                                trap_ne
4e8e : d0fe            >        bne *           ;failed not equal (non zero)
                        
4e90 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e91 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4e93 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
4e96 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4e98 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e9a : 48              >            pha         ;use stack to load status
4e9b : 28              >            plp
                        
4e9c : a200                     ldx #0
4e9e : 08                       php
4e9f : ec1a02                   cpx abs1+3  ;test result
                                trap_ne
4ea2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ea4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4ea5 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4ea7 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
4eaa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
4eac : a200                     ldx #0
4eae : a542                     lda zpt
4eb0 : 49c3                     eor #$c3
4eb2 : c549                     cmp zp1
                                trap_ne     ;store to zp data
4eb4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4eb6 : 8642                     stx zpt     ;clear
4eb8 : ad0302                   lda abst
4ebb : 49c3                     eor #$c3
4ebd : cd1702                   cmp abs1
                                trap_ne     ;store to abs data
4ec0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ec2 : 8e0302                   stx abst    ;clear
4ec5 : a543                     lda zpt+1
4ec7 : 49c3                     eor #$c3
4ec9 : c54a                     cmp zp1+1
                                trap_ne     ;store to zp data
4ecb : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ecd : 8643                     stx zpt+1   ;clear
4ecf : ad0402                   lda abst+1
4ed2 : 49c3                     eor #$c3
4ed4 : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs data
4ed7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ed9 : 8e0402                   stx abst+1  ;clear
4edc : a544                     lda zpt+2
4ede : 49c3                     eor #$c3
4ee0 : c54b                     cmp zp1+2
                                trap_ne     ;store to zp data
4ee2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ee4 : 8644                     stx zpt+2   ;clear
4ee6 : ad0502                   lda abst+2
4ee9 : 49c3                     eor #$c3
4eeb : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs data
4eee : d0fe            >        bne *           ;failed not equal (non zero)
                        
4ef0 : 8e0502                   stx abst+2  ;clear
4ef3 : a545                     lda zpt+3
4ef5 : 49c3                     eor #$c3
4ef7 : c54c                     cmp zp1+3
                                trap_ne     ;store to zp data
4ef9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4efb : 8645                     stx zpt+3   ;clear
4efd : ad0602                   lda abst+3
4f00 : 49c3                     eor #$c3
4f02 : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs data
4f05 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f07 : 8e0602                   stx abst+3  ;clear
                                next_test
4f0a : ad0002          >            lda test_case   ;previous test
4f0d : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4f0f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
4f11 : a914            >            lda #test_num   ;*** next tests' number
4f13 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
4f16 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4f18 : 48              >            pha         ;use stack to load status
4f19 : 28              >            plp
                        
4f1a : a449                     ldy zp1
4f1c : 08                       php         ;test stores do not alter flags
4f1d : 98                       tya
4f1e : 49c3                     eor #$c3
4f20 : a8                       tay
4f21 : 28                       plp
4f22 : 8c0302                   sty abst
4f25 : 08                       php         ;flags after load/store sequence
4f26 : 49c3                     eor #$c3
4f28 : a8                       tay
4f29 : c0c3                     cpy #$c3    ;test result
                                trap_ne
4f2b : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f2d : 68                       pla         ;load status
                                eor_flag 0
4f2e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4f30 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
4f33 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4f35 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4f37 : 48              >            pha         ;use stack to load status
4f38 : 28              >            plp
                        
4f39 : a44a                     ldy zp1+1
4f3b : 08                       php         ;test stores do not alter flags
4f3c : 98                       tya
4f3d : 49c3                     eor #$c3
4f3f : a8                       tay
4f40 : 28                       plp
4f41 : 8c0402                   sty abst+1
4f44 : 08                       php         ;flags after load/store sequence
4f45 : 49c3                     eor #$c3
4f47 : a8                       tay
4f48 : c082                     cpy #$82    ;test result
                                trap_ne
4f4a : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f4c : 68                       pla         ;load status
                                eor_flag 0
4f4d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4f4f : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
4f52 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4f54 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4f56 : 48              >            pha         ;use stack to load status
4f57 : 28              >            plp
                        
4f58 : a44b                     ldy zp1+2
4f5a : 08                       php         ;test stores do not alter flags
4f5b : 98                       tya
4f5c : 49c3                     eor #$c3
4f5e : a8                       tay
4f5f : 28                       plp
4f60 : 8c0502                   sty abst+2
4f63 : 08                       php         ;flags after load/store sequence
4f64 : 49c3                     eor #$c3
4f66 : a8                       tay
4f67 : c041                     cpy #$41    ;test result
                                trap_ne
4f69 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f6b : 68                       pla         ;load status
                                eor_flag 0
4f6c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4f6e : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
4f71 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
4f73 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4f75 : 48              >            pha         ;use stack to load status
4f76 : 28              >            plp
                        
4f77 : a44c                     ldy zp1+3
4f79 : 08                       php         ;test stores do not alter flags
4f7a : 98                       tya
4f7b : 49c3                     eor #$c3
4f7d : a8                       tay
4f7e : 28                       plp
4f7f : 8c0602                   sty abst+3
4f82 : 08                       php         ;flags after load/store sequence
4f83 : 49c3                     eor #$c3
4f85 : a8                       tay
4f86 : c000                     cpy #0      ;test result
                                trap_ne
4f88 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4f8a : 68                       pla         ;load status
                                eor_flag 0
4f8b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4f8d : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
4f90 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
4f92 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4f94 : 48              >            pha         ;use stack to load status
4f95 : 28              >            plp
                        
4f96 : a449                     ldy zp1
4f98 : 08                       php         ;test stores do not alter flags
4f99 : 98                       tya
4f9a : 49c3                     eor #$c3
4f9c : a8                       tay
4f9d : 28                       plp
4f9e : 8c0302                   sty abst
4fa1 : 08                       php         ;flags after load/store sequence
4fa2 : 49c3                     eor #$c3
4fa4 : a8                       tay
4fa5 : c0c3                     cpy #$c3    ;test result
                                trap_ne
4fa7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4fa9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4faa : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4fac : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
4faf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4fb1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4fb3 : 48              >            pha         ;use stack to load status
4fb4 : 28              >            plp
                        
4fb5 : a44a                     ldy zp1+1
4fb7 : 08                       php         ;test stores do not alter flags
4fb8 : 98                       tya
4fb9 : 49c3                     eor #$c3
4fbb : a8                       tay
4fbc : 28                       plp
4fbd : 8c0402                   sty abst+1
4fc0 : 08                       php         ;flags after load/store sequence
4fc1 : 49c3                     eor #$c3
4fc3 : a8                       tay
4fc4 : c082                     cpy #$82   ;test result
                                trap_ne
4fc6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4fc8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4fc9 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4fcb : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
4fce : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4fd0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4fd2 : 48              >            pha         ;use stack to load status
4fd3 : 28              >            plp
                        
4fd4 : a44b                     ldy zp1+2
4fd6 : 08                       php         ;test stores do not alter flags
4fd7 : 98                       tya
4fd8 : 49c3                     eor #$c3
4fda : a8                       tay
4fdb : 28                       plp
4fdc : 8c0502                   sty abst+2
4fdf : 08                       php         ;flags after load/store sequence
4fe0 : 49c3                     eor #$c3
4fe2 : a8                       tay
4fe3 : c041                     cpy #$41    ;test result
                                trap_ne
4fe5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
4fe7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4fe8 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4fea : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
4fed : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
4fef : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4ff1 : 48              >            pha         ;use stack to load status
4ff2 : 28              >            plp
                        
4ff3 : a44c                     ldy zp1+3
4ff5 : 08                       php         ;test stores do not alter flags
4ff6 : 98                       tya
4ff7 : 49c3                     eor #$c3
4ff9 : a8                       tay
4ffa : 28                       plp
4ffb : 8c0602                   sty abst+3
4ffe : 08                       php         ;flags after load/store sequence
4fff : 49c3                     eor #$c3
5001 : a8                       tay
5002 : c000                     cpy #0      ;test result
                                trap_ne
5004 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5006 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5007 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5009 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
500c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
500e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5010 : 48              >            pha         ;use stack to load status
5011 : 28              >            plp
                        
5012 : ac1702                   ldy abs1
5015 : 08                       php         ;test stores do not alter flags
5016 : 98                       tya
5017 : 49c3                     eor #$c3
5019 : a8                       tay
501a : 28                       plp
501b : 8442                     sty zpt
501d : 08                       php         ;flags after load/store sequence
501e : 49c3                     eor #$c3
5020 : a8                       tay
5021 : c449                     cpy zp1     ;test result
                                trap_ne
5023 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5025 : 68                       pla         ;load status
                                eor_flag 0
5026 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5028 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
502b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
502d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
502f : 48              >            pha         ;use stack to load status
5030 : 28              >            plp
                        
5031 : ac1802                   ldy abs1+1
5034 : 08                       php         ;test stores do not alter flags
5035 : 98                       tya
5036 : 49c3                     eor #$c3
5038 : a8                       tay
5039 : 28                       plp
503a : 8443                     sty zpt+1
503c : 08                       php         ;flags after load/store sequence
503d : 49c3                     eor #$c3
503f : a8                       tay
5040 : c44a                     cpy zp1+1   ;test result
                                trap_ne
5042 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5044 : 68                       pla         ;load status
                                eor_flag 0
5045 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5047 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
504a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
504c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
504e : 48              >            pha         ;use stack to load status
504f : 28              >            plp
                        
5050 : ac1902                   ldy abs1+2
5053 : 08                       php         ;test stores do not alter flags
5054 : 98                       tya
5055 : 49c3                     eor #$c3
5057 : a8                       tay
5058 : 28                       plp
5059 : 8444                     sty zpt+2
505b : 08                       php         ;flags after load/store sequence
505c : 49c3                     eor #$c3
505e : a8                       tay
505f : c44b                     cpy zp1+2   ;test result
                                trap_ne
5061 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5063 : 68                       pla         ;load status
                                eor_flag 0
5064 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5066 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
5069 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
506b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
506d : 48              >            pha         ;use stack to load status
506e : 28              >            plp
                        
506f : ac1a02                   ldy abs1+3
5072 : 08                       php         ;test stores do not alter flags
5073 : 98                       tya
5074 : 49c3                     eor #$c3
5076 : a8                       tay
5077 : 28                       plp
5078 : 8445                     sty zpt+3
507a : 08                       php         ;flags after load/store sequence
507b : 49c3                     eor #$c3
507d : a8                       tay
507e : c44c                     cpy zp1+3   ;test result
                                trap_ne
5080 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5082 : 68                       pla         ;load status
                                eor_flag 0
5083 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5085 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
5088 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
508a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
508c : 48              >            pha         ;use stack to load status
508d : 28              >            plp
                        
508e : ac1702                   ldy abs1
5091 : 08                       php         ;test stores do not alter flags
5092 : 98                       tya
5093 : 49c3                     eor #$c3
5095 : a8                       tay
5096 : 28                       plp
5097 : 8442                     sty zpt
5099 : 08                       php         ;flags after load/store sequence
509a : 49c3                     eor #$c3
509c : a8                       tay
509d : c549                     cmp zp1     ;test result
                                trap_ne
509f : d0fe            >        bne *           ;failed not equal (non zero)
                        
50a1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
50a2 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
50a4 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
50a7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
50a9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
50ab : 48              >            pha         ;use stack to load status
50ac : 28              >            plp
                        
50ad : ac1802                   ldy abs1+1
50b0 : 08                       php         ;test stores do not alter flags
50b1 : 98                       tya
50b2 : 49c3                     eor #$c3
50b4 : a8                       tay
50b5 : 28                       plp
50b6 : 8443                     sty zpt+1
50b8 : 08                       php         ;flags after load/store sequence
50b9 : 49c3                     eor #$c3
50bb : a8                       tay
50bc : c54a                     cmp zp1+1   ;test result
                                trap_ne
50be : d0fe            >        bne *           ;failed not equal (non zero)
                        
50c0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
50c1 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
50c3 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
50c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
50c8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
50ca : 48              >            pha         ;use stack to load status
50cb : 28              >            plp
                        
50cc : ac1902                   ldy abs1+2
50cf : 08                       php         ;test stores do not alter flags
50d0 : 98                       tya
50d1 : 49c3                     eor #$c3
50d3 : a8                       tay
50d4 : 28                       plp
50d5 : 8444                     sty zpt+2
50d7 : 08                       php         ;flags after load/store sequence
50d8 : 49c3                     eor #$c3
50da : a8                       tay
50db : c54b                     cmp zp1+2   ;test result
                                trap_ne
50dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
50df : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
50e0 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
50e2 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
50e5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
50e7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
50e9 : 48              >            pha         ;use stack to load status
50ea : 28              >            plp
                        
50eb : ac1a02                   ldy abs1+3
50ee : 08                       php         ;test stores do not alter flags
50ef : 98                       tya
50f0 : 49c3                     eor #$c3
50f2 : a8                       tay
50f3 : 28                       plp
50f4 : 8445                     sty zpt+3
50f6 : 08                       php         ;flags after load/store sequence
50f7 : 49c3                     eor #$c3
50f9 : a8                       tay
50fa : c54c                     cmp zp1+3   ;test result
                                trap_ne
50fc : d0fe            >        bne *           ;failed not equal (non zero)
                        
50fe : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
50ff : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5101 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
5104 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
5106 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5108 : 48              >            pha         ;use stack to load status
5109 : 28              >            plp
                        
510a : a0c3                     ldy #$c3
510c : 08                       php
510d : cc1702                   cpy abs1    ;test result
                                trap_ne
5110 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5112 : 68                       pla         ;load status
                                eor_flag 0
5113 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5115 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
5118 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
511a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
511c : 48              >            pha         ;use stack to load status
511d : 28              >            plp
                        
511e : a082                     ldy #$82
5120 : 08                       php
5121 : cc1802                   cpy abs1+1  ;test result
                                trap_ne
5124 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5126 : 68                       pla         ;load status
                                eor_flag 0
5127 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5129 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
512c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
512e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5130 : 48              >            pha         ;use stack to load status
5131 : 28              >            plp
                        
5132 : a041                     ldy #$41
5134 : 08                       php
5135 : cc1902                   cpy abs1+2  ;test result
                                trap_ne
5138 : d0fe            >        bne *           ;failed not equal (non zero)
                        
513a : 68                       pla         ;load status
                                eor_flag 0
513b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
513d : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
5140 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
5142 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5144 : 48              >            pha         ;use stack to load status
5145 : 28              >            plp
                        
5146 : a000                     ldy #0
5148 : 08                       php
5149 : cc1a02                   cpy abs1+3  ;test result
                                trap_ne
514c : d0fe            >        bne *           ;failed not equal (non zero)
                        
514e : 68                       pla         ;load status
                                eor_flag 0
514f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5151 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
5154 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
5156 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5158 : 48              >            pha         ;use stack to load status
5159 : 28              >            plp
                        
515a : a0c3                     ldy #$c3
515c : 08                       php
515d : cc1702                   cpy abs1    ;test result
                                trap_ne
5160 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5162 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5163 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5165 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
5168 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
516a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
516c : 48              >            pha         ;use stack to load status
516d : 28              >            plp
                        
516e : a082                     ldy #$82
5170 : 08                       php
5171 : cc1802                   cpy abs1+1  ;test result
                                trap_ne
5174 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5176 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5177 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5179 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
517c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
517e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5180 : 48              >            pha         ;use stack to load status
5181 : 28              >            plp
                        
5182 : a041                     ldy #$41
5184 : 08                       php
5185 : cc1902                   cpy abs1+2   ;test result
                                trap_ne
5188 : d0fe            >        bne *           ;failed not equal (non zero)
                        
518a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
518b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
518d : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
5190 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5192 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5194 : 48              >            pha         ;use stack to load status
5195 : 28              >            plp
                        
5196 : a000                     ldy #0
5198 : 08                       php
5199 : cc1a02                   cpy abs1+3  ;test result
                                trap_ne
519c : d0fe            >        bne *           ;failed not equal (non zero)
                        
519e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
519f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
51a1 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
51a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
51a6 : a000                     ldy #0
51a8 : a542                     lda zpt
51aa : 49c3                     eor #$c3
51ac : c549                     cmp zp1
                                trap_ne     ;store to zp   data
51ae : d0fe            >        bne *           ;failed not equal (non zero)
                        
51b0 : 8442                     sty zpt     ;clear
51b2 : ad0302                   lda abst
51b5 : 49c3                     eor #$c3
51b7 : cd1702                   cmp abs1
                                trap_ne     ;store to abs   data
51ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
51bc : 8c0302                   sty abst    ;clear
51bf : a543                     lda zpt+1
51c1 : 49c3                     eor #$c3
51c3 : c54a                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
51c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
51c7 : 8443                     sty zpt+1   ;clear
51c9 : ad0402                   lda abst+1
51cc : 49c3                     eor #$c3
51ce : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
51d1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
51d3 : 8c0402                   sty abst+1  ;clear
51d6 : a544                     lda zpt+2
51d8 : 49c3                     eor #$c3
51da : c54b                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
51dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
51de : 8444                     sty zpt+2   ;clear
51e0 : ad0502                   lda abst+2
51e3 : 49c3                     eor #$c3
51e5 : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
51e8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
51ea : 8c0502                   sty abst+2  ;clear
51ed : a545                     lda zpt+3
51ef : 49c3                     eor #$c3
51f1 : c54c                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
51f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
51f5 : 8445                     sty zpt+3   ;clear
51f7 : ad0602                   lda abst+3
51fa : 49c3                     eor #$c3
51fc : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
51ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
5201 : 8c0602                   sty abst+3  ;clear
                                next_test
5204 : ad0002          >            lda test_case   ;previous test
5207 : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5209 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0015 =                 >test_num = test_num + 1
520b : a915            >            lda #test_num   ;*** next tests' number
520d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
5210 : a203                     ldx #3
5212 :                  tldax
                                set_stat 0
                       >            load_flag 0
5212 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5214 : 48              >            pha         ;use stack to load status
5215 : 28              >            plp
                        
5216 : b549                     lda zp1,x
5218 : 08                       php         ;test stores do not alter flags
5219 : 49c3                     eor #$c3
521b : 28                       plp
521c : 9d0302                   sta abst,x
521f : 08                       php         ;flags after load/store sequence
5220 : 49c3                     eor #$c3
5222 : dd1702                   cmp abs1,x  ;test result
                                trap_ne
5225 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5227 : 68                       pla         ;load status
                                eor_flag 0
5228 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
522a : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
522d : d0fe            >        bne *           ;failed not equal (non zero)
                        
522f : ca                       dex
5230 : 10e0                     bpl tldax
                        
5232 : a203                     ldx #3
5234 :                  tldax1
                                set_stat $ff
                       >            load_flag $ff
5234 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5236 : 48              >            pha         ;use stack to load status
5237 : 28              >            plp
                        
5238 : b549                     lda zp1,x
523a : 08                       php         ;test stores do not alter flags
523b : 49c3                     eor #$c3
523d : 28                       plp
523e : 9d0302                   sta abst,x
5241 : 08                       php         ;flags after load/store sequence
5242 : 49c3                     eor #$c3
5244 : dd1702                   cmp abs1,x   ;test result
                                trap_ne
5247 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5249 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
524a : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
524c : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
524f : d0fe            >        bne *           ;failed not equal (non zero)
                        
5251 : ca                       dex
5252 : 10e0                     bpl tldax1
                        
5254 : a203                     ldx #3
5256 :                  tldax2
                                set_stat 0
                       >            load_flag 0
5256 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5258 : 48              >            pha         ;use stack to load status
5259 : 28              >            plp
                        
525a : bd1702                   lda abs1,x
525d : 08                       php         ;test stores do not alter flags
525e : 49c3                     eor #$c3
5260 : 28                       plp
5261 : 9542                     sta zpt,x
5263 : 08                       php         ;flags after load/store sequence
5264 : 49c3                     eor #$c3
5266 : d549                     cmp zp1,x   ;test result
                                trap_ne
5268 : d0fe            >        bne *           ;failed not equal (non zero)
                        
526a : 68                       pla         ;load status
                                eor_flag 0
526b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
526d : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
5270 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5272 : ca                       dex
5273 : 10e1                     bpl tldax2
                        
5275 : a203                     ldx #3
5277 :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
5277 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5279 : 48              >            pha         ;use stack to load status
527a : 28              >            plp
                        
527b : bd1702                   lda abs1,x
527e : 08                       php         ;test stores do not alter flags
527f : 49c3                     eor #$c3
5281 : 28                       plp
5282 : 9542                     sta zpt,x
5284 : 08                       php         ;flags after load/store sequence
5285 : 49c3                     eor #$c3
5287 : d549                     cmp zp1,x   ;test result
                                trap_ne
5289 : d0fe            >        bne *           ;failed not equal (non zero)
                        
528b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
528c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
528e : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
5291 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5293 : ca                       dex
5294 : 10e1                     bpl tldax3
                        
5296 : a203                     ldx #3      ;testing store result
5298 : a000                     ldy #0
529a : b542             tstax   lda zpt,x
529c : 49c3                     eor #$c3
529e : d549                     cmp zp1,x
                                trap_ne     ;store to zp,x data
52a0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
52a2 : 9442                     sty zpt,x   ;clear
52a4 : bd0302                   lda abst,x
52a7 : 49c3                     eor #$c3
52a9 : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
52ac : d0fe            >        bne *           ;failed not equal (non zero)
                        
52ae : 8a                       txa
52af : 9d0302                   sta abst,x  ;clear
52b2 : ca                       dex
52b3 : 10e5                     bpl tstax
                                next_test
52b5 : ad0002          >            lda test_case   ;previous test
52b8 : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
52ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0016 =                 >test_num = test_num + 1
52bc : a916            >            lda #test_num   ;*** next tests' number
52be : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
52c1 : a003                     ldy #3
52c3 :                  tlday
                                set_stat 0
                       >            load_flag 0
52c3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
52c5 : 48              >            pha         ;use stack to load status
52c6 : 28              >            plp
                        
52c7 : b15a                     lda (ind1),y
52c9 : 08                       php         ;test stores do not alter flags
52ca : 49c3                     eor #$c3
52cc : 28                       plp
52cd : 990302                   sta abst,y
52d0 : 08                       php         ;flags after load/store sequence
52d1 : 49c3                     eor #$c3
52d3 : d91702                   cmp abs1,y  ;test result
                                trap_ne
52d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
52d8 : 68                       pla         ;load status
                                eor_flag 0
52d9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
52db : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
52de : d0fe            >        bne *           ;failed not equal (non zero)
                        
52e0 : 88                       dey
52e1 : 10e0                     bpl tlday
                        
52e3 : a003                     ldy #3
52e5 :                  tlday1
                                set_stat $ff
                       >            load_flag $ff
52e5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
52e7 : 48              >            pha         ;use stack to load status
52e8 : 28              >            plp
                        
52e9 : b15a                     lda (ind1),y
52eb : 08                       php         ;test stores do not alter flags
52ec : 49c3                     eor #$c3
52ee : 28                       plp
52ef : 990302                   sta abst,y
52f2 : 08                       php         ;flags after load/store sequence
52f3 : 49c3                     eor #$c3
52f5 : d91702                   cmp abs1,y  ;test result
                                trap_ne
52f8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
52fa : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
52fb : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
52fd : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
5300 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5302 : 88                       dey
5303 : 10e0                     bpl tlday1
                        
5305 : a003                     ldy #3      ;testing store result
5307 : a200                     ldx #0
5309 : b90302           tstay   lda abst,y
530c : 49c3                     eor #$c3
530e : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
5311 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5313 : 8a                       txa
5314 : 990302                   sta abst,y  ;clear
5317 : 88                       dey
5318 : 10ef                     bpl tstay
                        
531a : a003                     ldy #3
531c :                  tlday2
                                set_stat 0
                       >            load_flag 0
531c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
531e : 48              >            pha         ;use stack to load status
531f : 28              >            plp
                        
5320 : b91702                   lda abs1,y
5323 : 08                       php         ;test stores do not alter flags
5324 : 49c3                     eor #$c3
5326 : 28                       plp
5327 : 9166                     sta (indt),y
5329 : 08                       php         ;flags after load/store sequence
532a : 49c3                     eor #$c3
532c : d15a                     cmp (ind1),y    ;test result
                                trap_ne
532e : d0fe            >        bne *           ;failed not equal (non zero)
                        
5330 : 68                       pla         ;load status
                                eor_flag 0
5331 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5333 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
5336 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5338 : 88                       dey
5339 : 10e1                     bpl tlday2
                        
533b : a003                     ldy #3
533d :                  tlday3
                                set_stat $ff
                       >            load_flag $ff
533d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
533f : 48              >            pha         ;use stack to load status
5340 : 28              >            plp
                        
5341 : b91702                   lda abs1,y
5344 : 08                       php         ;test stores do not alter flags
5345 : 49c3                     eor #$c3
5347 : 28                       plp
5348 : 9166                     sta (indt),y
534a : 08                       php         ;flags after load/store sequence
534b : 49c3                     eor #$c3
534d : d15a                     cmp (ind1),y   ;test result
                                trap_ne
534f : d0fe            >        bne *           ;failed not equal (non zero)
                        
5351 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5352 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5354 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
5357 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5359 : 88                       dey
535a : 10e1                     bpl tlday3
                        
535c : a003                     ldy #3      ;testing store result
535e : a200                     ldx #0
5360 : b90302           tstay1  lda abst,y
5363 : 49c3                     eor #$c3
5365 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
5368 : d0fe            >        bne *           ;failed not equal (non zero)
                        
536a : 8a                       txa
536b : 990302                   sta abst,y  ;clear
536e : 88                       dey
536f : 10ef                     bpl tstay1
                        
5371 : a206                     ldx #6
5373 : a003                     ldy #3
5375 :                  tldax4
                                set_stat 0
                       >            load_flag 0
5375 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5377 : 48              >            pha         ;use stack to load status
5378 : 28              >            plp
                        
5379 : a15a                     lda (ind1,x)
537b : 08                       php         ;test stores do not alter flags
537c : 49c3                     eor #$c3
537e : 28                       plp
537f : 8166                     sta (indt,x)
5381 : 08                       php         ;flags after load/store sequence
5382 : 49c3                     eor #$c3
5384 : d91702                   cmp abs1,y  ;test result
                                trap_ne
5387 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5389 : 68                       pla         ;load status
                                eor_flag 0
538a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
538c : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
538f : d0fe            >        bne *           ;failed not equal (non zero)
                        
5391 : ca                       dex
5392 : ca                       dex
5393 : 88                       dey
5394 : 10df                     bpl tldax4
                        
5396 : a206                     ldx #6
5398 : a003                     ldy #3
539a :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
539a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
539c : 48              >            pha         ;use stack to load status
539d : 28              >            plp
                        
539e : a15a                     lda (ind1,x)
53a0 : 08                       php         ;test stores do not alter flags
53a1 : 49c3                     eor #$c3
53a3 : 28                       plp
53a4 : 8166                     sta (indt,x)
53a6 : 08                       php         ;flags after load/store sequence
53a7 : 49c3                     eor #$c3
53a9 : d91702                   cmp abs1,y  ;test result
                                trap_ne
53ac : d0fe            >        bne *           ;failed not equal (non zero)
                        
53ae : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
53af : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
53b1 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
53b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
53b6 : ca                       dex
53b7 : ca                       dex
53b8 : 88                       dey
53b9 : 10df                     bpl tldax5
                        
53bb : a003                     ldy #3      ;testing store result
53bd : a200                     ldx #0
53bf : b90302           tstay2  lda abst,y
53c2 : 49c3                     eor #$c3
53c4 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
53c7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
53c9 : 8a                       txa
53ca : 990302                   sta abst,y  ;clear
53cd : 88                       dey
53ce : 10ef                     bpl tstay2
                                next_test
53d0 : ad0002          >            lda test_case   ;previous test
53d3 : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
53d5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0017 =                 >test_num = test_num + 1
53d7 : a917            >            lda #test_num   ;*** next tests' number
53d9 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
53dc : a2fd                     ldx #3+$fa
53de : b54f             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
53e0 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
53e3 : ca                       dex
53e4 : e0fa                     cpx #$fa
53e6 : b0f6                     bcs tldax6
53e8 : a2fd                     ldx #3+$fa
53ea : bd1d01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
53ed : 9548                     sta zpt-$fa&$ff,x
53ef : ca                       dex
53f0 : e0fa                     cpx #$fa
53f2 : b0f6                     bcs tldax7
                        
53f4 : a203                     ldx #3      ;testing wraparound result
53f6 : a000                     ldy #0
53f8 : b542             tstax1  lda zpt,x
53fa : d549                     cmp zp1,x
                                trap_ne     ;store to zp,x data
53fc : d0fe            >        bne *           ;failed not equal (non zero)
                        
53fe : 9442                     sty zpt,x   ;clear
5400 : bd0302                   lda abst,x
5403 : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
5406 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5408 : 8a                       txa
5409 : 9d0302                   sta abst,x  ;clear
540c : ca                       dex
540d : 10e9                     bpl tstax1
                        
540f : a0fb                     ldy #3+$f8
5411 : a2fe                     ldx #6+$f8
5413 : a162             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
5415 : 990b01                   sta abst-$f8,y
5418 : ca                       dex
5419 : ca                       dex
541a : 88                       dey
541b : c0f8                     cpy #$f8
541d : b0f4                     bcs tlday4
541f : a003                     ldy #3      ;testing wraparound result
5421 : a200                     ldx #0
5423 : b90302           tstay4  lda abst,y
5426 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
5429 : d0fe            >        bne *           ;failed not equal (non zero)
                        
542b : 8a                       txa
542c : 990302                   sta abst,y  ;clear
542f : 88                       dey
5430 : 10f1                     bpl tstay4
                        
5432 : a0fb                     ldy #3+$f8
5434 : b91f01           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
5437 : 916e                     sta (inwt),y
5439 : 88                       dey
543a : c0f8                     cpy #$f8
543c : b0f6                     bcs tlday5
543e : a003                     ldy #3      ;testing wraparound result
5440 : a200                     ldx #0
5442 : b90302           tstay5  lda abst,y
5445 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
5448 : d0fe            >        bne *           ;failed not equal (non zero)
                        
544a : 8a                       txa
544b : 990302                   sta abst,y  ;clear
544e : 88                       dey
544f : 10f1                     bpl tstay5
                        
5451 : a0fb                     ldy #3+$f8
5453 : a2fe                     ldx #6+$f8
5455 : b164             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed
5457 : 816e                     sta (indt-$f8&$ff,x)
5459 : ca                       dex
545a : ca                       dex
545b : 88                       dey
545c : c0f8                     cpy #$f8
545e : b0f5                     bcs tlday6
5460 : a003                     ldy #3      ;testing wraparound result
5462 : a200                     ldx #0
5464 : b90302           tstay6  lda abst,y
5467 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
546a : d0fe            >        bne *           ;failed not equal (non zero)
                        
546c : 8a                       txa
546d : 990302                   sta abst,y  ;clear
5470 : 88                       dey
5471 : 10f1                     bpl tstay6
                                next_test
5473 : ad0002          >            lda test_case   ;previous test
5476 : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5478 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0018 =                 >test_num = test_num + 1
547a : a918            >            lda #test_num   ;*** next tests' number
547c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0
                       >            load_flag 0
547f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5481 : 48              >            pha         ;use stack to load status
5482 : 28              >            plp
                        
5483 : a549                     lda zp1
5485 : 08                       php         ;test stores do not alter flags
5486 : 49c3                     eor #$c3
5488 : 28                       plp
5489 : 8d0302                   sta abst
548c : 08                       php         ;flags after load/store sequence
548d : 49c3                     eor #$c3
548f : c9c3                     cmp #$c3    ;test result
                                trap_ne
5491 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5493 : 68                       pla         ;load status
                                eor_flag 0
5494 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5496 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
5499 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
549b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
549d : 48              >            pha         ;use stack to load status
549e : 28              >            plp
                        
549f : a54a                     lda zp1+1
54a1 : 08                       php         ;test stores do not alter flags
54a2 : 49c3                     eor #$c3
54a4 : 28                       plp
54a5 : 8d0402                   sta abst+1
54a8 : 08                       php         ;flags after load/store sequence
54a9 : 49c3                     eor #$c3
54ab : c982                     cmp #$82    ;test result
                                trap_ne
54ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
54af : 68                       pla         ;load status
                                eor_flag 0
54b0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
54b2 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
54b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
54b7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
54b9 : 48              >            pha         ;use stack to load status
54ba : 28              >            plp
                        
54bb : a54b                     lda zp1+2
54bd : 08                       php         ;test stores do not alter flags
54be : 49c3                     eor #$c3
54c0 : 28                       plp
54c1 : 8d0502                   sta abst+2
54c4 : 08                       php         ;flags after load/store sequence
54c5 : 49c3                     eor #$c3
54c7 : c941                     cmp #$41    ;test result
                                trap_ne
54c9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
54cb : 68                       pla         ;load status
                                eor_flag 0
54cc : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
54ce : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
54d1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
54d3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
54d5 : 48              >            pha         ;use stack to load status
54d6 : 28              >            plp
                        
54d7 : a54c                     lda zp1+3
54d9 : 08                       php         ;test stores do not alter flags
54da : 49c3                     eor #$c3
54dc : 28                       plp
54dd : 8d0602                   sta abst+3
54e0 : 08                       php         ;flags after load/store sequence
54e1 : 49c3                     eor #$c3
54e3 : c900                     cmp #0      ;test result
                                trap_ne
54e5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
54e7 : 68                       pla         ;load status
                                eor_flag 0
54e8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
54ea : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
54ed : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
54ef : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
54f1 : 48              >            pha         ;use stack to load status
54f2 : 28              >            plp
                        
54f3 : a549                     lda zp1
54f5 : 08                       php         ;test stores do not alter flags
54f6 : 49c3                     eor #$c3
54f8 : 28                       plp
54f9 : 8d0302                   sta abst
54fc : 08                       php         ;flags after load/store sequence
54fd : 49c3                     eor #$c3
54ff : c9c3                     cmp #$c3    ;test result
                                trap_ne
5501 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5503 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5504 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5506 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
5509 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
550b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
550d : 48              >            pha         ;use stack to load status
550e : 28              >            plp
                        
550f : a54a                     lda zp1+1
5511 : 08                       php         ;test stores do not alter flags
5512 : 49c3                     eor #$c3
5514 : 28                       plp
5515 : 8d0402                   sta abst+1
5518 : 08                       php         ;flags after load/store sequence
5519 : 49c3                     eor #$c3
551b : c982                     cmp #$82    ;test result
                                trap_ne
551d : d0fe            >        bne *           ;failed not equal (non zero)
                        
551f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5520 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5522 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
5525 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5527 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5529 : 48              >            pha         ;use stack to load status
552a : 28              >            plp
                        
552b : a54b                     lda zp1+2
552d : 08                       php         ;test stores do not alter flags
552e : 49c3                     eor #$c3
5530 : 28                       plp
5531 : 8d0502                   sta abst+2
5534 : 08                       php         ;flags after load/store sequence
5535 : 49c3                     eor #$c3
5537 : c941                     cmp #$41    ;test result
                                trap_ne
5539 : d0fe            >        bne *           ;failed not equal (non zero)
                        
553b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
553c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
553e : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
5541 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5543 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5545 : 48              >            pha         ;use stack to load status
5546 : 28              >            plp
                        
5547 : a54c                     lda zp1+3
5549 : 08                       php         ;test stores do not alter flags
554a : 49c3                     eor #$c3
554c : 28                       plp
554d : 8d0602                   sta abst+3
5550 : 08                       php         ;flags after load/store sequence
5551 : 49c3                     eor #$c3
5553 : c900                     cmp #0      ;test result
                                trap_ne
5555 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5557 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5558 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
555a : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
555d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
555f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5561 : 48              >            pha         ;use stack to load status
5562 : 28              >            plp
                        
5563 : ad1702                   lda abs1
5566 : 08                       php         ;test stores do not alter flags
5567 : 49c3                     eor #$c3
5569 : 28                       plp
556a : 8542                     sta zpt
556c : 08                       php         ;flags after load/store sequence
556d : 49c3                     eor #$c3
556f : c549                     cmp zp1     ;test result
                                trap_ne
5571 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5573 : 68                       pla         ;load status
                                eor_flag 0
5574 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5576 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
5579 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
557b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
557d : 48              >            pha         ;use stack to load status
557e : 28              >            plp
                        
557f : ad1802                   lda abs1+1
5582 : 08                       php         ;test stores do not alter flags
5583 : 49c3                     eor #$c3
5585 : 28                       plp
5586 : 8543                     sta zpt+1
5588 : 08                       php         ;flags after load/store sequence
5589 : 49c3                     eor #$c3
558b : c54a                     cmp zp1+1   ;test result
                                trap_ne
558d : d0fe            >        bne *           ;failed not equal (non zero)
                        
558f : 68                       pla         ;load status
                                eor_flag 0
5590 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5592 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
5595 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
5597 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5599 : 48              >            pha         ;use stack to load status
559a : 28              >            plp
                        
559b : ad1902                   lda abs1+2
559e : 08                       php         ;test stores do not alter flags
559f : 49c3                     eor #$c3
55a1 : 28                       plp
55a2 : 8544                     sta zpt+2
55a4 : 08                       php         ;flags after load/store sequence
55a5 : 49c3                     eor #$c3
55a7 : c54b                     cmp zp1+2   ;test result
                                trap_ne
55a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
55ab : 68                       pla         ;load status
                                eor_flag 0
55ac : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
55ae : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
55b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
55b3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
55b5 : 48              >            pha         ;use stack to load status
55b6 : 28              >            plp
                        
55b7 : ad1a02                   lda abs1+3
55ba : 08                       php         ;test stores do not alter flags
55bb : 49c3                     eor #$c3
55bd : 28                       plp
55be : 8545                     sta zpt+3
55c0 : 08                       php         ;flags after load/store sequence
55c1 : 49c3                     eor #$c3
55c3 : c54c                     cmp zp1+3   ;test result
                                trap_ne
55c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
55c7 : 68                       pla         ;load status
                                eor_flag 0
55c8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
55ca : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
55cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
55cf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
55d1 : 48              >            pha         ;use stack to load status
55d2 : 28              >            plp
                        
55d3 : ad1702                   lda abs1
55d6 : 08                       php         ;test stores do not alter flags
55d7 : 49c3                     eor #$c3
55d9 : 28                       plp
55da : 8542                     sta zpt
55dc : 08                       php         ;flags after load/store sequence
55dd : 49c3                     eor #$c3
55df : c549                     cmp zp1     ;test result
                                trap_ne
55e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
55e3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
55e4 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
55e6 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
55e9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
55eb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
55ed : 48              >            pha         ;use stack to load status
55ee : 28              >            plp
                        
55ef : ad1802                   lda abs1+1
55f2 : 08                       php         ;test stores do not alter flags
55f3 : 49c3                     eor #$c3
55f5 : 28                       plp
55f6 : 8543                     sta zpt+1
55f8 : 08                       php         ;flags after load/store sequence
55f9 : 49c3                     eor #$c3
55fb : c54a                     cmp zp1+1   ;test result
                                trap_ne
55fd : d0fe            >        bne *           ;failed not equal (non zero)
                        
55ff : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5600 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5602 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
5605 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5607 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5609 : 48              >            pha         ;use stack to load status
560a : 28              >            plp
                        
560b : ad1902                   lda abs1+2
560e : 08                       php         ;test stores do not alter flags
560f : 49c3                     eor #$c3
5611 : 28                       plp
5612 : 8544                     sta zpt+2
5614 : 08                       php         ;flags after load/store sequence
5615 : 49c3                     eor #$c3
5617 : c54b                     cmp zp1+2   ;test result
                                trap_ne
5619 : d0fe            >        bne *           ;failed not equal (non zero)
                        
561b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
561c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
561e : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
5621 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
5623 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5625 : 48              >            pha         ;use stack to load status
5626 : 28              >            plp
                        
5627 : ad1a02                   lda abs1+3
562a : 08                       php         ;test stores do not alter flags
562b : 49c3                     eor #$c3
562d : 28                       plp
562e : 8545                     sta zpt+3
5630 : 08                       php         ;flags after load/store sequence
5631 : 49c3                     eor #$c3
5633 : c54c                     cmp zp1+3   ;test result
                                trap_ne
5635 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5637 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5638 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
563a : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
563d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
563f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5641 : 48              >            pha         ;use stack to load status
5642 : 28              >            plp
                        
5643 : a9c3                     lda #$c3
5645 : 08                       php
5646 : cd1702                   cmp abs1    ;test result
                                trap_ne
5649 : d0fe            >        bne *           ;failed not equal (non zero)
                        
564b : 68                       pla         ;load status
                                eor_flag 0
564c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
564e : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
5651 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
5653 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5655 : 48              >            pha         ;use stack to load status
5656 : 28              >            plp
                        
5657 : a982                     lda #$82
5659 : 08                       php
565a : cd1802                   cmp abs1+1  ;test result
                                trap_ne
565d : d0fe            >        bne *           ;failed not equal (non zero)
                        
565f : 68                       pla         ;load status
                                eor_flag 0
5660 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5662 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
5665 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
5667 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5669 : 48              >            pha         ;use stack to load status
566a : 28              >            plp
                        
566b : a941                     lda #$41
566d : 08                       php
566e : cd1902                   cmp abs1+2  ;test result
                                trap_ne
5671 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5673 : 68                       pla         ;load status
                                eor_flag 0
5674 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
5676 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
5679 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
567b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
567d : 48              >            pha         ;use stack to load status
567e : 28              >            plp
                        
567f : a900                     lda #0
5681 : 08                       php
5682 : cd1a02                   cmp abs1+3  ;test result
                                trap_ne
5685 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5687 : 68                       pla         ;load status
                                eor_flag 0
5688 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
568a : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
568d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
568f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5691 : 48              >            pha         ;use stack to load status
5692 : 28              >            plp
                        
5693 : a9c3                     lda #$c3
5695 : 08                       php
5696 : cd1702                   cmp abs1    ;test result
                                trap_ne
5699 : d0fe            >        bne *           ;failed not equal (non zero)
                        
569b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
569c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
569e : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
56a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
56a3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
56a5 : 48              >            pha         ;use stack to load status
56a6 : 28              >            plp
                        
56a7 : a982                     lda #$82
56a9 : 08                       php
56aa : cd1802                   cmp abs1+1  ;test result
                                trap_ne
56ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
56af : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
56b0 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
56b2 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
56b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
56b7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
56b9 : 48              >            pha         ;use stack to load status
56ba : 28              >            plp
                        
56bb : a941                     lda #$41
56bd : 08                       php
56be : cd1902                   cmp abs1+2  ;test result
                                trap_ne
56c1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
56c3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
56c4 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
56c6 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
56c9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
56cb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
56cd : 48              >            pha         ;use stack to load status
56ce : 28              >            plp
                        
56cf : a900                     lda #0
56d1 : 08                       php
56d2 : cd1a02                   cmp abs1+3  ;test result
                                trap_ne
56d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
56d7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
56d8 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
56da : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
56dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
56df : a200                     ldx #0
56e1 : a542                     lda zpt
56e3 : 49c3                     eor #$c3
56e5 : c549                     cmp zp1
                                trap_ne     ;store to zp data
56e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
56e9 : 8642                     stx zpt     ;clear
56eb : ad0302                   lda abst
56ee : 49c3                     eor #$c3
56f0 : cd1702                   cmp abs1
                                trap_ne     ;store to abs data
56f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
56f5 : 8e0302                   stx abst    ;clear
56f8 : a543                     lda zpt+1
56fa : 49c3                     eor #$c3
56fc : c54a                     cmp zp1+1
                                trap_ne     ;store to zp data
56fe : d0fe            >        bne *           ;failed not equal (non zero)
                        
5700 : 8643                     stx zpt+1   ;clear
5702 : ad0402                   lda abst+1
5705 : 49c3                     eor #$c3
5707 : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs data
570a : d0fe            >        bne *           ;failed not equal (non zero)
                        
570c : 8e0402                   stx abst+1  ;clear
570f : a544                     lda zpt+2
5711 : 49c3                     eor #$c3
5713 : c54b                     cmp zp1+2
                                trap_ne     ;store to zp data
5715 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5717 : 8644                     stx zpt+2   ;clear
5719 : ad0502                   lda abst+2
571c : 49c3                     eor #$c3
571e : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs data
5721 : d0fe            >        bne *           ;failed not equal (non zero)
                        
5723 : 8e0502                   stx abst+2  ;clear
5726 : a545                     lda zpt+3
5728 : 49c3                     eor #$c3
572a : c54c                     cmp zp1+3
                                trap_ne     ;store to zp data
572c : d0fe            >        bne *           ;failed not equal (non zero)
                        
572e : 8645                     stx zpt+3   ;clear
5730 : ad0602                   lda abst+3
5733 : 49c3                     eor #$c3
5735 : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs data
5738 : d0fe            >        bne *           ;failed not equal (non zero)
                        
573a : 8e0602                   stx abst+3  ;clear
                                next_test
573d : ad0002          >            lda test_case   ;previous test
5740 : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5742 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0019 =                 >test_num = test_num + 1
5744 : a919            >            lda #test_num   ;*** next tests' number
5746 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
5749 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
574b : 48              >            pha         ;use stack to load status
574c : a9ff            >            lda #$ff     ;precharge accu
574e : 28              >            plp
                        
574f : 244c                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz
5751 : 08              >            php         ;save flags
5752 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
5754 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5756 : 68              >            pla         ;load status
5757 : 48              >            pha
                       >            cmp_flag fz
5758 : c932            >            cmp #(fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
575a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
575c : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
575d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
575f : 48              >            pha         ;use stack to load status
5760 : a901            >            lda #1     ;precharge accu
5762 : 28              >            plp
                        
5763 : 244b                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
5765 : 08              >            php         ;save flags
5766 : c901            >            cmp #1     ;test result
                       >            trap_ne
5768 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
576a : 68              >            pla         ;load status
576b : 48              >            pha
                       >            cmp_flag fv
576c : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
576e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5770 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
5771 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5773 : 48              >            pha         ;use stack to load status
5774 : a901            >            lda #1     ;precharge accu
5776 : 28              >            plp
                        
5777 : 244a                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
5779 : 08              >            php         ;save flags
577a : c901            >            cmp #1     ;test result
                       >            trap_ne
577c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
577e : 68              >            pla         ;load status
577f : 48              >            pha
                       >            cmp_flag fnz
5780 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5782 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5784 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
5785 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5787 : 48              >            pha         ;use stack to load status
5788 : a901            >            lda #1     ;precharge accu
578a : 28              >            plp
                        
578b : 2449                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
578d : 08              >            php         ;save flags
578e : c901            >            cmp #1     ;test result
                       >            trap_ne
5790 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5792 : 68              >            pla         ;load status
5793 : 48              >            pha
                       >            cmp_flag fnv
5794 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5796 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5798 : 28              >            plp         ;restore status
                        
                        
                                set_a $ff,$ff
                       >            load_flag $ff
5799 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
579b : 48              >            pha         ;use stack to load status
579c : a9ff            >            lda #$ff     ;precharge accu
579e : 28              >            plp
                        
579f : 244c                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
57a1 : 08              >            php         ;save flags
57a2 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
57a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
57a6 : 68              >            pla         ;load status
57a7 : 48              >            pha
                       >            cmp_flag ~fnv
57a8 : c93f            >            cmp #(~fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
57aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
57ac : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
57ad : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
57af : 48              >            pha         ;use stack to load status
57b0 : a901            >            lda #1     ;precharge accu
57b2 : 28              >            plp
                        
57b3 : 244b                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
57b5 : 08              >            php         ;save flags
57b6 : c901            >            cmp #1     ;test result
                       >            trap_ne
57b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
57ba : 68              >            pla         ;load status
57bb : 48              >            pha
                       >            cmp_flag ~fnz
57bc : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
57be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
57c0 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
57c1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
57c3 : 48              >            pha         ;use stack to load status
57c4 : a901            >            lda #1     ;precharge accu
57c6 : 28              >            plp
                        
57c7 : 244a                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
57c9 : 08              >            php         ;save flags
57ca : c901            >            cmp #1     ;test result
                       >            trap_ne
57cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
57ce : 68              >            pla         ;load status
57cf : 48              >            pha
                       >            cmp_flag ~fv
57d0 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
57d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
57d4 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
57d5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
57d7 : 48              >            pha         ;use stack to load status
57d8 : a901            >            lda #1     ;precharge accu
57da : 28              >            plp
                        
57db : 2449                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
57dd : 08              >            php         ;save flags
57de : c901            >            cmp #1     ;test result
                       >            trap_ne
57e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
57e2 : 68              >            pla         ;load status
57e3 : 48              >            pha
                       >            cmp_flag ~fz
57e4 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
57e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
57e8 : 28              >            plp         ;restore status
                        
                        
                                set_a $ff,0
                       >            load_flag 0
57e9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
57eb : 48              >            pha         ;use stack to load status
57ec : a9ff            >            lda #$ff     ;precharge accu
57ee : 28              >            plp
                        
57ef : 2c1a02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz
57f2 : 08              >            php         ;save flags
57f3 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
57f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
57f7 : 68              >            pla         ;load status
57f8 : 48              >            pha
                       >            cmp_flag fz
57f9 : c932            >            cmp #(fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
57fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
57fd : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
57fe : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5800 : 48              >            pha         ;use stack to load status
5801 : a901            >            lda #1     ;precharge accu
5803 : 28              >            plp
                        
5804 : 2c1902                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
5807 : 08              >            php         ;save flags
5808 : c901            >            cmp #1     ;test result
                       >            trap_ne
580a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
580c : 68              >            pla         ;load status
580d : 48              >            pha
                       >            cmp_flag fv
580e : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5810 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5812 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
5813 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5815 : 48              >            pha         ;use stack to load status
5816 : a901            >            lda #1     ;precharge accu
5818 : 28              >            plp
                        
5819 : 2c1802                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
581c : 08              >            php         ;save flags
581d : c901            >            cmp #1     ;test result
                       >            trap_ne
581f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5821 : 68              >            pla         ;load status
5822 : 48              >            pha
                       >            cmp_flag fnz
5823 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5825 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5827 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
5828 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
582a : 48              >            pha         ;use stack to load status
582b : a901            >            lda #1     ;precharge accu
582d : 28              >            plp
                        
582e : 2c1702                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
5831 : 08              >            php         ;save flags
5832 : c901            >            cmp #1     ;test result
                       >            trap_ne
5834 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5836 : 68              >            pla         ;load status
5837 : 48              >            pha
                       >            cmp_flag fnv
5838 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
583a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
583c : 28              >            plp         ;restore status
                        
                        
                                set_a $ff,$ff
                       >            load_flag $ff
583d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
583f : 48              >            pha         ;use stack to load status
5840 : a9ff            >            lda #$ff     ;precharge accu
5842 : 28              >            plp
                        
5843 : 2c1a02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
5846 : 08              >            php         ;save flags
5847 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
5849 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
584b : 68              >            pla         ;load status
584c : 48              >            pha
                       >            cmp_flag ~fnv
584d : c93f            >            cmp #(~fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
584f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5851 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
5852 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5854 : 48              >            pha         ;use stack to load status
5855 : a901            >            lda #1     ;precharge accu
5857 : 28              >            plp
                        
5858 : 2c1902                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
585b : 08              >            php         ;save flags
585c : c901            >            cmp #1     ;test result
                       >            trap_ne
585e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5860 : 68              >            pla         ;load status
5861 : 48              >            pha
                       >            cmp_flag ~fnz
5862 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5864 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5866 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
5867 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5869 : 48              >            pha         ;use stack to load status
586a : a901            >            lda #1     ;precharge accu
586c : 28              >            plp
                        
586d : 2c1802                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
5870 : 08              >            php         ;save flags
5871 : c901            >            cmp #1     ;test result
                       >            trap_ne
5873 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5875 : 68              >            pla         ;load status
5876 : 48              >            pha
                       >            cmp_flag ~fv
5877 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5879 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
587b : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
587c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
587e : 48              >            pha         ;use stack to load status
587f : a901            >            lda #1     ;precharge accu
5881 : 28              >            plp
                        
5882 : 2c1702                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
5885 : 08              >            php         ;save flags
5886 : c901            >            cmp #1     ;test result
                       >            trap_ne
5888 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
588a : 68              >            pla         ;load status
588b : 48              >            pha
                       >            cmp_flag ~fz
588c : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
588e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5890 : 28              >            plp         ;restore status
                        
                                next_test
5891 : ad0002          >            lda test_case   ;previous test
5894 : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5896 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001a =                 >test_num = test_num + 1
5898 : a91a            >            lda #test_num   ;*** next tests' number
589a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPX - zp / abs / #
                                set_x $80,0
                       >            load_flag 0
589d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
589f : 48              >            pha         ;use stack to load status
58a0 : a280            >            ldx #$80     ;precharge index x
58a2 : 28              >            plp
                        
58a3 : e44d                     cpx zp7f
                                tst_stat fc
58a5 : 08              >            php         ;save status
58a6 : 68              >            pla         ;use stack to retrieve status
58a7 : 48              >            pha
                       >            cmp_flag fc
58a8 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
58ac : 28              >            plp         ;restore status
                        
58ad : ca                       dex
58ae : e44d                     cpx zp7f
                                tst_stat fzc
58b0 : 08              >            php         ;save status
58b1 : 68              >            pla         ;use stack to retrieve status
58b2 : 48              >            pha
                       >            cmp_flag fzc
58b3 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
58b7 : 28              >            plp         ;restore status
                        
58b8 : ca                       dex
58b9 : e44d                     cpx zp7f
                                tst_x $7e,fn
58bb : 08              >            php         ;save flags
58bc : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
58be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
58c0 : 68              >            pla         ;load status
58c1 : 48              >            pha
                       >            cmp_flag fn
58c2 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58c4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
58c6 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
58c7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
58c9 : 48              >            pha         ;use stack to load status
58ca : a280            >            ldx #$80     ;precharge index x
58cc : 28              >            plp
                        
58cd : e44d                     cpx zp7f
                                tst_stat ~fnz
58cf : 08              >            php         ;save status
58d0 : 68              >            pla         ;use stack to retrieve status
58d1 : 48              >            pha
                       >            cmp_flag ~fnz
58d2 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
58d6 : 28              >            plp         ;restore status
                        
58d7 : ca                       dex
58d8 : e44d                     cpx zp7f
                                tst_stat ~fn
58da : 08              >            php         ;save status
58db : 68              >            pla         ;use stack to retrieve status
58dc : 48              >            pha
                       >            cmp_flag ~fn
58dd : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
58e1 : 28              >            plp         ;restore status
                        
58e2 : ca                       dex
58e3 : e44d                     cpx zp7f
                                tst_x $7e,~fzc
58e5 : 08              >            php         ;save flags
58e6 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
58e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
58ea : 68              >            pla         ;load status
58eb : 48              >            pha
                       >            cmp_flag ~fzc
58ec : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
58f0 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
58f1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
58f3 : 48              >            pha         ;use stack to load status
58f4 : a280            >            ldx #$80     ;precharge index x
58f6 : 28              >            plp
                        
58f7 : ec1b02                   cpx abs7f
                                tst_stat fc
58fa : 08              >            php         ;save status
58fb : 68              >            pla         ;use stack to retrieve status
58fc : 48              >            pha
                       >            cmp_flag fc
58fd : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58ff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5901 : 28              >            plp         ;restore status
                        
5902 : ca                       dex
5903 : ec1b02                   cpx abs7f
                                tst_stat fzc
5906 : 08              >            php         ;save status
5907 : 68              >            pla         ;use stack to retrieve status
5908 : 48              >            pha
                       >            cmp_flag fzc
5909 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
590b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
590d : 28              >            plp         ;restore status
                        
590e : ca                       dex
590f : ec1b02                   cpx abs7f
                                tst_x $7e,fn
5912 : 08              >            php         ;save flags
5913 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5915 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5917 : 68              >            pla         ;load status
5918 : 48              >            pha
                       >            cmp_flag fn
5919 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
591b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
591d : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
591e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5920 : 48              >            pha         ;use stack to load status
5921 : a280            >            ldx #$80     ;precharge index x
5923 : 28              >            plp
                        
5924 : ec1b02                   cpx abs7f
                                tst_stat ~fnz
5927 : 08              >            php         ;save status
5928 : 68              >            pla         ;use stack to retrieve status
5929 : 48              >            pha
                       >            cmp_flag ~fnz
592a : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
592c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
592e : 28              >            plp         ;restore status
                        
592f : ca                       dex
5930 : ec1b02                   cpx abs7f
                                tst_stat ~fn
5933 : 08              >            php         ;save status
5934 : 68              >            pla         ;use stack to retrieve status
5935 : 48              >            pha
                       >            cmp_flag ~fn
5936 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5938 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
593a : 28              >            plp         ;restore status
                        
593b : ca                       dex
593c : ec1b02                   cpx abs7f
                                tst_x $7e,~fzc
593f : 08              >            php         ;save flags
5940 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5942 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5944 : 68              >            pla         ;load status
5945 : 48              >            pha
                       >            cmp_flag ~fzc
5946 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5948 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
594a : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
594b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
594d : 48              >            pha         ;use stack to load status
594e : a280            >            ldx #$80     ;precharge index x
5950 : 28              >            plp
                        
5951 : e07f                     cpx #$7f
                                tst_stat fc
5953 : 08              >            php         ;save status
5954 : 68              >            pla         ;use stack to retrieve status
5955 : 48              >            pha
                       >            cmp_flag fc
5956 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5958 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
595a : 28              >            plp         ;restore status
                        
595b : ca                       dex
595c : e07f                     cpx #$7f
                                tst_stat fzc
595e : 08              >            php         ;save status
595f : 68              >            pla         ;use stack to retrieve status
5960 : 48              >            pha
                       >            cmp_flag fzc
5961 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5963 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5965 : 28              >            plp         ;restore status
                        
5966 : ca                       dex
5967 : e07f                     cpx #$7f
                                tst_x $7e,fn
5969 : 08              >            php         ;save flags
596a : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
596c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
596e : 68              >            pla         ;load status
596f : 48              >            pha
                       >            cmp_flag fn
5970 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5972 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5974 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
5975 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5977 : 48              >            pha         ;use stack to load status
5978 : a280            >            ldx #$80     ;precharge index x
597a : 28              >            plp
                        
597b : e07f                     cpx #$7f
                                tst_stat ~fnz
597d : 08              >            php         ;save status
597e : 68              >            pla         ;use stack to retrieve status
597f : 48              >            pha
                       >            cmp_flag ~fnz
5980 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5982 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5984 : 28              >            plp         ;restore status
                        
5985 : ca                       dex
5986 : e07f                     cpx #$7f
                                tst_stat ~fn
5988 : 08              >            php         ;save status
5989 : 68              >            pla         ;use stack to retrieve status
598a : 48              >            pha
                       >            cmp_flag ~fn
598b : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
598d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
598f : 28              >            plp         ;restore status
                        
5990 : ca                       dex
5991 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
5993 : 08              >            php         ;save flags
5994 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5996 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5998 : 68              >            pla         ;load status
5999 : 48              >            pha
                       >            cmp_flag ~fzc
599a : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
599c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
599e : 28              >            plp         ;restore status
                        
                                next_test
599f : ad0002          >            lda test_case   ;previous test
59a2 : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
59a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001b =                 >test_num = test_num + 1
59a6 : a91b            >            lda #test_num   ;*** next tests' number
59a8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPY - zp / abs / #
                                set_y $80,0
                       >            load_flag 0
59ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
59ad : 48              >            pha         ;use stack to load status
59ae : a080            >            ldy #$80     ;precharge index y
59b0 : 28              >            plp
                        
59b1 : c44d                     cpy zp7f
                                tst_stat fc
59b3 : 08              >            php         ;save status
59b4 : 68              >            pla         ;use stack to retrieve status
59b5 : 48              >            pha
                       >            cmp_flag fc
59b6 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
59b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59ba : 28              >            plp         ;restore status
                        
59bb : 88                       dey
59bc : c44d                     cpy zp7f
                                tst_stat fzc
59be : 08              >            php         ;save status
59bf : 68              >            pla         ;use stack to retrieve status
59c0 : 48              >            pha
                       >            cmp_flag fzc
59c1 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
59c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59c5 : 28              >            plp         ;restore status
                        
59c6 : 88                       dey
59c7 : c44d                     cpy zp7f
                                tst_y $7e,fn
59c9 : 08              >            php         ;save flags
59ca : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
59cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59ce : 68              >            pla         ;load status
59cf : 48              >            pha
                       >            cmp_flag fn
59d0 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
59d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59d4 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
59d5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
59d7 : 48              >            pha         ;use stack to load status
59d8 : a080            >            ldy #$80     ;precharge index y
59da : 28              >            plp
                        
59db : c44d                     cpy zp7f
                                tst_stat ~fnz
59dd : 08              >            php         ;save status
59de : 68              >            pla         ;use stack to retrieve status
59df : 48              >            pha
                       >            cmp_flag ~fnz
59e0 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
59e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59e4 : 28              >            plp         ;restore status
                        
59e5 : 88                       dey
59e6 : c44d                     cpy zp7f
                                tst_stat ~fn
59e8 : 08              >            php         ;save status
59e9 : 68              >            pla         ;use stack to retrieve status
59ea : 48              >            pha
                       >            cmp_flag ~fn
59eb : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
59ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59ef : 28              >            plp         ;restore status
                        
59f0 : 88                       dey
59f1 : c44d                     cpy zp7f
                                tst_y $7e,~fzc
59f3 : 08              >            php         ;save flags
59f4 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
59f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59f8 : 68              >            pla         ;load status
59f9 : 48              >            pha
                       >            cmp_flag ~fzc
59fa : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
59fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
59fe : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
59ff : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5a01 : 48              >            pha         ;use stack to load status
5a02 : a080            >            ldy #$80     ;precharge index y
5a04 : 28              >            plp
                        
5a05 : cc1b02                   cpy abs7f
                                tst_stat fc
5a08 : 08              >            php         ;save status
5a09 : 68              >            pla         ;use stack to retrieve status
5a0a : 48              >            pha
                       >            cmp_flag fc
5a0b : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a0f : 28              >            plp         ;restore status
                        
5a10 : 88                       dey
5a11 : cc1b02                   cpy abs7f
                                tst_stat fzc
5a14 : 08              >            php         ;save status
5a15 : 68              >            pla         ;use stack to retrieve status
5a16 : 48              >            pha
                       >            cmp_flag fzc
5a17 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a1b : 28              >            plp         ;restore status
                        
5a1c : 88                       dey
5a1d : cc1b02                   cpy abs7f
                                tst_y $7e,fn
5a20 : 08              >            php         ;save flags
5a21 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5a23 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a25 : 68              >            pla         ;load status
5a26 : 48              >            pha
                       >            cmp_flag fn
5a27 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a2b : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
5a2c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a2e : 48              >            pha         ;use stack to load status
5a2f : a080            >            ldy #$80     ;precharge index y
5a31 : 28              >            plp
                        
5a32 : cc1b02                   cpy abs7f
                                tst_stat ~fnz
5a35 : 08              >            php         ;save status
5a36 : 68              >            pla         ;use stack to retrieve status
5a37 : 48              >            pha
                       >            cmp_flag ~fnz
5a38 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a3c : 28              >            plp         ;restore status
                        
5a3d : 88                       dey
5a3e : cc1b02                   cpy abs7f
                                tst_stat ~fn
5a41 : 08              >            php         ;save status
5a42 : 68              >            pla         ;use stack to retrieve status
5a43 : 48              >            pha
                       >            cmp_flag ~fn
5a44 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a46 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a48 : 28              >            plp         ;restore status
                        
5a49 : 88                       dey
5a4a : cc1b02                   cpy abs7f
                                tst_y $7e,~fzc
5a4d : 08              >            php         ;save flags
5a4e : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5a50 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a52 : 68              >            pla         ;load status
5a53 : 48              >            pha
                       >            cmp_flag ~fzc
5a54 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a58 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
5a59 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5a5b : 48              >            pha         ;use stack to load status
5a5c : a080            >            ldy #$80     ;precharge index y
5a5e : 28              >            plp
                        
5a5f : c07f                     cpy #$7f
                                tst_stat fc
5a61 : 08              >            php         ;save status
5a62 : 68              >            pla         ;use stack to retrieve status
5a63 : 48              >            pha
                       >            cmp_flag fc
5a64 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a66 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a68 : 28              >            plp         ;restore status
                        
5a69 : 88                       dey
5a6a : c07f                     cpy #$7f
                                tst_stat fzc
5a6c : 08              >            php         ;save status
5a6d : 68              >            pla         ;use stack to retrieve status
5a6e : 48              >            pha
                       >            cmp_flag fzc
5a6f : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a71 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a73 : 28              >            plp         ;restore status
                        
5a74 : 88                       dey
5a75 : c07f                     cpy #$7f
                                tst_y $7e,fn
5a77 : 08              >            php         ;save flags
5a78 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5a7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a7c : 68              >            pla         ;load status
5a7d : 48              >            pha
                       >            cmp_flag fn
5a7e : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a82 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
5a83 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a85 : 48              >            pha         ;use stack to load status
5a86 : a080            >            ldy #$80     ;precharge index y
5a88 : 28              >            plp
                        
5a89 : c07f                     cpy #$7f
                                tst_stat ~fnz
5a8b : 08              >            php         ;save status
5a8c : 68              >            pla         ;use stack to retrieve status
5a8d : 48              >            pha
                       >            cmp_flag ~fnz
5a8e : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a92 : 28              >            plp         ;restore status
                        
5a93 : 88                       dey
5a94 : c07f                     cpy #$7f
                                tst_stat ~fn
5a96 : 08              >            php         ;save status
5a97 : 68              >            pla         ;use stack to retrieve status
5a98 : 48              >            pha
                       >            cmp_flag ~fn
5a99 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a9b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5a9d : 28              >            plp         ;restore status
                        
5a9e : 88                       dey
5a9f : c07f                     cpy #$7f
                                tst_y $7e,~fzc
5aa1 : 08              >            php         ;save flags
5aa2 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5aa4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5aa6 : 68              >            pla         ;load status
5aa7 : 48              >            pha
                       >            cmp_flag ~fzc
5aa8 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5aaa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5aac : 28              >            plp         ;restore status
                        
                                next_test
5aad : ad0002          >            lda test_case   ;previous test
5ab0 : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5ab2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001c =                 >test_num = test_num + 1
5ab4 : a91c            >            lda #test_num   ;*** next tests' number
5ab6 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CMP - zp / abs / #
                                set_a $80,0
                       >            load_flag 0
5ab9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5abb : 48              >            pha         ;use stack to load status
5abc : a980            >            lda #$80     ;precharge accu
5abe : 28              >            plp
                        
5abf : c54d                     cmp zp7f
                                tst_a $80,fc
5ac1 : 08              >            php         ;save flags
5ac2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5ac4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ac6 : 68              >            pla         ;load status
5ac7 : 48              >            pha
                       >            cmp_flag fc
5ac8 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5aca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5acc : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5acd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5acf : 48              >            pha         ;use stack to load status
5ad0 : a97f            >            lda #$7f     ;precharge accu
5ad2 : 28              >            plp
                        
5ad3 : c54d                     cmp zp7f
                                tst_a $7f,fzc
5ad5 : 08              >            php         ;save flags
5ad6 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5ad8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ada : 68              >            pla         ;load status
5adb : 48              >            pha
                       >            cmp_flag fzc
5adc : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5ade : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ae0 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5ae1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5ae3 : 48              >            pha         ;use stack to load status
5ae4 : a97e            >            lda #$7e     ;precharge accu
5ae6 : 28              >            plp
                        
5ae7 : c54d                     cmp zp7f
                                tst_a $7e,fn
5ae9 : 08              >            php         ;save flags
5aea : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5aec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5aee : 68              >            pla         ;load status
5aef : 48              >            pha
                       >            cmp_flag fn
5af0 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5af2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5af4 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5af5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5af7 : 48              >            pha         ;use stack to load status
5af8 : a980            >            lda #$80     ;precharge accu
5afa : 28              >            plp
                        
5afb : c54d                     cmp zp7f
                                tst_a $80,~fnz
5afd : 08              >            php         ;save flags
5afe : c980            >            cmp #$80     ;test result
                       >            trap_ne
5b00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b02 : 68              >            pla         ;load status
5b03 : 48              >            pha
                       >            cmp_flag ~fnz
5b04 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5b06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b08 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5b09 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5b0b : 48              >            pha         ;use stack to load status
5b0c : a97f            >            lda #$7f     ;precharge accu
5b0e : 28              >            plp
                        
5b0f : c54d                     cmp zp7f
                                tst_a $7f,~fn
5b11 : 08              >            php         ;save flags
5b12 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5b14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b16 : 68              >            pla         ;load status
5b17 : 48              >            pha
                       >            cmp_flag ~fn
5b18 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5b1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b1c : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5b1d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5b1f : 48              >            pha         ;use stack to load status
5b20 : a97e            >            lda #$7e     ;precharge accu
5b22 : 28              >            plp
                        
5b23 : c54d                     cmp zp7f
                                tst_a $7e,~fzc
5b25 : 08              >            php         ;save flags
5b26 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5b28 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b2a : 68              >            pla         ;load status
5b2b : 48              >            pha
                       >            cmp_flag ~fzc
5b2c : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5b2e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b30 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
5b31 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5b33 : 48              >            pha         ;use stack to load status
5b34 : a980            >            lda #$80     ;precharge accu
5b36 : 28              >            plp
                        
5b37 : cd1b02                   cmp abs7f
                                tst_a $80,fc
5b3a : 08              >            php         ;save flags
5b3b : c980            >            cmp #$80     ;test result
                       >            trap_ne
5b3d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b3f : 68              >            pla         ;load status
5b40 : 48              >            pha
                       >            cmp_flag fc
5b41 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5b43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b45 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5b46 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5b48 : 48              >            pha         ;use stack to load status
5b49 : a97f            >            lda #$7f     ;precharge accu
5b4b : 28              >            plp
                        
5b4c : cd1b02                   cmp abs7f
                                tst_a $7f,fzc
5b4f : 08              >            php         ;save flags
5b50 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5b52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b54 : 68              >            pla         ;load status
5b55 : 48              >            pha
                       >            cmp_flag fzc
5b56 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5b58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b5a : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5b5b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5b5d : 48              >            pha         ;use stack to load status
5b5e : a97e            >            lda #$7e     ;precharge accu
5b60 : 28              >            plp
                        
5b61 : cd1b02                   cmp abs7f
                                tst_a $7e,fn
5b64 : 08              >            php         ;save flags
5b65 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5b67 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b69 : 68              >            pla         ;load status
5b6a : 48              >            pha
                       >            cmp_flag fn
5b6b : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5b6d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b6f : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5b70 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5b72 : 48              >            pha         ;use stack to load status
5b73 : a980            >            lda #$80     ;precharge accu
5b75 : 28              >            plp
                        
5b76 : cd1b02                   cmp abs7f
                                tst_a $80,~fnz
5b79 : 08              >            php         ;save flags
5b7a : c980            >            cmp #$80     ;test result
                       >            trap_ne
5b7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b7e : 68              >            pla         ;load status
5b7f : 48              >            pha
                       >            cmp_flag ~fnz
5b80 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5b82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b84 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5b85 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5b87 : 48              >            pha         ;use stack to load status
5b88 : a97f            >            lda #$7f     ;precharge accu
5b8a : 28              >            plp
                        
5b8b : cd1b02                   cmp abs7f
                                tst_a $7f,~fn
5b8e : 08              >            php         ;save flags
5b8f : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5b91 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b93 : 68              >            pla         ;load status
5b94 : 48              >            pha
                       >            cmp_flag ~fn
5b95 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5b97 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5b99 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5b9a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5b9c : 48              >            pha         ;use stack to load status
5b9d : a97e            >            lda #$7e     ;precharge accu
5b9f : 28              >            plp
                        
5ba0 : cd1b02                   cmp abs7f
                                tst_a $7e,~fzc
5ba3 : 08              >            php         ;save flags
5ba4 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5ba6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ba8 : 68              >            pla         ;load status
5ba9 : 48              >            pha
                       >            cmp_flag ~fzc
5baa : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5bac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bae : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
5baf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5bb1 : 48              >            pha         ;use stack to load status
5bb2 : a980            >            lda #$80     ;precharge accu
5bb4 : 28              >            plp
                        
5bb5 : c97f                     cmp #$7f
                                tst_a $80,fc
5bb7 : 08              >            php         ;save flags
5bb8 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5bba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bbc : 68              >            pla         ;load status
5bbd : 48              >            pha
                       >            cmp_flag fc
5bbe : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5bc0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bc2 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5bc3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5bc5 : 48              >            pha         ;use stack to load status
5bc6 : a97f            >            lda #$7f     ;precharge accu
5bc8 : 28              >            plp
                        
5bc9 : c97f                     cmp #$7f
                                tst_a $7f,fzc
5bcb : 08              >            php         ;save flags
5bcc : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5bce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bd0 : 68              >            pla         ;load status
5bd1 : 48              >            pha
                       >            cmp_flag fzc
5bd2 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5bd4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bd6 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5bd7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5bd9 : 48              >            pha         ;use stack to load status
5bda : a97e            >            lda #$7e     ;precharge accu
5bdc : 28              >            plp
                        
5bdd : c97f                     cmp #$7f
                                tst_a $7e,fn
5bdf : 08              >            php         ;save flags
5be0 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5be2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5be4 : 68              >            pla         ;load status
5be5 : 48              >            pha
                       >            cmp_flag fn
5be6 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5be8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bea : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5beb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5bed : 48              >            pha         ;use stack to load status
5bee : a980            >            lda #$80     ;precharge accu
5bf0 : 28              >            plp
                        
5bf1 : c97f                     cmp #$7f
                                tst_a $80,~fnz
5bf3 : 08              >            php         ;save flags
5bf4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5bf6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bf8 : 68              >            pla         ;load status
5bf9 : 48              >            pha
                       >            cmp_flag ~fnz
5bfa : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5bfc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5bfe : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5bff : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c01 : 48              >            pha         ;use stack to load status
5c02 : a97f            >            lda #$7f     ;precharge accu
5c04 : 28              >            plp
                        
5c05 : c97f                     cmp #$7f
                                tst_a $7f,~fn
5c07 : 08              >            php         ;save flags
5c08 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5c0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c0c : 68              >            pla         ;load status
5c0d : 48              >            pha
                       >            cmp_flag ~fn
5c0e : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5c10 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c12 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5c13 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c15 : 48              >            pha         ;use stack to load status
5c16 : a97e            >            lda #$7e     ;precharge accu
5c18 : 28              >            plp
                        
5c19 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
5c1b : 08              >            php         ;save flags
5c1c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5c1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c20 : 68              >            pla         ;load status
5c21 : 48              >            pha
                       >            cmp_flag ~fzc
5c22 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5c24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c26 : 28              >            plp         ;restore status
                        
                        
5c27 : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
5c29 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5c2b : 48              >            pha         ;use stack to load status
5c2c : a980            >            lda #$80     ;precharge accu
5c2e : 28              >            plp
                        
5c2f : d549                     cmp zp1,x
                                tst_a $80,fc
5c31 : 08              >            php         ;save flags
5c32 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5c34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c36 : 68              >            pla         ;load status
5c37 : 48              >            pha
                       >            cmp_flag fc
5c38 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5c3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c3c : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5c3d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5c3f : 48              >            pha         ;use stack to load status
5c40 : a97f            >            lda #$7f     ;precharge accu
5c42 : 28              >            plp
                        
5c43 : d549                     cmp zp1,x
                                tst_a $7f,fzc
5c45 : 08              >            php         ;save flags
5c46 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5c48 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c4a : 68              >            pla         ;load status
5c4b : 48              >            pha
                       >            cmp_flag fzc
5c4c : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5c4e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c50 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5c51 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5c53 : 48              >            pha         ;use stack to load status
5c54 : a97e            >            lda #$7e     ;precharge accu
5c56 : 28              >            plp
                        
5c57 : d549                     cmp zp1,x
                                tst_a $7e,fn
5c59 : 08              >            php         ;save flags
5c5a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5c5c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c5e : 68              >            pla         ;load status
5c5f : 48              >            pha
                       >            cmp_flag fn
5c60 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5c62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c64 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5c65 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c67 : 48              >            pha         ;use stack to load status
5c68 : a980            >            lda #$80     ;precharge accu
5c6a : 28              >            plp
                        
5c6b : d549                     cmp zp1,x
                                tst_a $80,~fnz
5c6d : 08              >            php         ;save flags
5c6e : c980            >            cmp #$80     ;test result
                       >            trap_ne
5c70 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c72 : 68              >            pla         ;load status
5c73 : 48              >            pha
                       >            cmp_flag ~fnz
5c74 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5c76 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c78 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5c79 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c7b : 48              >            pha         ;use stack to load status
5c7c : a97f            >            lda #$7f     ;precharge accu
5c7e : 28              >            plp
                        
5c7f : d549                     cmp zp1,x
                                tst_a $7f,~fn
5c81 : 08              >            php         ;save flags
5c82 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5c84 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c86 : 68              >            pla         ;load status
5c87 : 48              >            pha
                       >            cmp_flag ~fn
5c88 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5c8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c8c : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5c8d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c8f : 48              >            pha         ;use stack to load status
5c90 : a97e            >            lda #$7e     ;precharge accu
5c92 : 28              >            plp
                        
5c93 : d549                     cmp zp1,x
                                tst_a $7e,~fzc
5c95 : 08              >            php         ;save flags
5c96 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5c98 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5c9a : 68              >            pla         ;load status
5c9b : 48              >            pha
                       >            cmp_flag ~fzc
5c9c : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5c9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ca0 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
5ca1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5ca3 : 48              >            pha         ;use stack to load status
5ca4 : a980            >            lda #$80     ;precharge accu
5ca6 : 28              >            plp
                        
5ca7 : dd1702                   cmp abs1,x
                                tst_a $80,fc
5caa : 08              >            php         ;save flags
5cab : c980            >            cmp #$80     ;test result
                       >            trap_ne
5cad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5caf : 68              >            pla         ;load status
5cb0 : 48              >            pha
                       >            cmp_flag fc
5cb1 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5cb3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cb5 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5cb6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5cb8 : 48              >            pha         ;use stack to load status
5cb9 : a97f            >            lda #$7f     ;precharge accu
5cbb : 28              >            plp
                        
5cbc : dd1702                   cmp abs1,x
                                tst_a $7f,fzc
5cbf : 08              >            php         ;save flags
5cc0 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5cc2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cc4 : 68              >            pla         ;load status
5cc5 : 48              >            pha
                       >            cmp_flag fzc
5cc6 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5cc8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cca : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5ccb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5ccd : 48              >            pha         ;use stack to load status
5cce : a97e            >            lda #$7e     ;precharge accu
5cd0 : 28              >            plp
                        
5cd1 : dd1702                   cmp abs1,x
                                tst_a $7e,fn
5cd4 : 08              >            php         ;save flags
5cd5 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5cd7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cd9 : 68              >            pla         ;load status
5cda : 48              >            pha
                       >            cmp_flag fn
5cdb : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5cdd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cdf : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5ce0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5ce2 : 48              >            pha         ;use stack to load status
5ce3 : a980            >            lda #$80     ;precharge accu
5ce5 : 28              >            plp
                        
5ce6 : dd1702                   cmp abs1,x
                                tst_a $80,~fnz
5ce9 : 08              >            php         ;save flags
5cea : c980            >            cmp #$80     ;test result
                       >            trap_ne
5cec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cee : 68              >            pla         ;load status
5cef : 48              >            pha
                       >            cmp_flag ~fnz
5cf0 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5cf2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5cf4 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5cf5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5cf7 : 48              >            pha         ;use stack to load status
5cf8 : a97f            >            lda #$7f     ;precharge accu
5cfa : 28              >            plp
                        
5cfb : dd1702                   cmp abs1,x
                                tst_a $7f,~fn
5cfe : 08              >            php         ;save flags
5cff : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5d01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d03 : 68              >            pla         ;load status
5d04 : 48              >            pha
                       >            cmp_flag ~fn
5d05 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5d07 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d09 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5d0a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5d0c : 48              >            pha         ;use stack to load status
5d0d : a97e            >            lda #$7e     ;precharge accu
5d0f : 28              >            plp
                        
5d10 : dd1702                   cmp abs1,x
                                tst_a $7e,~fzc
5d13 : 08              >            php         ;save flags
5d14 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5d16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d18 : 68              >            pla         ;load status
5d19 : 48              >            pha
                       >            cmp_flag ~fzc
5d1a : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5d1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d1e : 28              >            plp         ;restore status
                        
                        
5d1f : a004                     ldy #4          ;with indexing by Y
5d21 : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
5d23 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5d25 : 48              >            pha         ;use stack to load status
5d26 : a980            >            lda #$80     ;precharge accu
5d28 : 28              >            plp
                        
5d29 : d91702                   cmp abs1,y
                                tst_a $80,fc
5d2c : 08              >            php         ;save flags
5d2d : c980            >            cmp #$80     ;test result
                       >            trap_ne
5d2f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d31 : 68              >            pla         ;load status
5d32 : 48              >            pha
                       >            cmp_flag fc
5d33 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5d35 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d37 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5d38 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5d3a : 48              >            pha         ;use stack to load status
5d3b : a97f            >            lda #$7f     ;precharge accu
5d3d : 28              >            plp
                        
5d3e : d91702                   cmp abs1,y
                                tst_a $7f,fzc
5d41 : 08              >            php         ;save flags
5d42 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5d44 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d46 : 68              >            pla         ;load status
5d47 : 48              >            pha
                       >            cmp_flag fzc
5d48 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5d4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d4c : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5d4d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5d4f : 48              >            pha         ;use stack to load status
5d50 : a97e            >            lda #$7e     ;precharge accu
5d52 : 28              >            plp
                        
5d53 : d91702                   cmp abs1,y
                                tst_a $7e,fn
5d56 : 08              >            php         ;save flags
5d57 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5d59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d5b : 68              >            pla         ;load status
5d5c : 48              >            pha
                       >            cmp_flag fn
5d5d : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5d5f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d61 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5d62 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5d64 : 48              >            pha         ;use stack to load status
5d65 : a980            >            lda #$80     ;precharge accu
5d67 : 28              >            plp
                        
5d68 : d91702                   cmp abs1,y
                                tst_a $80,~fnz
5d6b : 08              >            php         ;save flags
5d6c : c980            >            cmp #$80     ;test result
                       >            trap_ne
5d6e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d70 : 68              >            pla         ;load status
5d71 : 48              >            pha
                       >            cmp_flag ~fnz
5d72 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5d74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d76 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5d77 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5d79 : 48              >            pha         ;use stack to load status
5d7a : a97f            >            lda #$7f     ;precharge accu
5d7c : 28              >            plp
                        
5d7d : d91702                   cmp abs1,y
                                tst_a $7f,~fn
5d80 : 08              >            php         ;save flags
5d81 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5d83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d85 : 68              >            pla         ;load status
5d86 : 48              >            pha
                       >            cmp_flag ~fn
5d87 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5d89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d8b : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5d8c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5d8e : 48              >            pha         ;use stack to load status
5d8f : a97e            >            lda #$7e     ;precharge accu
5d91 : 28              >            plp
                        
5d92 : d91702                   cmp abs1,y
                                tst_a $7e,~fzc
5d95 : 08              >            php         ;save flags
5d96 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5d98 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5d9a : 68              >            pla         ;load status
5d9b : 48              >            pha
                       >            cmp_flag ~fzc
5d9c : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5d9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5da0 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
5da1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5da3 : 48              >            pha         ;use stack to load status
5da4 : a980            >            lda #$80     ;precharge accu
5da6 : 28              >            plp
                        
5da7 : c15a                     cmp (ind1,x)
                                tst_a $80,fc
5da9 : 08              >            php         ;save flags
5daa : c980            >            cmp #$80     ;test result
                       >            trap_ne
5dac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5dae : 68              >            pla         ;load status
5daf : 48              >            pha
                       >            cmp_flag fc
5db0 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5db2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5db4 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5db5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5db7 : 48              >            pha         ;use stack to load status
5db8 : a97f            >            lda #$7f     ;precharge accu
5dba : 28              >            plp
                        
5dbb : c15a                     cmp (ind1,x)
                                tst_a $7f,fzc
5dbd : 08              >            php         ;save flags
5dbe : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5dc0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5dc2 : 68              >            pla         ;load status
5dc3 : 48              >            pha
                       >            cmp_flag fzc
5dc4 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5dc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5dc8 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5dc9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5dcb : 48              >            pha         ;use stack to load status
5dcc : a97e            >            lda #$7e     ;precharge accu
5dce : 28              >            plp
                        
5dcf : c15a                     cmp (ind1,x)
                                tst_a $7e,fn
5dd1 : 08              >            php         ;save flags
5dd2 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5dd4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5dd6 : 68              >            pla         ;load status
5dd7 : 48              >            pha
                       >            cmp_flag fn
5dd8 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5dda : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ddc : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5ddd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5ddf : 48              >            pha         ;use stack to load status
5de0 : a980            >            lda #$80     ;precharge accu
5de2 : 28              >            plp
                        
5de3 : c15a                     cmp (ind1,x)
                                tst_a $80,~fnz
5de5 : 08              >            php         ;save flags
5de6 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5de8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5dea : 68              >            pla         ;load status
5deb : 48              >            pha
                       >            cmp_flag ~fnz
5dec : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5dee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5df0 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5df1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5df3 : 48              >            pha         ;use stack to load status
5df4 : a97f            >            lda #$7f     ;precharge accu
5df6 : 28              >            plp
                        
5df7 : c15a                     cmp (ind1,x)
                                tst_a $7f,~fn
5df9 : 08              >            php         ;save flags
5dfa : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5dfc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5dfe : 68              >            pla         ;load status
5dff : 48              >            pha
                       >            cmp_flag ~fn
5e00 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5e02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e04 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5e05 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5e07 : 48              >            pha         ;use stack to load status
5e08 : a97e            >            lda #$7e     ;precharge accu
5e0a : 28              >            plp
                        
5e0b : c15a                     cmp (ind1,x)
                                tst_a $7e,~fzc
5e0d : 08              >            php         ;save flags
5e0e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5e10 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e12 : 68              >            pla         ;load status
5e13 : 48              >            pha
                       >            cmp_flag ~fzc
5e14 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5e16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e18 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
5e19 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e1b : 48              >            pha         ;use stack to load status
5e1c : a980            >            lda #$80     ;precharge accu
5e1e : 28              >            plp
                        
5e1f : d15a                     cmp (ind1),y
                                tst_a $80,fc
5e21 : 08              >            php         ;save flags
5e22 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5e24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e26 : 68              >            pla         ;load status
5e27 : 48              >            pha
                       >            cmp_flag fc
5e28 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5e2a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e2c : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5e2d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e2f : 48              >            pha         ;use stack to load status
5e30 : a97f            >            lda #$7f     ;precharge accu
5e32 : 28              >            plp
                        
5e33 : d15a                     cmp (ind1),y
                                tst_a $7f,fzc
5e35 : 08              >            php         ;save flags
5e36 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5e38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e3a : 68              >            pla         ;load status
5e3b : 48              >            pha
                       >            cmp_flag fzc
5e3c : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5e3e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e40 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5e41 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e43 : 48              >            pha         ;use stack to load status
5e44 : a97e            >            lda #$7e     ;precharge accu
5e46 : 28              >            plp
                        
5e47 : d15a                     cmp (ind1),y
                                tst_a $7e,fn
5e49 : 08              >            php         ;save flags
5e4a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5e4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e4e : 68              >            pla         ;load status
5e4f : 48              >            pha
                       >            cmp_flag fn
5e50 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5e52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e54 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5e55 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5e57 : 48              >            pha         ;use stack to load status
5e58 : a980            >            lda #$80     ;precharge accu
5e5a : 28              >            plp
                        
5e5b : d15a                     cmp (ind1),y
                                tst_a $80,~fnz
5e5d : 08              >            php         ;save flags
5e5e : c980            >            cmp #$80     ;test result
                       >            trap_ne
5e60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e62 : 68              >            pla         ;load status
5e63 : 48              >            pha
                       >            cmp_flag ~fnz
5e64 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5e66 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e68 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5e69 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5e6b : 48              >            pha         ;use stack to load status
5e6c : a97f            >            lda #$7f     ;precharge accu
5e6e : 28              >            plp
                        
5e6f : d15a                     cmp (ind1),y
                                tst_a $7f,~fn
5e71 : 08              >            php         ;save flags
5e72 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5e74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e76 : 68              >            pla         ;load status
5e77 : 48              >            pha
                       >            cmp_flag ~fn
5e78 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5e7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e7c : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5e7d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5e7f : 48              >            pha         ;use stack to load status
5e80 : a97e            >            lda #$7e     ;precharge accu
5e82 : 28              >            plp
                        
5e83 : d15a                     cmp (ind1),y
                                tst_a $7e,~fzc
5e85 : 08              >            php         ;save flags
5e86 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5e88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e8a : 68              >            pla         ;load status
5e8b : 48              >            pha
                       >            cmp_flag ~fzc
5e8c : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5e8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5e90 : 28              >            plp         ;restore status
                        
                                next_test
5e91 : ad0002          >            lda test_case   ;previous test
5e94 : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5e96 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001d =                 >test_num = test_num + 1
5e98 : a91d            >            lda #test_num   ;*** next tests' number
5e9a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
5e9d : a203                     ldx #3
5e9f :                  tasl
                                set_ax zp1,0
                       >            load_flag 0
5e9f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5ea1 : 48              >            pha         ;use stack to load status
5ea2 : b549            >            lda zp1,x    ;precharge accu
5ea4 : 28              >            plp
                        
5ea5 : 0a                       asl a
                                tst_ax rASL,fASL,0
5ea6 : 08              >            php         ;save flags
5ea7 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
5eaa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5eac : 68              >            pla         ;load status
                       >            eor_flag 0
5ead : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5eaf : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
5eb2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5eb4 : ca                       dex
5eb5 : 10e8                     bpl tasl
5eb7 : a203                     ldx #3
5eb9 :                  tasl1
                                set_ax zp1,$ff
                       >            load_flag $ff
5eb9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5ebb : 48              >            pha         ;use stack to load status
5ebc : b549            >            lda zp1,x    ;precharge accu
5ebe : 28              >            plp
                        
5ebf : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
5ec0 : 08              >            php         ;save flags
5ec1 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
5ec4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ec6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5ec7 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5ec9 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
5ecc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5ece : ca                       dex
5ecf : 10e8                     bpl tasl1
                        
5ed1 : a203                     ldx #3
5ed3 :                  tlsr
                                set_ax zp1,0
                       >            load_flag 0
5ed3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5ed5 : 48              >            pha         ;use stack to load status
5ed6 : b549            >            lda zp1,x    ;precharge accu
5ed8 : 28              >            plp
                        
5ed9 : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
5eda : 08              >            php         ;save flags
5edb : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
5ede : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ee0 : 68              >            pla         ;load status
                       >            eor_flag 0
5ee1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5ee3 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
5ee6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5ee8 : ca                       dex
5ee9 : 10e8                     bpl tlsr
5eeb : a203                     ldx #3
5eed :                  tlsr1
                                set_ax zp1,$ff
                       >            load_flag $ff
5eed : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5eef : 48              >            pha         ;use stack to load status
5ef0 : b549            >            lda zp1,x    ;precharge accu
5ef2 : 28              >            plp
                        
5ef3 : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
5ef4 : 08              >            php         ;save flags
5ef5 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
5ef8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5efa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5efb : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5efd : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
5f00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5f02 : ca                       dex
5f03 : 10e8                     bpl tlsr1
                        
5f05 : a203                     ldx #3
5f07 :                  trol
                                set_ax zp1,0
                       >            load_flag 0
5f07 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5f09 : 48              >            pha         ;use stack to load status
5f0a : b549            >            lda zp1,x    ;precharge accu
5f0c : 28              >            plp
                        
5f0d : 2a                       rol a
                                tst_ax rROL,fROL,0
5f0e : 08              >            php         ;save flags
5f0f : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
5f12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f14 : 68              >            pla         ;load status
                       >            eor_flag 0
5f15 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5f17 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
5f1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5f1c : ca                       dex
5f1d : 10e8                     bpl trol
5f1f : a203                     ldx #3
5f21 :                  trol1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
5f21 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
5f23 : 48              >            pha         ;use stack to load status
5f24 : b549            >            lda zp1,x    ;precharge accu
5f26 : 28              >            plp
                        
5f27 : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
5f28 : 08              >            php         ;save flags
5f29 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
5f2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f2e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5f2f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5f31 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
5f34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5f36 : ca                       dex
5f37 : 10e8                     bpl trol1
                        
5f39 : a203                     ldx #3
5f3b :                  trolc
                                set_ax zp1,fc
                       >            load_flag fc
5f3b : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
5f3d : 48              >            pha         ;use stack to load status
5f3e : b549            >            lda zp1,x    ;precharge accu
5f40 : 28              >            plp
                        
5f41 : 2a                       rol a
                                tst_ax rROLc,fROLc,0
5f42 : 08              >            php         ;save flags
5f43 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
5f46 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f48 : 68              >            pla         ;load status
                       >            eor_flag 0
5f49 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5f4b : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
5f4e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5f50 : ca                       dex
5f51 : 10e8                     bpl trolc
5f53 : a203                     ldx #3
5f55 :                  trolc1
                                set_ax zp1,$ff
                       >            load_flag $ff
5f55 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5f57 : 48              >            pha         ;use stack to load status
5f58 : b549            >            lda zp1,x    ;precharge accu
5f5a : 28              >            plp
                        
5f5b : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
5f5c : 08              >            php         ;save flags
5f5d : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
5f60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f62 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5f63 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5f65 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
5f68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5f6a : ca                       dex
5f6b : 10e8                     bpl trolc1
                        
5f6d : a203                     ldx #3
5f6f :                  tror
                                set_ax zp1,0
                       >            load_flag 0
5f6f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5f71 : 48              >            pha         ;use stack to load status
5f72 : b549            >            lda zp1,x    ;precharge accu
5f74 : 28              >            plp
                        
5f75 : 6a                       ror a
                                tst_ax rROR,fROR,0
5f76 : 08              >            php         ;save flags
5f77 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
5f7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f7c : 68              >            pla         ;load status
                       >            eor_flag 0
5f7d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5f7f : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
5f82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5f84 : ca                       dex
5f85 : 10e8                     bpl tror
5f87 : a203                     ldx #3
5f89 :                  tror1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
5f89 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
5f8b : 48              >            pha         ;use stack to load status
5f8c : b549            >            lda zp1,x    ;precharge accu
5f8e : 28              >            plp
                        
5f8f : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
5f90 : 08              >            php         ;save flags
5f91 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
5f94 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5f96 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5f97 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5f99 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
5f9c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5f9e : ca                       dex
5f9f : 10e8                     bpl tror1
                        
5fa1 : a203                     ldx #3
5fa3 :                  trorc
                                set_ax zp1,fc
                       >            load_flag fc
5fa3 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
5fa5 : 48              >            pha         ;use stack to load status
5fa6 : b549            >            lda zp1,x    ;precharge accu
5fa8 : 28              >            plp
                        
5fa9 : 6a                       ror a
                                tst_ax rRORc,fRORc,0
5faa : 08              >            php         ;save flags
5fab : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
5fae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5fb0 : 68              >            pla         ;load status
                       >            eor_flag 0
5fb1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5fb3 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
5fb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5fb8 : ca                       dex
5fb9 : 10e8                     bpl trorc
5fbb : a203                     ldx #3
5fbd :                  trorc1
                                set_ax zp1,$ff
                       >            load_flag $ff
5fbd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5fbf : 48              >            pha         ;use stack to load status
5fc0 : b549            >            lda zp1,x    ;precharge accu
5fc2 : 28              >            plp
                        
5fc3 : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
5fc4 : 08              >            php         ;save flags
5fc5 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
5fc8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5fca : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5fcb : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5fcd : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
5fd0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5fd2 : ca                       dex
5fd3 : 10e8                     bpl trorc1
                                next_test
5fd5 : ad0002          >            lda test_case   ;previous test
5fd8 : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5fda : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001e =                 >test_num = test_num + 1
5fdc : a91e            >            lda #test_num   ;*** next tests' number
5fde : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zeropage
5fe1 : a203                     ldx #3
5fe3 :                  tasl2
                                set_z zp1,0
                       >            load_flag 0
5fe3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5fe5 : 48              >            pha         ;use stack to load status
5fe6 : b549            >            lda zp1,x    ;load to zeropage
5fe8 : 8542            >            sta zpt
5fea : 28              >            plp
                        
5feb : 0642                     asl zpt
                                tst_z rASL,fASL,0
5fed : 08              >            php         ;save flags
5fee : a542            >            lda zpt
5ff0 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
5ff3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
5ff5 : 68              >            pla         ;load status
                       >            eor_flag 0
5ff6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5ff8 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
5ffb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
5ffd : ca                       dex
5ffe : 10e3                     bpl tasl2
6000 : a203                     ldx #3
6002 :                  tasl3
                                set_z zp1,$ff
                       >            load_flag $ff
6002 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6004 : 48              >            pha         ;use stack to load status
6005 : b549            >            lda zp1,x    ;load to zeropage
6007 : 8542            >            sta zpt
6009 : 28              >            plp
                        
600a : 0642                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
600c : 08              >            php         ;save flags
600d : a542            >            lda zpt
600f : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
6012 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6014 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6015 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6017 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
601a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
601c : ca                       dex
601d : 10e3                     bpl tasl3
                        
601f : a203                     ldx #3
6021 :                  tlsr2
                                set_z zp1,0
                       >            load_flag 0
6021 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6023 : 48              >            pha         ;use stack to load status
6024 : b549            >            lda zp1,x    ;load to zeropage
6026 : 8542            >            sta zpt
6028 : 28              >            plp
                        
6029 : 4642                     lsr zpt
                                tst_z rLSR,fLSR,0
602b : 08              >            php         ;save flags
602c : a542            >            lda zpt
602e : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
6031 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6033 : 68              >            pla         ;load status
                       >            eor_flag 0
6034 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6036 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
6039 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
603b : ca                       dex
603c : 10e3                     bpl tlsr2
603e : a203                     ldx #3
6040 :                  tlsr3
                                set_z zp1,$ff
                       >            load_flag $ff
6040 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6042 : 48              >            pha         ;use stack to load status
6043 : b549            >            lda zp1,x    ;load to zeropage
6045 : 8542            >            sta zpt
6047 : 28              >            plp
                        
6048 : 4642                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
604a : 08              >            php         ;save flags
604b : a542            >            lda zpt
604d : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
6050 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6052 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6053 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6055 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
6058 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
605a : ca                       dex
605b : 10e3                     bpl tlsr3
                        
605d : a203                     ldx #3
605f :                  trol2
                                set_z zp1,0
                       >            load_flag 0
605f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6061 : 48              >            pha         ;use stack to load status
6062 : b549            >            lda zp1,x    ;load to zeropage
6064 : 8542            >            sta zpt
6066 : 28              >            plp
                        
6067 : 2642                     rol zpt
                                tst_z rROL,fROL,0
6069 : 08              >            php         ;save flags
606a : a542            >            lda zpt
606c : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
606f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6071 : 68              >            pla         ;load status
                       >            eor_flag 0
6072 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6074 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
6077 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6079 : ca                       dex
607a : 10e3                     bpl trol2
607c : a203                     ldx #3
607e :                  trol3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
607e : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
6080 : 48              >            pha         ;use stack to load status
6081 : b549            >            lda zp1,x    ;load to zeropage
6083 : 8542            >            sta zpt
6085 : 28              >            plp
                        
6086 : 2642                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
6088 : 08              >            php         ;save flags
6089 : a542            >            lda zpt
608b : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
608e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6090 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6091 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6093 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
6096 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6098 : ca                       dex
6099 : 10e3                     bpl trol3
                        
609b : a203                     ldx #3
609d :                  trolc2
                                set_z zp1,fc
                       >            load_flag fc
609d : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
609f : 48              >            pha         ;use stack to load status
60a0 : b549            >            lda zp1,x    ;load to zeropage
60a2 : 8542            >            sta zpt
60a4 : 28              >            plp
                        
60a5 : 2642                     rol zpt
                                tst_z rROLc,fROLc,0
60a7 : 08              >            php         ;save flags
60a8 : a542            >            lda zpt
60aa : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
60ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60af : 68              >            pla         ;load status
                       >            eor_flag 0
60b0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
60b2 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
60b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
60b7 : ca                       dex
60b8 : 10e3                     bpl trolc2
60ba : a203                     ldx #3
60bc :                  trolc3
                                set_z zp1,$ff
                       >            load_flag $ff
60bc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
60be : 48              >            pha         ;use stack to load status
60bf : b549            >            lda zp1,x    ;load to zeropage
60c1 : 8542            >            sta zpt
60c3 : 28              >            plp
                        
60c4 : 2642                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
60c6 : 08              >            php         ;save flags
60c7 : a542            >            lda zpt
60c9 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
60cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60ce : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
60cf : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
60d1 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
60d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
60d6 : ca                       dex
60d7 : 10e3                     bpl trolc3
                        
60d9 : a203                     ldx #3
60db :                  tror2
                                set_z zp1,0
                       >            load_flag 0
60db : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
60dd : 48              >            pha         ;use stack to load status
60de : b549            >            lda zp1,x    ;load to zeropage
60e0 : 8542            >            sta zpt
60e2 : 28              >            plp
                        
60e3 : 6642                     ror zpt
                                tst_z rROR,fROR,0
60e5 : 08              >            php         ;save flags
60e6 : a542            >            lda zpt
60e8 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
60eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
60ed : 68              >            pla         ;load status
                       >            eor_flag 0
60ee : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
60f0 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
60f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
60f5 : ca                       dex
60f6 : 10e3                     bpl tror2
60f8 : a203                     ldx #3
60fa :                  tror3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
60fa : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
60fc : 48              >            pha         ;use stack to load status
60fd : b549            >            lda zp1,x    ;load to zeropage
60ff : 8542            >            sta zpt
6101 : 28              >            plp
                        
6102 : 6642                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
6104 : 08              >            php         ;save flags
6105 : a542            >            lda zpt
6107 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
610a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
610c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
610d : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
610f : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
6112 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6114 : ca                       dex
6115 : 10e3                     bpl tror3
                        
6117 : a203                     ldx #3
6119 :                  trorc2
                                set_z zp1,fc
                       >            load_flag fc
6119 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
611b : 48              >            pha         ;use stack to load status
611c : b549            >            lda zp1,x    ;load to zeropage
611e : 8542            >            sta zpt
6120 : 28              >            plp
                        
6121 : 6642                     ror zpt
                                tst_z rRORc,fRORc,0
6123 : 08              >            php         ;save flags
6124 : a542            >            lda zpt
6126 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
6129 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
612b : 68              >            pla         ;load status
                       >            eor_flag 0
612c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
612e : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
6131 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6133 : ca                       dex
6134 : 10e3                     bpl trorc2
6136 : a203                     ldx #3
6138 :                  trorc3
                                set_z zp1,$ff
                       >            load_flag $ff
6138 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
613a : 48              >            pha         ;use stack to load status
613b : b549            >            lda zp1,x    ;load to zeropage
613d : 8542            >            sta zpt
613f : 28              >            plp
                        
6140 : 6642                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
6142 : 08              >            php         ;save flags
6143 : a542            >            lda zpt
6145 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
6148 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
614a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
614b : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
614d : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
6150 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6152 : ca                       dex
6153 : 10e3                     bpl trorc3
                                next_test
6155 : ad0002          >            lda test_case   ;previous test
6158 : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
615a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001f =                 >test_num = test_num + 1
615c : a91f            >            lda #test_num   ;*** next tests' number
615e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - absolute
6161 : a203                     ldx #3
6163 :                  tasl4
                                set_abs zp1,0
                       >            load_flag 0
6163 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6165 : 48              >            pha         ;use stack to load status
6166 : b549            >            lda zp1,x    ;load to memory
6168 : 8d0302          >            sta abst
616b : 28              >            plp
                        
616c : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
616f : 08              >            php         ;save flags
6170 : ad0302          >            lda abst
6173 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
6176 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6178 : 68              >            pla         ;load status
                       >            eor_flag 0
6179 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
617b : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
617e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6180 : ca                       dex
6181 : 10e0                     bpl tasl4
6183 : a203                     ldx #3
6185 :                  tasl5
                                set_abs zp1,$ff
                       >            load_flag $ff
6185 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6187 : 48              >            pha         ;use stack to load status
6188 : b549            >            lda zp1,x    ;load to memory
618a : 8d0302          >            sta abst
618d : 28              >            plp
                        
618e : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
6191 : 08              >            php         ;save flags
6192 : ad0302          >            lda abst
6195 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
6198 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
619a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
619b : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
619d : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
61a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
61a2 : ca                       dex
61a3 : 10e0                     bpl tasl5
                        
61a5 : a203                     ldx #3
61a7 :                  tlsr4
                                set_abs zp1,0
                       >            load_flag 0
61a7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
61a9 : 48              >            pha         ;use stack to load status
61aa : b549            >            lda zp1,x    ;load to memory
61ac : 8d0302          >            sta abst
61af : 28              >            plp
                        
61b0 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
61b3 : 08              >            php         ;save flags
61b4 : ad0302          >            lda abst
61b7 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
61ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
61bc : 68              >            pla         ;load status
                       >            eor_flag 0
61bd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
61bf : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
61c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
61c4 : ca                       dex
61c5 : 10e0                     bpl tlsr4
61c7 : a203                     ldx #3
61c9 :                  tlsr5
                                set_abs zp1,$ff
                       >            load_flag $ff
61c9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
61cb : 48              >            pha         ;use stack to load status
61cc : b549            >            lda zp1,x    ;load to memory
61ce : 8d0302          >            sta abst
61d1 : 28              >            plp
                        
61d2 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
61d5 : 08              >            php         ;save flags
61d6 : ad0302          >            lda abst
61d9 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
61dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
61de : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
61df : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
61e1 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
61e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
61e6 : ca                       dex
61e7 : 10e0                     bpl tlsr5
                        
61e9 : a203                     ldx #3
61eb :                  trol4
                                set_abs zp1,0
                       >            load_flag 0
61eb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
61ed : 48              >            pha         ;use stack to load status
61ee : b549            >            lda zp1,x    ;load to memory
61f0 : 8d0302          >            sta abst
61f3 : 28              >            plp
                        
61f4 : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
61f7 : 08              >            php         ;save flags
61f8 : ad0302          >            lda abst
61fb : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
61fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6200 : 68              >            pla         ;load status
                       >            eor_flag 0
6201 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6203 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
6206 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6208 : ca                       dex
6209 : 10e0                     bpl trol4
620b : a203                     ldx #3
620d :                  trol5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
620d : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
620f : 48              >            pha         ;use stack to load status
6210 : b549            >            lda zp1,x    ;load to memory
6212 : 8d0302          >            sta abst
6215 : 28              >            plp
                        
6216 : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
6219 : 08              >            php         ;save flags
621a : ad0302          >            lda abst
621d : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
6220 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6222 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6223 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6225 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
6228 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
622a : ca                       dex
622b : 10e0                     bpl trol5
                        
622d : a203                     ldx #3
622f :                  trolc4
                                set_abs zp1,fc
                       >            load_flag fc
622f : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
6231 : 48              >            pha         ;use stack to load status
6232 : b549            >            lda zp1,x    ;load to memory
6234 : 8d0302          >            sta abst
6237 : 28              >            plp
                        
6238 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
623b : 08              >            php         ;save flags
623c : ad0302          >            lda abst
623f : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
6242 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6244 : 68              >            pla         ;load status
                       >            eor_flag 0
6245 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6247 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
624a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
624c : ca                       dex
624d : 10e0                     bpl trolc4
624f : a203                     ldx #3
6251 :                  trolc5
                                set_abs zp1,$ff
                       >            load_flag $ff
6251 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6253 : 48              >            pha         ;use stack to load status
6254 : b549            >            lda zp1,x    ;load to memory
6256 : 8d0302          >            sta abst
6259 : 28              >            plp
                        
625a : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
625d : 08              >            php         ;save flags
625e : ad0302          >            lda abst
6261 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
6264 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6266 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6267 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6269 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
626c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
626e : ca                       dex
626f : 10e0                     bpl trolc5
                        
6271 : a203                     ldx #3
6273 :                  tror4
                                set_abs zp1,0
                       >            load_flag 0
6273 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6275 : 48              >            pha         ;use stack to load status
6276 : b549            >            lda zp1,x    ;load to memory
6278 : 8d0302          >            sta abst
627b : 28              >            plp
                        
627c : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
627f : 08              >            php         ;save flags
6280 : ad0302          >            lda abst
6283 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
6286 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6288 : 68              >            pla         ;load status
                       >            eor_flag 0
6289 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
628b : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
628e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6290 : ca                       dex
6291 : 10e0                     bpl tror4
6293 : a203                     ldx #3
6295 :                  tror5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
6295 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
6297 : 48              >            pha         ;use stack to load status
6298 : b549            >            lda zp1,x    ;load to memory
629a : 8d0302          >            sta abst
629d : 28              >            plp
                        
629e : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
62a1 : 08              >            php         ;save flags
62a2 : ad0302          >            lda abst
62a5 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
62a8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
62aa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
62ab : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
62ad : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
62b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
62b2 : ca                       dex
62b3 : 10e0                     bpl tror5
                        
62b5 : a203                     ldx #3
62b7 :                  trorc4
                                set_abs zp1,fc
                       >            load_flag fc
62b7 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
62b9 : 48              >            pha         ;use stack to load status
62ba : b549            >            lda zp1,x    ;load to memory
62bc : 8d0302          >            sta abst
62bf : 28              >            plp
                        
62c0 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
62c3 : 08              >            php         ;save flags
62c4 : ad0302          >            lda abst
62c7 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
62ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
62cc : 68              >            pla         ;load status
                       >            eor_flag 0
62cd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
62cf : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
62d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
62d4 : ca                       dex
62d5 : 10e0                     bpl trorc4
62d7 : a203                     ldx #3
62d9 :                  trorc5
                                set_abs zp1,$ff
                       >            load_flag $ff
62d9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
62db : 48              >            pha         ;use stack to load status
62dc : b549            >            lda zp1,x    ;load to memory
62de : 8d0302          >            sta abst
62e1 : 28              >            plp
                        
62e2 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
62e5 : 08              >            php         ;save flags
62e6 : ad0302          >            lda abst
62e9 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
62ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
62ee : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
62ef : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
62f1 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
62f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
62f6 : ca                       dex
62f7 : 10e0                     bpl trorc5
                                next_test
62f9 : ad0002          >            lda test_case   ;previous test
62fc : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
62fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0020 =                 >test_num = test_num + 1
6300 : a920            >            lda #test_num   ;*** next tests' number
6302 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zp indexed
6305 : a203                     ldx #3
6307 :                  tasl6
                                set_zx zp1,0
                       >            load_flag 0
6307 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6309 : 48              >            pha         ;use stack to load status
630a : b549            >            lda zp1,x    ;load to indexed zeropage
630c : 9542            >            sta zpt,x
630e : 28              >            plp
                        
630f : 1642                     asl zpt,x
                                tst_zx rASL,fASL,0
6311 : 08              >            php         ;save flags
6312 : b542            >            lda zpt,x
6314 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
6317 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6319 : 68              >            pla         ;load status
                       >            eor_flag 0
631a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
631c : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
631f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6321 : ca                       dex
6322 : 10e3                     bpl tasl6
6324 : a203                     ldx #3
6326 :                  tasl7
                                set_zx zp1,$ff
                       >            load_flag $ff
6326 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6328 : 48              >            pha         ;use stack to load status
6329 : b549            >            lda zp1,x    ;load to indexed zeropage
632b : 9542            >            sta zpt,x
632d : 28              >            plp
                        
632e : 1642                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
6330 : 08              >            php         ;save flags
6331 : b542            >            lda zpt,x
6333 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
6336 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6338 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6339 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
633b : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
633e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6340 : ca                       dex
6341 : 10e3                     bpl tasl7
                        
6343 : a203                     ldx #3
6345 :                  tlsr6
                                set_zx zp1,0
                       >            load_flag 0
6345 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6347 : 48              >            pha         ;use stack to load status
6348 : b549            >            lda zp1,x    ;load to indexed zeropage
634a : 9542            >            sta zpt,x
634c : 28              >            plp
                        
634d : 5642                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
634f : 08              >            php         ;save flags
6350 : b542            >            lda zpt,x
6352 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
6355 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6357 : 68              >            pla         ;load status
                       >            eor_flag 0
6358 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
635a : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
635d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
635f : ca                       dex
6360 : 10e3                     bpl tlsr6
6362 : a203                     ldx #3
6364 :                  tlsr7
                                set_zx zp1,$ff
                       >            load_flag $ff
6364 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6366 : 48              >            pha         ;use stack to load status
6367 : b549            >            lda zp1,x    ;load to indexed zeropage
6369 : 9542            >            sta zpt,x
636b : 28              >            plp
                        
636c : 5642                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
636e : 08              >            php         ;save flags
636f : b542            >            lda zpt,x
6371 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
6374 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6376 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6377 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6379 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
637c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
637e : ca                       dex
637f : 10e3                     bpl tlsr7
                        
6381 : a203                     ldx #3
6383 :                  trol6
                                set_zx zp1,0
                       >            load_flag 0
6383 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6385 : 48              >            pha         ;use stack to load status
6386 : b549            >            lda zp1,x    ;load to indexed zeropage
6388 : 9542            >            sta zpt,x
638a : 28              >            plp
                        
638b : 3642                     rol zpt,x
                                tst_zx rROL,fROL,0
638d : 08              >            php         ;save flags
638e : b542            >            lda zpt,x
6390 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
6393 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6395 : 68              >            pla         ;load status
                       >            eor_flag 0
6396 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6398 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
639b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
639d : ca                       dex
639e : 10e3                     bpl trol6
63a0 : a203                     ldx #3
63a2 :                  trol7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
63a2 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
63a4 : 48              >            pha         ;use stack to load status
63a5 : b549            >            lda zp1,x    ;load to indexed zeropage
63a7 : 9542            >            sta zpt,x
63a9 : 28              >            plp
                        
63aa : 3642                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
63ac : 08              >            php         ;save flags
63ad : b542            >            lda zpt,x
63af : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
63b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
63b4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
63b5 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
63b7 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
63ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
63bc : ca                       dex
63bd : 10e3                     bpl trol7
                        
63bf : a203                     ldx #3
63c1 :                  trolc6
                                set_zx zp1,fc
                       >            load_flag fc
63c1 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
63c3 : 48              >            pha         ;use stack to load status
63c4 : b549            >            lda zp1,x    ;load to indexed zeropage
63c6 : 9542            >            sta zpt,x
63c8 : 28              >            plp
                        
63c9 : 3642                     rol zpt,x
                                tst_zx rROLc,fROLc,0
63cb : 08              >            php         ;save flags
63cc : b542            >            lda zpt,x
63ce : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
63d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
63d3 : 68              >            pla         ;load status
                       >            eor_flag 0
63d4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
63d6 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
63d9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
63db : ca                       dex
63dc : 10e3                     bpl trolc6
63de : a203                     ldx #3
63e0 :                  trolc7
                                set_zx zp1,$ff
                       >            load_flag $ff
63e0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
63e2 : 48              >            pha         ;use stack to load status
63e3 : b549            >            lda zp1,x    ;load to indexed zeropage
63e5 : 9542            >            sta zpt,x
63e7 : 28              >            plp
                        
63e8 : 3642                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
63ea : 08              >            php         ;save flags
63eb : b542            >            lda zpt,x
63ed : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
63f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
63f2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
63f3 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
63f5 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
63f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
63fa : ca                       dex
63fb : 10e3                     bpl trolc7
                        
63fd : a203                     ldx #3
63ff :                  tror6
                                set_zx zp1,0
                       >            load_flag 0
63ff : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6401 : 48              >            pha         ;use stack to load status
6402 : b549            >            lda zp1,x    ;load to indexed zeropage
6404 : 9542            >            sta zpt,x
6406 : 28              >            plp
                        
6407 : 7642                     ror zpt,x
                                tst_zx rROR,fROR,0
6409 : 08              >            php         ;save flags
640a : b542            >            lda zpt,x
640c : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
640f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6411 : 68              >            pla         ;load status
                       >            eor_flag 0
6412 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6414 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
6417 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6419 : ca                       dex
641a : 10e3                     bpl tror6
641c : a203                     ldx #3
641e :                  tror7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
641e : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
6420 : 48              >            pha         ;use stack to load status
6421 : b549            >            lda zp1,x    ;load to indexed zeropage
6423 : 9542            >            sta zpt,x
6425 : 28              >            plp
                        
6426 : 7642                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
6428 : 08              >            php         ;save flags
6429 : b542            >            lda zpt,x
642b : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
642e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6430 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6431 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6433 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
6436 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6438 : ca                       dex
6439 : 10e3                     bpl tror7
                        
643b : a203                     ldx #3
643d :                  trorc6
                                set_zx zp1,fc
                       >            load_flag fc
643d : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
643f : 48              >            pha         ;use stack to load status
6440 : b549            >            lda zp1,x    ;load to indexed zeropage
6442 : 9542            >            sta zpt,x
6444 : 28              >            plp
                        
6445 : 7642                     ror zpt,x
                                tst_zx rRORc,fRORc,0
6447 : 08              >            php         ;save flags
6448 : b542            >            lda zpt,x
644a : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
644d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
644f : 68              >            pla         ;load status
                       >            eor_flag 0
6450 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6452 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
6455 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6457 : ca                       dex
6458 : 10e3                     bpl trorc6
645a : a203                     ldx #3
645c :                  trorc7
                                set_zx zp1,$ff
                       >            load_flag $ff
645c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
645e : 48              >            pha         ;use stack to load status
645f : b549            >            lda zp1,x    ;load to indexed zeropage
6461 : 9542            >            sta zpt,x
6463 : 28              >            plp
                        
6464 : 7642                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
6466 : 08              >            php         ;save flags
6467 : b542            >            lda zpt,x
6469 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
646c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
646e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
646f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6471 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
6474 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6476 : ca                       dex
6477 : 10e3                     bpl trorc7
                                next_test
6479 : ad0002          >            lda test_case   ;previous test
647c : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
647e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0021 =                 >test_num = test_num + 1
6480 : a921            >            lda #test_num   ;*** next tests' number
6482 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - abs indexed
6485 : a203                     ldx #3
6487 :                  tasl8
                                set_absx zp1,0
                       >            load_flag 0
6487 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6489 : 48              >            pha         ;use stack to load status
648a : b549            >            lda zp1,x    ;load to indexed memory
648c : 9d0302          >            sta abst,x
648f : 28              >            plp
                        
6490 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
6493 : 08              >            php         ;save flags
6494 : bd0302          >            lda abst,x
6497 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
649a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
649c : 68              >            pla         ;load status
                       >            eor_flag 0
649d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
649f : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
64a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
64a4 : ca                       dex
64a5 : 10e0                     bpl tasl8
64a7 : a203                     ldx #3
64a9 :                  tasl9
                                set_absx zp1,$ff
                       >            load_flag $ff
64a9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
64ab : 48              >            pha         ;use stack to load status
64ac : b549            >            lda zp1,x    ;load to indexed memory
64ae : 9d0302          >            sta abst,x
64b1 : 28              >            plp
                        
64b2 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
64b5 : 08              >            php         ;save flags
64b6 : bd0302          >            lda abst,x
64b9 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
64bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
64be : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
64bf : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
64c1 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
64c4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
64c6 : ca                       dex
64c7 : 10e0                     bpl tasl9
                        
64c9 : a203                     ldx #3
64cb :                  tlsr8
                                set_absx zp1,0
                       >            load_flag 0
64cb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
64cd : 48              >            pha         ;use stack to load status
64ce : b549            >            lda zp1,x    ;load to indexed memory
64d0 : 9d0302          >            sta abst,x
64d3 : 28              >            plp
                        
64d4 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
64d7 : 08              >            php         ;save flags
64d8 : bd0302          >            lda abst,x
64db : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
64de : d0fe            >        bne *           ;failed not equal (non zero)
                       >
64e0 : 68              >            pla         ;load status
                       >            eor_flag 0
64e1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
64e3 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
64e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
64e8 : ca                       dex
64e9 : 10e0                     bpl tlsr8
64eb : a203                     ldx #3
64ed :                  tlsr9
                                set_absx zp1,$ff
                       >            load_flag $ff
64ed : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
64ef : 48              >            pha         ;use stack to load status
64f0 : b549            >            lda zp1,x    ;load to indexed memory
64f2 : 9d0302          >            sta abst,x
64f5 : 28              >            plp
                        
64f6 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
64f9 : 08              >            php         ;save flags
64fa : bd0302          >            lda abst,x
64fd : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
6500 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6502 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6503 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6505 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
6508 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
650a : ca                       dex
650b : 10e0                     bpl tlsr9
                        
650d : a203                     ldx #3
650f :                  trol8
                                set_absx zp1,0
                       >            load_flag 0
650f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6511 : 48              >            pha         ;use stack to load status
6512 : b549            >            lda zp1,x    ;load to indexed memory
6514 : 9d0302          >            sta abst,x
6517 : 28              >            plp
                        
6518 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
651b : 08              >            php         ;save flags
651c : bd0302          >            lda abst,x
651f : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
6522 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6524 : 68              >            pla         ;load status
                       >            eor_flag 0
6525 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6527 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
652a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
652c : ca                       dex
652d : 10e0                     bpl trol8
652f : a203                     ldx #3
6531 :                  trol9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
6531 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
6533 : 48              >            pha         ;use stack to load status
6534 : b549            >            lda zp1,x    ;load to indexed memory
6536 : 9d0302          >            sta abst,x
6539 : 28              >            plp
                        
653a : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
653d : 08              >            php         ;save flags
653e : bd0302          >            lda abst,x
6541 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
6544 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6546 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6547 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6549 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
654c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
654e : ca                       dex
654f : 10e0                     bpl trol9
                        
6551 : a203                     ldx #3
6553 :                  trolc8
                                set_absx zp1,fc
                       >            load_flag fc
6553 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
6555 : 48              >            pha         ;use stack to load status
6556 : b549            >            lda zp1,x    ;load to indexed memory
6558 : 9d0302          >            sta abst,x
655b : 28              >            plp
                        
655c : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
655f : 08              >            php         ;save flags
6560 : bd0302          >            lda abst,x
6563 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
6566 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6568 : 68              >            pla         ;load status
                       >            eor_flag 0
6569 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
656b : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
656e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6570 : ca                       dex
6571 : 10e0                     bpl trolc8
6573 : a203                     ldx #3
6575 :                  trolc9
                                set_absx zp1,$ff
                       >            load_flag $ff
6575 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6577 : 48              >            pha         ;use stack to load status
6578 : b549            >            lda zp1,x    ;load to indexed memory
657a : 9d0302          >            sta abst,x
657d : 28              >            plp
                        
657e : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
6581 : 08              >            php         ;save flags
6582 : bd0302          >            lda abst,x
6585 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
6588 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
658a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
658b : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
658d : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
6590 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6592 : ca                       dex
6593 : 10e0                     bpl trolc9
                        
6595 : a203                     ldx #3
6597 :                  tror8
                                set_absx zp1,0
                       >            load_flag 0
6597 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6599 : 48              >            pha         ;use stack to load status
659a : b549            >            lda zp1,x    ;load to indexed memory
659c : 9d0302          >            sta abst,x
659f : 28              >            plp
                        
65a0 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
65a3 : 08              >            php         ;save flags
65a4 : bd0302          >            lda abst,x
65a7 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
65aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
65ac : 68              >            pla         ;load status
                       >            eor_flag 0
65ad : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
65af : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
65b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
65b4 : ca                       dex
65b5 : 10e0                     bpl tror8
65b7 : a203                     ldx #3
65b9 :                  tror9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
65b9 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
65bb : 48              >            pha         ;use stack to load status
65bc : b549            >            lda zp1,x    ;load to indexed memory
65be : 9d0302          >            sta abst,x
65c1 : 28              >            plp
                        
65c2 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
65c5 : 08              >            php         ;save flags
65c6 : bd0302          >            lda abst,x
65c9 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
65cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
65ce : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
65cf : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
65d1 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
65d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
65d6 : ca                       dex
65d7 : 10e0                     bpl tror9
                        
65d9 : a203                     ldx #3
65db :                  trorc8
                                set_absx zp1,fc
                       >            load_flag fc
65db : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
65dd : 48              >            pha         ;use stack to load status
65de : b549            >            lda zp1,x    ;load to indexed memory
65e0 : 9d0302          >            sta abst,x
65e3 : 28              >            plp
                        
65e4 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
65e7 : 08              >            php         ;save flags
65e8 : bd0302          >            lda abst,x
65eb : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
65ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
65f0 : 68              >            pla         ;load status
                       >            eor_flag 0
65f1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
65f3 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
65f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
65f8 : ca                       dex
65f9 : 10e0                     bpl trorc8
65fb : a203                     ldx #3
65fd :                  trorc9
                                set_absx zp1,$ff
                       >            load_flag $ff
65fd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
65ff : 48              >            pha         ;use stack to load status
6600 : b549            >            lda zp1,x    ;load to indexed memory
6602 : 9d0302          >            sta abst,x
6605 : 28              >            plp
                        
6606 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
6609 : 08              >            php         ;save flags
660a : bd0302          >            lda abst,x
660d : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
6610 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6612 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6613 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6615 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
6618 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
661a : ca                       dex
661b : 10e0                     bpl trorc9
                                next_test
661d : ad0002          >            lda test_case   ;previous test
6620 : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6622 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0022 =                 >test_num = test_num + 1
6624 : a922            >            lda #test_num   ;*** next tests' number
6626 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
6629 : a200                     ldx #0
662b : a97e                     lda #$7e
662d : 8542                     sta zpt
662f :                  tinc
                                set_stat 0
                       >            load_flag 0
662f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6631 : 48              >            pha         ;use stack to load status
6632 : 28              >            plp
                        
6633 : e642                     inc zpt
                                tst_z rINC,fINC,0
6635 : 08              >            php         ;save flags
6636 : a542            >            lda zpt
6638 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
663b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
663d : 68              >            pla         ;load status
                       >            eor_flag 0
663e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6640 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
6643 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6645 : e8                       inx
6646 : e002                     cpx #2
6648 : d004                     bne tinc1
664a : a9fe                     lda #$fe
664c : 8542                     sta zpt
664e : e005             tinc1   cpx #5
6650 : d0dd                     bne tinc
6652 : ca                       dex
6653 : e642                     inc zpt
6655 :                  tdec
                                set_stat 0
                       >            load_flag 0
6655 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6657 : 48              >            pha         ;use stack to load status
6658 : 28              >            plp
                        
6659 : c642                     dec zpt
                                tst_z rINC,fINC,0
665b : 08              >            php         ;save flags
665c : a542            >            lda zpt
665e : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
6661 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6663 : 68              >            pla         ;load status
                       >            eor_flag 0
6664 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6666 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
6669 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
666b : ca                       dex
666c : 300a                     bmi tdec1
666e : e001                     cpx #1
6670 : d0e3                     bne tdec
6672 : a981                     lda #$81
6674 : 8542                     sta zpt
6676 : d0dd                     bne tdec
6678 :                  tdec1
6678 : a200                     ldx #0
667a : a97e                     lda #$7e
667c : 8542                     sta zpt
667e :                  tinc10
                                set_stat $ff
                       >            load_flag $ff
667e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6680 : 48              >            pha         ;use stack to load status
6681 : 28              >            plp
                        
6682 : e642                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
6684 : 08              >            php         ;save flags
6685 : a542            >            lda zpt
6687 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
668a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
668c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
668d : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
668f : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
6692 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6694 : e8                       inx
6695 : e002                     cpx #2
6697 : d004                     bne tinc11
6699 : a9fe                     lda #$fe
669b : 8542                     sta zpt
669d : e005             tinc11  cpx #5
669f : d0dd                     bne tinc10
66a1 : ca                       dex
66a2 : e642                     inc zpt
66a4 :                  tdec10
                                set_stat $ff
                       >            load_flag $ff
66a4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
66a6 : 48              >            pha         ;use stack to load status
66a7 : 28              >            plp
                        
66a8 : c642                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
66aa : 08              >            php         ;save flags
66ab : a542            >            lda zpt
66ad : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
66b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
66b2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
66b3 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
66b5 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
66b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
66ba : ca                       dex
66bb : 300a                     bmi tdec11
66bd : e001                     cpx #1
66bf : d0e3                     bne tdec10
66c1 : a981                     lda #$81
66c3 : 8542                     sta zpt
66c5 : d0dd                     bne tdec10
66c7 :                  tdec11
                                next_test
66c7 : ad0002          >            lda test_case   ;previous test
66ca : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
66cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0023 =                 >test_num = test_num + 1
66ce : a923            >            lda #test_num   ;*** next tests' number
66d0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; absolute memory
66d3 : a200                     ldx #0
66d5 : a97e                     lda #$7e
66d7 : 8d0302                   sta abst
66da :                  tinc2
                                set_stat 0
                       >            load_flag 0
66da : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
66dc : 48              >            pha         ;use stack to load status
66dd : 28              >            plp
                        
66de : ee0302                   inc abst
                                tst_abs rINC,fINC,0
66e1 : 08              >            php         ;save flags
66e2 : ad0302          >            lda abst
66e5 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
66e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
66ea : 68              >            pla         ;load status
                       >            eor_flag 0
66eb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
66ed : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
66f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
66f2 : e8                       inx
66f3 : e002                     cpx #2
66f5 : d005                     bne tinc3
66f7 : a9fe                     lda #$fe
66f9 : 8d0302                   sta abst
66fc : e005             tinc3   cpx #5
66fe : d0da                     bne tinc2
6700 : ca                       dex
6701 : ee0302                   inc abst
6704 :                  tdec2
                                set_stat 0
                       >            load_flag 0
6704 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6706 : 48              >            pha         ;use stack to load status
6707 : 28              >            plp
                        
6708 : ce0302                   dec abst
                                tst_abs rINC,fINC,0
670b : 08              >            php         ;save flags
670c : ad0302          >            lda abst
670f : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
6712 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6714 : 68              >            pla         ;load status
                       >            eor_flag 0
6715 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6717 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
671a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
671c : ca                       dex
671d : 300b                     bmi tdec3
671f : e001                     cpx #1
6721 : d0e1                     bne tdec2
6723 : a981                     lda #$81
6725 : 8d0302                   sta abst
6728 : d0da                     bne tdec2
672a :                  tdec3
672a : a200                     ldx #0
672c : a97e                     lda #$7e
672e : 8d0302                   sta abst
6731 :                  tinc12
                                set_stat $ff
                       >            load_flag $ff
6731 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6733 : 48              >            pha         ;use stack to load status
6734 : 28              >            plp
                        
6735 : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
6738 : 08              >            php         ;save flags
6739 : ad0302          >            lda abst
673c : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
673f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6741 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6742 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6744 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
6747 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6749 : e8                       inx
674a : e002                     cpx #2
674c : d005                     bne tinc13
674e : a9fe                     lda #$fe
6750 : 8d0302                   sta abst
6753 : e005             tinc13   cpx #5
6755 : d0da                     bne tinc12
6757 : ca                       dex
6758 : ee0302                   inc abst
675b :                  tdec12
                                set_stat $ff
                       >            load_flag $ff
675b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
675d : 48              >            pha         ;use stack to load status
675e : 28              >            plp
                        
675f : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
6762 : 08              >            php         ;save flags
6763 : ad0302          >            lda abst
6766 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
6769 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
676b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
676c : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
676e : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
6771 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6773 : ca                       dex
6774 : 300b                     bmi tdec13
6776 : e001                     cpx #1
6778 : d0e1                     bne tdec12
677a : a981                     lda #$81
677c : 8d0302                   sta abst
677f : d0da                     bne tdec12
6781 :                  tdec13
                                next_test
6781 : ad0002          >            lda test_case   ;previous test
6784 : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6786 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0024 =                 >test_num = test_num + 1
6788 : a924            >            lda #test_num   ;*** next tests' number
678a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; zeropage indexed
678d : a200                     ldx #0
678f : a97e                     lda #$7e
6791 : 9542             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
6793 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6795 : 48              >            pha         ;use stack to load status
6796 : 28              >            plp
                        
6797 : f642                     inc zpt,x
                                tst_zx rINC,fINC,0
6799 : 08              >            php         ;save flags
679a : b542            >            lda zpt,x
679c : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
679f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
67a1 : 68              >            pla         ;load status
                       >            eor_flag 0
67a2 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
67a4 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
67a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
67a9 : b542                     lda zpt,x
67ab : e8                       inx
67ac : e002                     cpx #2
67ae : d002                     bne tinc5
67b0 : a9fe                     lda #$fe
67b2 : e005             tinc5   cpx #5
67b4 : d0db                     bne tinc4
67b6 : ca                       dex
67b7 : a902                     lda #2
67b9 : 9542             tdec4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
67bb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
67bd : 48              >            pha         ;use stack to load status
67be : 28              >            plp
                        
67bf : d642                     dec zpt,x
                                tst_zx rINC,fINC,0
67c1 : 08              >            php         ;save flags
67c2 : b542            >            lda zpt,x
67c4 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
67c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
67c9 : 68              >            pla         ;load status
                       >            eor_flag 0
67ca : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
67cc : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
67cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
67d1 : b542                     lda zpt,x
67d3 : ca                       dex
67d4 : 3008                     bmi tdec5
67d6 : e001                     cpx #1
67d8 : d0df                     bne tdec4
67da : a981                     lda #$81
67dc : d0db                     bne tdec4
67de :                  tdec5
67de : a200                     ldx #0
67e0 : a97e                     lda #$7e
67e2 : 9542             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
67e4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
67e6 : 48              >            pha         ;use stack to load status
67e7 : 28              >            plp
                        
67e8 : f642                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
67ea : 08              >            php         ;save flags
67eb : b542            >            lda zpt,x
67ed : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
67f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
67f2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
67f3 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
67f5 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
67f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
67fa : b542                     lda zpt,x
67fc : e8                       inx
67fd : e002                     cpx #2
67ff : d002                     bne tinc15
6801 : a9fe                     lda #$fe
6803 : e005             tinc15  cpx #5
6805 : d0db                     bne tinc14
6807 : ca                       dex
6808 : a902                     lda #2
680a : 9542             tdec14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
680c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
680e : 48              >            pha         ;use stack to load status
680f : 28              >            plp
                        
6810 : d642                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
6812 : 08              >            php         ;save flags
6813 : b542            >            lda zpt,x
6815 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
6818 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
681a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
681b : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
681d : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
6820 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6822 : b542                     lda zpt,x
6824 : ca                       dex
6825 : 3008                     bmi tdec15
6827 : e001                     cpx #1
6829 : d0df                     bne tdec14
682b : a981                     lda #$81
682d : d0db                     bne tdec14
682f :                  tdec15
                                next_test
682f : ad0002          >            lda test_case   ;previous test
6832 : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6834 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0025 =                 >test_num = test_num + 1
6836 : a925            >            lda #test_num   ;*** next tests' number
6838 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; memory indexed
683b : a200                     ldx #0
683d : a97e                     lda #$7e
683f : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
6842 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6844 : 48              >            pha         ;use stack to load status
6845 : 28              >            plp
                        
6846 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
6849 : 08              >            php         ;save flags
684a : bd0302          >            lda abst,x
684d : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
6850 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6852 : 68              >            pla         ;load status
                       >            eor_flag 0
6853 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6855 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
6858 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
685a : bd0302                   lda abst,x
685d : e8                       inx
685e : e002                     cpx #2
6860 : d002                     bne tinc7
6862 : a9fe                     lda #$fe
6864 : e005             tinc7   cpx #5
6866 : d0d7                     bne tinc6
6868 : ca                       dex
6869 : a902                     lda #2
686b : 9d0302           tdec6   sta abst,x
                                set_stat 0
                       >            load_flag 0
686e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6870 : 48              >            pha         ;use stack to load status
6871 : 28              >            plp
                        
6872 : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
6875 : 08              >            php         ;save flags
6876 : bd0302          >            lda abst,x
6879 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
687c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
687e : 68              >            pla         ;load status
                       >            eor_flag 0
687f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6881 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
6884 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6886 : bd0302                   lda abst,x
6889 : ca                       dex
688a : 3008                     bmi tdec7
688c : e001                     cpx #1
688e : d0db                     bne tdec6
6890 : a981                     lda #$81
6892 : d0d7                     bne tdec6
6894 :                  tdec7
6894 : a200                     ldx #0
6896 : a97e                     lda #$7e
6898 : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
689b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
689d : 48              >            pha         ;use stack to load status
689e : 28              >            plp
                        
689f : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
68a2 : 08              >            php         ;save flags
68a3 : bd0302          >            lda abst,x
68a6 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
68a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
68ab : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
68ac : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
68ae : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
68b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
68b3 : bd0302                   lda abst,x
68b6 : e8                       inx
68b7 : e002                     cpx #2
68b9 : d002                     bne tinc17
68bb : a9fe                     lda #$fe
68bd : e005             tinc17  cpx #5
68bf : d0d7                     bne tinc16
68c1 : ca                       dex
68c2 : a902                     lda #2
68c4 : 9d0302           tdec16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
68c7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
68c9 : 48              >            pha         ;use stack to load status
68ca : 28              >            plp
                        
68cb : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
68ce : 08              >            php         ;save flags
68cf : bd0302          >            lda abst,x
68d2 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
68d5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
68d7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
68d8 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
68da : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
68dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
68df : bd0302                   lda abst,x
68e2 : ca                       dex
68e3 : 3008                     bmi tdec17
68e5 : e001                     cpx #1
68e7 : d0db                     bne tdec16
68e9 : a981                     lda #$81
68eb : d0d7                     bne tdec16
68ed :                  tdec17
                                next_test
68ed : ad0002          >            lda test_case   ;previous test
68f0 : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
68f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0026 =                 >test_num = test_num + 1
68f4 : a926            >            lda #test_num   ;*** next tests' number
68f6 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
68f9 : a203                     ldx #3          ;immediate
68fb : b552             tand    lda zpAN,x
68fd : 8d0902                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
6900 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6902 : 48              >            pha         ;use stack to load status
6903 : bd5a02          >            lda absANa,x    ;precharge accu
6906 : 28              >            plp
                        
6907 : 200802                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
690a : 08              >            php         ;save flags
690b : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
690e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6910 : 68              >            pla         ;load status
                       >            eor_flag 0
6911 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6913 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6916 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6918 : ca                       dex
6919 : 10e0                     bpl tand
691b : a203                     ldx #3
691d : b552             tand1   lda zpAN,x
691f : 8d0902                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                       >            load_flag $ff
6922 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6924 : 48              >            pha         ;use stack to load status
6925 : bd5a02          >            lda absANa,x    ;precharge accu
6928 : 28              >            plp
                        
6929 : 200802                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
692c : 08              >            php         ;save flags
692d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6930 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6932 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6933 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6935 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6938 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
693a : ca                       dex
693b : 10e0                     bpl tand1
                        
693d : a203                     ldx #3      ;zp
693f : b552             tand2    lda zpAN,x
6941 : 8542                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
6943 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6945 : 48              >            pha         ;use stack to load status
6946 : bd5a02          >            lda absANa,x    ;precharge accu
6949 : 28              >            plp
                        
694a : 2542                     and zpt
                                tst_ax  absrlo,absflo,0
694c : 08              >            php         ;save flags
694d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6950 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6952 : 68              >            pla         ;load status
                       >            eor_flag 0
6953 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6955 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6958 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
695a : ca                       dex
695b : 10e2                     bpl tand2
695d : a203                     ldx #3
695f : b552             tand3   lda zpAN,x
6961 : 8542                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
6963 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6965 : 48              >            pha         ;use stack to load status
6966 : bd5a02          >            lda absANa,x    ;precharge accu
6969 : 28              >            plp
                        
696a : 2542                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
696c : 08              >            php         ;save flags
696d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6970 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6972 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6973 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6975 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6978 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
697a : ca                       dex
697b : 10e2                     bpl tand3
                        
697d : a203                     ldx #3      ;abs
697f : b552             tand4   lda zpAN,x
6981 : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
6984 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6986 : 48              >            pha         ;use stack to load status
6987 : bd5a02          >            lda absANa,x    ;precharge accu
698a : 28              >            plp
                        
698b : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
698e : 08              >            php         ;save flags
698f : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6992 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6994 : 68              >            pla         ;load status
                       >            eor_flag 0
6995 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6997 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
699a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
699c : ca                       dex
699d : 10e0                     bpl tand4
699f : a203                     ldx #3
69a1 : b552             tand5   lda zpAN,x
69a3 : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
69a6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
69a8 : 48              >            pha         ;use stack to load status
69a9 : bd5a02          >            lda absANa,x    ;precharge accu
69ac : 28              >            plp
                        
69ad : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
69b0 : 08              >            php         ;save flags
69b1 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
69b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
69b6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
69b7 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
69b9 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
69bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
69be : ca                       dex
69bf : 1002                     bpl tand6
                        
69c1 : a203                     ldx #3      ;zp,x
69c3 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
69c3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
69c5 : 48              >            pha         ;use stack to load status
69c6 : bd5a02          >            lda absANa,x    ;precharge accu
69c9 : 28              >            plp
                        
69ca : 3552                     and zpAN,x
                                tst_ax  absrlo,absflo,0
69cc : 08              >            php         ;save flags
69cd : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
69d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
69d2 : 68              >            pla         ;load status
                       >            eor_flag 0
69d3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
69d5 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
69d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
69da : ca                       dex
69db : 10e6                     bpl tand6
69dd : a203                     ldx #3
69df :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
69df : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
69e1 : 48              >            pha         ;use stack to load status
69e2 : bd5a02          >            lda absANa,x    ;precharge accu
69e5 : 28              >            plp
                        
69e6 : 3552                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
69e8 : 08              >            php         ;save flags
69e9 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
69ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
69ee : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
69ef : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
69f1 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
69f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
69f6 : ca                       dex
69f7 : 10e6                     bpl tand7
                        
69f9 : a203                     ldx #3      ;abs,x
69fb :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
69fb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
69fd : 48              >            pha         ;use stack to load status
69fe : bd5a02          >            lda absANa,x    ;precharge accu
6a01 : 28              >            plp
                        
6a02 : 3d4e02                   and absAN,x
                                tst_ax  absrlo,absflo,0
6a05 : 08              >            php         ;save flags
6a06 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6a09 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6a0b : 68              >            pla         ;load status
                       >            eor_flag 0
6a0c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6a0e : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6a11 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6a13 : ca                       dex
6a14 : 10e5                     bpl tand8
6a16 : a203                     ldx #3
6a18 :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
6a18 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6a1a : 48              >            pha         ;use stack to load status
6a1b : bd5a02          >            lda absANa,x    ;precharge accu
6a1e : 28              >            plp
                        
6a1f : 3d4e02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
6a22 : 08              >            php         ;save flags
6a23 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6a26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6a28 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6a29 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6a2b : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6a2e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6a30 : ca                       dex
6a31 : 10e5                     bpl tand9
                        
6a33 : a003                     ldy #3      ;abs,y
6a35 :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
6a35 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6a37 : 48              >            pha         ;use stack to load status
6a38 : b95a02          >            lda absANa,y    ;precharge accu
6a3b : 28              >            plp
                        
6a3c : 394e02                   and absAN,y
                                tst_ay  absrlo,absflo,0
6a3f : 08              >            php         ;save flags
6a40 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6a43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6a45 : 68              >            pla         ;load status
                       >            eor_flag 0
6a46 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6a48 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6a4b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6a4d : 88                       dey
6a4e : 10e5                     bpl tand10
6a50 : a003                     ldy #3
6a52 :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
6a52 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6a54 : 48              >            pha         ;use stack to load status
6a55 : b95a02          >            lda absANa,y    ;precharge accu
6a58 : 28              >            plp
                        
6a59 : 394e02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
6a5c : 08              >            php         ;save flags
6a5d : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6a60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6a62 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6a63 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6a65 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6a68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6a6a : 88                       dey
6a6b : 10e5                     bpl tand11
                        
6a6d : a206                     ldx #6      ;(zp,x)
6a6f : a003                     ldy #3
6a71 :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
6a71 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6a73 : 48              >            pha         ;use stack to load status
6a74 : b95a02          >            lda absANa,y    ;precharge accu
6a77 : 28              >            plp
                        
6a78 : 2170                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
6a7a : 08              >            php         ;save flags
6a7b : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6a7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6a80 : 68              >            pla         ;load status
                       >            eor_flag 0
6a81 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6a83 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6a86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6a88 : ca                       dex
6a89 : ca                       dex
6a8a : 88                       dey
6a8b : 10e4                     bpl tand12
6a8d : a206                     ldx #6
6a8f : a003                     ldy #3
6a91 :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
6a91 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6a93 : 48              >            pha         ;use stack to load status
6a94 : b95a02          >            lda absANa,y    ;precharge accu
6a97 : 28              >            plp
                        
6a98 : 2170                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
6a9a : 08              >            php         ;save flags
6a9b : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6a9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6aa0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6aa1 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6aa3 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6aa6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6aa8 : ca                       dex
6aa9 : ca                       dex
6aaa : 88                       dey
6aab : 10e4                     bpl tand13
                        
6aad : a003                     ldy #3      ;(zp),y
6aaf :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
6aaf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6ab1 : 48              >            pha         ;use stack to load status
6ab2 : b95a02          >            lda absANa,y    ;precharge accu
6ab5 : 28              >            plp
                        
6ab6 : 3170                     and (indAN),y
                                tst_ay  absrlo,absflo,0
6ab8 : 08              >            php         ;save flags
6ab9 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6abc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6abe : 68              >            pla         ;load status
                       >            eor_flag 0
6abf : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6ac1 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6ac4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6ac6 : 88                       dey
6ac7 : 10e6                     bpl tand14
6ac9 : a003                     ldy #3
6acb :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
6acb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6acd : 48              >            pha         ;use stack to load status
6ace : b95a02          >            lda absANa,y    ;precharge accu
6ad1 : 28              >            plp
                        
6ad2 : 3170                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
6ad4 : 08              >            php         ;save flags
6ad5 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6ad8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6ada : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6adb : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6add : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6ae0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6ae2 : 88                       dey
6ae3 : 10e6                     bpl tand15
                                next_test
6ae5 : ad0002          >            lda test_case   ;previous test
6ae8 : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6aea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0027 =                 >test_num = test_num + 1
6aec : a927            >            lda #test_num   ;*** next tests' number
6aee : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; EOR
6af1 : a203                     ldx #3          ;immediate - self modifying code
6af3 : b556             teor    lda zpEO,x
6af5 : 8d0c02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
6af8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6afa : 48              >            pha         ;use stack to load status
6afb : bd5e02          >            lda absEOa,x    ;precharge accu
6afe : 28              >            plp
                        
6aff : 200b02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
6b02 : 08              >            php         ;save flags
6b03 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6b06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6b08 : 68              >            pla         ;load status
                       >            eor_flag 0
6b09 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6b0b : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6b0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6b10 : ca                       dex
6b11 : 10e0                     bpl teor
6b13 : a203                     ldx #3
6b15 : b556             teor1   lda zpEO,x
6b17 : 8d0c02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6b1a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6b1c : 48              >            pha         ;use stack to load status
6b1d : bd5e02          >            lda absEOa,x    ;precharge accu
6b20 : 28              >            plp
                        
6b21 : 200b02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
6b24 : 08              >            php         ;save flags
6b25 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6b28 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6b2a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6b2b : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6b2d : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6b30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6b32 : ca                       dex
6b33 : 10e0                     bpl teor1
                        
6b35 : a203                     ldx #3      ;zp
6b37 : b556             teor2    lda zpEO,x
6b39 : 8542                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
6b3b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6b3d : 48              >            pha         ;use stack to load status
6b3e : bd5e02          >            lda absEOa,x    ;precharge accu
6b41 : 28              >            plp
                        
6b42 : 4542                     eor zpt
                                tst_ax  absrlo,absflo,0
6b44 : 08              >            php         ;save flags
6b45 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6b48 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6b4a : 68              >            pla         ;load status
                       >            eor_flag 0
6b4b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6b4d : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6b50 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6b52 : ca                       dex
6b53 : 10e2                     bpl teor2
6b55 : a203                     ldx #3
6b57 : b556             teor3   lda zpEO,x
6b59 : 8542                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6b5b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6b5d : 48              >            pha         ;use stack to load status
6b5e : bd5e02          >            lda absEOa,x    ;precharge accu
6b61 : 28              >            plp
                        
6b62 : 4542                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
6b64 : 08              >            php         ;save flags
6b65 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6b68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6b6a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6b6b : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6b6d : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6b70 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6b72 : ca                       dex
6b73 : 10e2                     bpl teor3
                        
6b75 : a203                     ldx #3      ;abs
6b77 : b556             teor4   lda zpEO,x
6b79 : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
6b7c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6b7e : 48              >            pha         ;use stack to load status
6b7f : bd5e02          >            lda absEOa,x    ;precharge accu
6b82 : 28              >            plp
                        
6b83 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
6b86 : 08              >            php         ;save flags
6b87 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6b8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6b8c : 68              >            pla         ;load status
                       >            eor_flag 0
6b8d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6b8f : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6b92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6b94 : ca                       dex
6b95 : 10e0                     bpl teor4
6b97 : a203                     ldx #3
6b99 : b556             teor5   lda zpEO,x
6b9b : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6b9e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6ba0 : 48              >            pha         ;use stack to load status
6ba1 : bd5e02          >            lda absEOa,x    ;precharge accu
6ba4 : 28              >            plp
                        
6ba5 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
6ba8 : 08              >            php         ;save flags
6ba9 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6bac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6bae : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6baf : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6bb1 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6bb4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6bb6 : ca                       dex
6bb7 : 1002                     bpl teor6
                        
6bb9 : a203                     ldx #3      ;zp,x
6bbb :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
6bbb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6bbd : 48              >            pha         ;use stack to load status
6bbe : bd5e02          >            lda absEOa,x    ;precharge accu
6bc1 : 28              >            plp
                        
6bc2 : 5556                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
6bc4 : 08              >            php         ;save flags
6bc5 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6bc8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6bca : 68              >            pla         ;load status
                       >            eor_flag 0
6bcb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6bcd : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6bd0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6bd2 : ca                       dex
6bd3 : 10e6                     bpl teor6
6bd5 : a203                     ldx #3
6bd7 :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6bd7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6bd9 : 48              >            pha         ;use stack to load status
6bda : bd5e02          >            lda absEOa,x    ;precharge accu
6bdd : 28              >            plp
                        
6bde : 5556                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
6be0 : 08              >            php         ;save flags
6be1 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6be4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6be6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6be7 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6be9 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6bec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6bee : ca                       dex
6bef : 10e6                     bpl teor7
                        
6bf1 : a203                     ldx #3      ;abs,x
6bf3 :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
6bf3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6bf5 : 48              >            pha         ;use stack to load status
6bf6 : bd5e02          >            lda absEOa,x    ;precharge accu
6bf9 : 28              >            plp
                        
6bfa : 5d5202                   eor absEO,x
                                tst_ax  absrlo,absflo,0
6bfd : 08              >            php         ;save flags
6bfe : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6c01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6c03 : 68              >            pla         ;load status
                       >            eor_flag 0
6c04 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6c06 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6c09 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6c0b : ca                       dex
6c0c : 10e5                     bpl teor8
6c0e : a203                     ldx #3
6c10 :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6c10 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6c12 : 48              >            pha         ;use stack to load status
6c13 : bd5e02          >            lda absEOa,x    ;precharge accu
6c16 : 28              >            plp
                        
6c17 : 5d5202                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
6c1a : 08              >            php         ;save flags
6c1b : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6c1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6c20 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6c21 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6c23 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6c26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6c28 : ca                       dex
6c29 : 10e5                     bpl teor9
                        
6c2b : a003                     ldy #3      ;abs,y
6c2d :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
6c2d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6c2f : 48              >            pha         ;use stack to load status
6c30 : b95e02          >            lda absEOa,y    ;precharge accu
6c33 : 28              >            plp
                        
6c34 : 595202                   eor absEO,y
                                tst_ay  absrlo,absflo,0
6c37 : 08              >            php         ;save flags
6c38 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6c3b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6c3d : 68              >            pla         ;load status
                       >            eor_flag 0
6c3e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6c40 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6c43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6c45 : 88                       dey
6c46 : 10e5                     bpl teor10
6c48 : a003                     ldy #3
6c4a :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
6c4a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6c4c : 48              >            pha         ;use stack to load status
6c4d : b95e02          >            lda absEOa,y    ;precharge accu
6c50 : 28              >            plp
                        
6c51 : 595202                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
6c54 : 08              >            php         ;save flags
6c55 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6c58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6c5a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6c5b : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6c5d : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6c60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6c62 : 88                       dey
6c63 : 10e5                     bpl teor11
                        
6c65 : a206                     ldx #6      ;(zp,x)
6c67 : a003                     ldy #3
6c69 :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
6c69 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6c6b : 48              >            pha         ;use stack to load status
6c6c : b95e02          >            lda absEOa,y    ;precharge accu
6c6f : 28              >            plp
                        
6c70 : 4178                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
6c72 : 08              >            php         ;save flags
6c73 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6c76 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6c78 : 68              >            pla         ;load status
                       >            eor_flag 0
6c79 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6c7b : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6c7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6c80 : ca                       dex
6c81 : ca                       dex
6c82 : 88                       dey
6c83 : 10e4                     bpl teor12
6c85 : a206                     ldx #6
6c87 : a003                     ldy #3
6c89 :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
6c89 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6c8b : 48              >            pha         ;use stack to load status
6c8c : b95e02          >            lda absEOa,y    ;precharge accu
6c8f : 28              >            plp
                        
6c90 : 4178                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
6c92 : 08              >            php         ;save flags
6c93 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6c96 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6c98 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6c99 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6c9b : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6c9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6ca0 : ca                       dex
6ca1 : ca                       dex
6ca2 : 88                       dey
6ca3 : 10e4                     bpl teor13
                        
6ca5 : a003                     ldy #3      ;(zp),y
6ca7 :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
6ca7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6ca9 : 48              >            pha         ;use stack to load status
6caa : b95e02          >            lda absEOa,y    ;precharge accu
6cad : 28              >            plp
                        
6cae : 5178                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
6cb0 : 08              >            php         ;save flags
6cb1 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6cb4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6cb6 : 68              >            pla         ;load status
                       >            eor_flag 0
6cb7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6cb9 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6cbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6cbe : 88                       dey
6cbf : 10e6                     bpl teor14
6cc1 : a003                     ldy #3
6cc3 :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
6cc3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6cc5 : 48              >            pha         ;use stack to load status
6cc6 : b95e02          >            lda absEOa,y    ;precharge accu
6cc9 : 28              >            plp
                        
6cca : 5178                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
6ccc : 08              >            php         ;save flags
6ccd : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6cd0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6cd2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6cd3 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6cd5 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6cd8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6cda : 88                       dey
6cdb : 10e6                     bpl teor15
                                next_test
6cdd : ad0002          >            lda test_case   ;previous test
6ce0 : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6ce2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0028 =                 >test_num = test_num + 1
6ce4 : a928            >            lda #test_num   ;*** next tests' number
6ce6 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; OR
6ce9 : a203                     ldx #3          ;immediate - self modifying code
6ceb : b54e             tora    lda zpOR,x
6ced : 8d0f02                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                       >            load_flag 0
6cf0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6cf2 : 48              >            pha         ;use stack to load status
6cf3 : bd5602          >            lda absORa,x    ;precharge accu
6cf6 : 28              >            plp
                        
6cf7 : 200e02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
6cfa : 08              >            php         ;save flags
6cfb : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6cfe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6d00 : 68              >            pla         ;load status
                       >            eor_flag 0
6d01 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6d03 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6d06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6d08 : ca                       dex
6d09 : 10e0                     bpl tora
6d0b : a203                     ldx #3
6d0d : b54e             tora1   lda zpOR,x
6d0f : 8d0f02                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
6d12 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6d14 : 48              >            pha         ;use stack to load status
6d15 : bd5602          >            lda absORa,x    ;precharge accu
6d18 : 28              >            plp
                        
6d19 : 200e02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
6d1c : 08              >            php         ;save flags
6d1d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6d20 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6d22 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6d23 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6d25 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6d28 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6d2a : ca                       dex
6d2b : 10e0                     bpl tora1
                        
6d2d : a203                     ldx #3      ;zp
6d2f : b54e             tora2   lda zpOR,x
6d31 : 8542                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
6d33 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6d35 : 48              >            pha         ;use stack to load status
6d36 : bd5602          >            lda absORa,x    ;precharge accu
6d39 : 28              >            plp
                        
6d3a : 0542                     ora zpt
                                tst_ax  absrlo,absflo,0
6d3c : 08              >            php         ;save flags
6d3d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6d40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6d42 : 68              >            pla         ;load status
                       >            eor_flag 0
6d43 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6d45 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6d48 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6d4a : ca                       dex
6d4b : 10e2                     bpl tora2
6d4d : a203                     ldx #3
6d4f : b54e             tora3   lda zpOR,x
6d51 : 8542                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
6d53 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6d55 : 48              >            pha         ;use stack to load status
6d56 : bd5602          >            lda absORa,x    ;precharge accu
6d59 : 28              >            plp
                        
6d5a : 0542                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
6d5c : 08              >            php         ;save flags
6d5d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6d60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6d62 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6d63 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6d65 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6d68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6d6a : ca                       dex
6d6b : 10e2                     bpl tora3
                        
6d6d : a203                     ldx #3      ;abs
6d6f : b54e             tora4   lda zpOR,x
6d71 : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
6d74 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6d76 : 48              >            pha         ;use stack to load status
6d77 : bd5602          >            lda absORa,x    ;precharge accu
6d7a : 28              >            plp
                        
6d7b : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
6d7e : 08              >            php         ;save flags
6d7f : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6d82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6d84 : 68              >            pla         ;load status
                       >            eor_flag 0
6d85 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6d87 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6d8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6d8c : ca                       dex
6d8d : 10e0                     bpl tora4
6d8f : a203                     ldx #3
6d91 : b54e             tora5   lda zpOR,x
6d93 : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
6d96 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6d98 : 48              >            pha         ;use stack to load status
6d99 : bd5602          >            lda absORa,x    ;precharge accu
6d9c : 28              >            plp
                        
6d9d : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
6da0 : 08              >            php         ;save flags
6da1 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6da4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6da6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6da7 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6da9 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6dac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6dae : ca                       dex
6daf : 1002                     bpl tora6
                        
6db1 : a203                     ldx #3      ;zp,x
6db3 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
6db3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6db5 : 48              >            pha         ;use stack to load status
6db6 : bd5602          >            lda absORa,x    ;precharge accu
6db9 : 28              >            plp
                        
6dba : 154e                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
6dbc : 08              >            php         ;save flags
6dbd : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6dc0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6dc2 : 68              >            pla         ;load status
                       >            eor_flag 0
6dc3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6dc5 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6dc8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6dca : ca                       dex
6dcb : 10e6                     bpl tora6
6dcd : a203                     ldx #3
6dcf :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
6dcf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6dd1 : 48              >            pha         ;use stack to load status
6dd2 : bd5602          >            lda absORa,x    ;precharge accu
6dd5 : 28              >            plp
                        
6dd6 : 154e                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
6dd8 : 08              >            php         ;save flags
6dd9 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6ddc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6dde : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6ddf : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6de1 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6de4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6de6 : ca                       dex
6de7 : 10e6                     bpl tora7
                        
6de9 : a203                     ldx #3      ;abs,x
6deb :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
6deb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6ded : 48              >            pha         ;use stack to load status
6dee : bd5602          >            lda absORa,x    ;precharge accu
6df1 : 28              >            plp
                        
6df2 : 1d4a02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
6df5 : 08              >            php         ;save flags
6df6 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6df9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6dfb : 68              >            pla         ;load status
                       >            eor_flag 0
6dfc : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6dfe : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6e01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6e03 : ca                       dex
6e04 : 10e5                     bpl tora8
6e06 : a203                     ldx #3
6e08 :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
6e08 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6e0a : 48              >            pha         ;use stack to load status
6e0b : bd5602          >            lda absORa,x    ;precharge accu
6e0e : 28              >            plp
                        
6e0f : 1d4a02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
6e12 : 08              >            php         ;save flags
6e13 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
6e16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6e18 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6e19 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6e1b : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6e1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6e20 : ca                       dex
6e21 : 10e5                     bpl tora9
                        
6e23 : a003                     ldy #3      ;abs,y
6e25 :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
6e25 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6e27 : 48              >            pha         ;use stack to load status
6e28 : b95602          >            lda absORa,y    ;precharge accu
6e2b : 28              >            plp
                        
6e2c : 194a02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
6e2f : 08              >            php         ;save flags
6e30 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6e33 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6e35 : 68              >            pla         ;load status
                       >            eor_flag 0
6e36 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6e38 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6e3b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6e3d : 88                       dey
6e3e : 10e5                     bpl tora10
6e40 : a003                     ldy #3
6e42 :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
6e42 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6e44 : 48              >            pha         ;use stack to load status
6e45 : b95602          >            lda absORa,y    ;precharge accu
6e48 : 28              >            plp
                        
6e49 : 194a02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
6e4c : 08              >            php         ;save flags
6e4d : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6e50 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6e52 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6e53 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6e55 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6e58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6e5a : 88                       dey
6e5b : 10e5                     bpl tora11
                        
6e5d : a206                     ldx #6      ;(zp,x)
6e5f : a003                     ldy #3
6e61 :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
6e61 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6e63 : 48              >            pha         ;use stack to load status
6e64 : b95602          >            lda absORa,y    ;precharge accu
6e67 : 28              >            plp
                        
6e68 : 0180                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
6e6a : 08              >            php         ;save flags
6e6b : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6e6e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6e70 : 68              >            pla         ;load status
                       >            eor_flag 0
6e71 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6e73 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6e76 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6e78 : ca                       dex
6e79 : ca                       dex
6e7a : 88                       dey
6e7b : 10e4                     bpl tora12
6e7d : a206                     ldx #6
6e7f : a003                     ldy #3
6e81 :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
6e81 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6e83 : 48              >            pha         ;use stack to load status
6e84 : b95602          >            lda absORa,y    ;precharge accu
6e87 : 28              >            plp
                        
6e88 : 0180                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
6e8a : 08              >            php         ;save flags
6e8b : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6e8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6e90 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6e91 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6e93 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6e96 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6e98 : ca                       dex
6e99 : ca                       dex
6e9a : 88                       dey
6e9b : 10e4                     bpl tora13
                        
6e9d : a003                     ldy #3      ;(zp),y
6e9f :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
6e9f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6ea1 : 48              >            pha         ;use stack to load status
6ea2 : b95602          >            lda absORa,y    ;precharge accu
6ea5 : 28              >            plp
                        
6ea6 : 1180                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
6ea8 : 08              >            php         ;save flags
6ea9 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6eac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6eae : 68              >            pla         ;load status
                       >            eor_flag 0
6eaf : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6eb1 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6eb4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6eb6 : 88                       dey
6eb7 : 10e6                     bpl tora14
6eb9 : a003                     ldy #3
6ebb :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
6ebb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6ebd : 48              >            pha         ;use stack to load status
6ebe : b95602          >            lda absORa,y    ;precharge accu
6ec1 : 28              >            plp
                        
6ec2 : 1180                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
6ec4 : 08              >            php         ;save flags
6ec5 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6ec8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
6eca : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6ecb : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6ecd : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
6ed0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
6ed2 : 88                       dey
6ed3 : 10e6                     bpl tora15
                            if I_flag = 3
6ed5 : 58                       cli
                            endif
                                next_test
6ed6 : ad0002          >            lda test_case   ;previous test
6ed9 : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6edb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0029 =                 >test_num = test_num + 1
6edd : a929            >            lda #test_num   ;*** next tests' number
6edf : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
6ee2 : d8                       cld
6ee3 : a244                     ldx #ad2        ;for indexed test
6ee5 : a0ff                     ldy #$ff        ;max range
6ee7 : a900                     lda #0          ;start with adding zeroes & no carry
6ee9 : 8542                     sta adfc        ;carry in - for diag
6eeb : 8543                     sta ad1         ;operand 1 - accumulator
6eed : 8544                     sta ad2         ;operand 2 - memory or immediate
6eef : 8d0302                   sta ada2        ;non zp
6ef2 : 8545                     sta adrl        ;expected result bits 0-7
6ef4 : 8546                     sta adrh        ;expected result bit 8 (carry out)
6ef6 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
6ef8 : 8548                     sta sb2
6efa : 8d0402                   sta sba2        ;non zp
6efd : a902                     lda #2          ;expected Z-flag
6eff : 8547                     sta adrf
6f01 : 18               tadd    clc             ;test with carry clear
6f02 : 207c71                   jsr chkadd
6f05 : e642                     inc adfc        ;now with carry
6f07 : e645                     inc adrl        ;result +1
6f09 : 08                       php             ;save N & Z from low result
6f0a : 08                       php
6f0b : 68                       pla             ;accu holds expected flags
6f0c : 2982                     and #$82        ;mask N & Z
6f0e : 28                       plp
6f0f : d002                     bne tadd1
6f11 : e646                     inc adrh        ;result bit 8 - carry
6f13 : 0546             tadd1   ora adrh        ;merge C to expected flags
6f15 : 8547                     sta adrf        ;save expected flags except overflow
6f17 : 38                       sec             ;test with carry set
6f18 : 207c71                   jsr chkadd
6f1b : c642                     dec adfc        ;same for operand +1 but no carry
6f1d : e643                     inc ad1
6f1f : d0e0                     bne tadd        ;iterate op1
6f21 : a900                     lda #0          ;preset result to op2 when op1 = 0
6f23 : 8546                     sta adrh
6f25 : ee0302                   inc ada2
6f28 : e644                     inc ad2
6f2a : 08                       php             ;save NZ as operand 2 becomes the new result
6f2b : 68                       pla
6f2c : 2982                     and #$82        ;mask N00000Z0
6f2e : 8547                     sta adrf        ;no need to check carry as we are adding to 0
6f30 : c648                     dec sb2         ;complement subtract operand 2
6f32 : ce0402                   dec sba2
6f35 : a544                     lda ad2
6f37 : 8545                     sta adrl
6f39 : d0c6                     bne tadd        ;iterate op2
                                next_test
6f3b : ad0002          >            lda test_case   ;previous test
6f3e : c929            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6f40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
002a =                 >test_num = test_num + 1
6f42 : a92a            >            lda #test_num   ;*** next tests' number
6f44 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
6f47 : f8                       sed
6f48 : a244                     ldx #ad2        ;for indexed test
6f4a : a0ff                     ldy #$ff        ;max range
6f4c : a999                     lda #$99        ;start with adding 99 to 99 with carry
6f4e : 8543                     sta ad1         ;operand 1 - accumulator
6f50 : 8544                     sta ad2         ;operand 2 - memory or immediate
6f52 : 8d0302                   sta ada2        ;non zp
6f55 : 8545                     sta adrl        ;expected result bits 0-7
6f57 : a901                     lda #1          ;set carry in & out
6f59 : 8542                     sta adfc        ;carry in - for diag
6f5b : 8546                     sta adrh        ;expected result bit 8 (carry out)
6f5d : a900                     lda #0          ;complemented operand 2 for subtract
6f5f : 8548                     sta sb2
6f61 : 8d0402                   sta sba2        ;non zp
6f64 : 38               tdad    sec             ;test with carry set
6f65 : 204970                   jsr chkdad
6f68 : c642                     dec adfc        ;now with carry clear
6f6a : a545                     lda adrl        ;decimal adjust result
6f6c : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
6f6e : c646                     dec adrh
6f70 : a999                     lda #$99
6f72 : 8545                     sta adrl
6f74 : d012                     bne tdad3
6f76 : 290f             tdad1   and #$f         ;lower nibble mask
6f78 : d00c                     bne tdad2       ;no decimal adjust needed
6f7a : c645                     dec adrl        ;decimal adjust (?0-6)
6f7c : c645                     dec adrl
6f7e : c645                     dec adrl
6f80 : c645                     dec adrl
6f82 : c645                     dec adrl
6f84 : c645                     dec adrl
6f86 : c645             tdad2   dec adrl        ;result -1
6f88 : 18               tdad3   clc             ;test with carry clear
6f89 : 204970                   jsr chkdad
6f8c : e642                     inc adfc        ;same for operand -1 but with carry
6f8e : a543                     lda ad1         ;decimal adjust operand 1
6f90 : f015                     beq tdad5       ;iterate operand 2
6f92 : 290f                     and #$f         ;lower nibble mask
6f94 : d00c                     bne tdad4       ;skip decimal adjust
6f96 : c643                     dec ad1         ;decimal adjust (?0-6)
6f98 : c643                     dec ad1
6f9a : c643                     dec ad1
6f9c : c643                     dec ad1
6f9e : c643                     dec ad1
6fa0 : c643                     dec ad1
6fa2 : c643             tdad4   dec ad1         ;operand 1 -1
6fa4 : 4c646f                   jmp tdad        ;iterate op1
                        
6fa7 : a999             tdad5   lda #$99        ;precharge op1 max
6fa9 : 8543                     sta ad1
6fab : a544                     lda ad2         ;decimal adjust operand 2
6fad : f030                     beq tdad7       ;end of iteration
6faf : 290f                     and #$f         ;lower nibble mask
6fb1 : d018                     bne tdad6       ;skip decimal adjust
6fb3 : c644                     dec ad2         ;decimal adjust (?0-6)
6fb5 : c644                     dec ad2
6fb7 : c644                     dec ad2
6fb9 : c644                     dec ad2
6fbb : c644                     dec ad2
6fbd : c644                     dec ad2
6fbf : e648                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
6fc1 : e648                     inc sb2
6fc3 : e648                     inc sb2
6fc5 : e648                     inc sb2
6fc7 : e648                     inc sb2
6fc9 : e648                     inc sb2
6fcb : c644             tdad6   dec ad2         ;operand 2 -1
6fcd : e648                     inc sb2         ;complemented operand for subtract
6fcf : a548                     lda sb2
6fd1 : 8d0402                   sta sba2        ;copy as non zp operand
6fd4 : a544                     lda ad2
6fd6 : 8d0302                   sta ada2        ;copy as non zp operand
6fd9 : 8545                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
6fdb : e646                     inc adrh        ;result carry
6fdd : d085                     bne tdad        ;iterate op2
6fdf :                  tdad7
                                next_test
6fdf : ad0002          >            lda test_case   ;previous test
6fe2 : c92a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6fe4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
002b =                 >test_num = test_num + 1
6fe6 : a92b            >            lda #test_num   ;*** next tests' number
6fe8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
6feb : 18                       clc
6fec : d8                       cld
6fed : 08                       php
6fee : a955                     lda #$55
6ff0 : 6955                     adc #$55
6ff2 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after cld
6ff4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
6ff6 : 18                       clc
6ff7 : f8                       sed
6ff8 : 08                       php
6ff9 : a955                     lda #$55
6ffb : 6955                     adc #$55
6ffd : c910                     cmp #$10
                                trap_ne         ;expected decimal result after sed
6fff : d0fe            >        bne *           ;failed not equal (non zero)
                        
7001 : d8                       cld
7002 : 28                       plp
7003 : a955                     lda #$55
7005 : 6955                     adc #$55
7007 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
7009 : d0fe            >        bne *           ;failed not equal (non zero)
                        
700b : 28                       plp
700c : a955                     lda #$55
700e : 6955                     adc #$55
7010 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
7012 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7014 : 18                       clc
7015 : a970                     lda #hi bin_rti_ret ;emulated interrupt for rti
7017 : 48                       pha
7018 : a92f                     lda #lo bin_rti_ret
701a : 48                       pha
701b : 08                       php
701c : f8                       sed
701d : a970                     lda #hi dec_rti_ret ;emulated interrupt for rti
701f : 48                       pha
7020 : a926                     lda #lo dec_rti_ret
7022 : 48                       pha
7023 : 08                       php
7024 : d8                       cld
7025 : 40                       rti
7026 :                  dec_rti_ret
7026 : a955                     lda #$55
7028 : 6955                     adc #$55
702a : c910                     cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
702c : d0fe            >        bne *           ;failed not equal (non zero)
                        
702e : 40                       rti
702f :                  bin_rti_ret
702f : a955                     lda #$55
7031 : 6955                     adc #$55
7033 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
7035 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
7037 : ad0002                   lda test_case
703a : c92b                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
703c : d0fe            >        bne *           ;failed not equal (non zero)
                        
703e : a9f0                     lda #$f0        ;mark opcode testing complete
7040 : 8d0002                   sta test_case
                        
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                       >            ;RAM check disabled - RAM size not set
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------
                                success         ;if you get here everything went well
7043 : 4c4370          >        jmp *           ;test passed, no errors
                        
                        ; -------------
                        ; S U C C E S S ************************************************
7046 : 4c0040                   jmp start       ;run again
                        
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
7049 :                  chkdad
                        ; decimal ADC / SBC zp
7049 : 08                       php             ;save carry for subtract
704a : a543                     lda ad1
704c : 6544                     adc ad2         ;perform add
704e : 08                       php
704f : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7051 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7053 : 68                       pla             ;check flags
7054 : 2901                     and #1          ;mask carry
7056 : c546                     cmp adrh
                                trap_ne         ;bad carry
7058 : d0fe            >        bne *           ;failed not equal (non zero)
                        
705a : 28                       plp
705b : 08                       php             ;save carry for next add
705c : a543                     lda ad1
705e : e548                     sbc sb2         ;perform subtract
7060 : 08                       php
7061 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7063 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7065 : 68                       pla             ;check flags
7066 : 2901                     and #1          ;mask carry
7068 : c546                     cmp adrh
                                trap_ne         ;bad flags
706a : d0fe            >        bne *           ;failed not equal (non zero)
                        
706c : 28                       plp
                        ; decimal ADC / SBC abs
706d : 08                       php             ;save carry for subtract
706e : a543                     lda ad1
7070 : 6d0302                   adc ada2        ;perform add
7073 : 08                       php
7074 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7076 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7078 : 68                       pla             ;check flags
7079 : 2901                     and #1          ;mask carry
707b : c546                     cmp adrh
                                trap_ne         ;bad carry
707d : d0fe            >        bne *           ;failed not equal (non zero)
                        
707f : 28                       plp
7080 : 08                       php             ;save carry for next add
7081 : a543                     lda ad1
7083 : ed0402                   sbc sba2        ;perform subtract
7086 : 08                       php
7087 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7089 : d0fe            >        bne *           ;failed not equal (non zero)
                        
708b : 68                       pla             ;check flags
708c : 2901                     and #1          ;mask carry
708e : c546                     cmp adrh
                                trap_ne         ;bad carry
7090 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7092 : 28                       plp
                        ; decimal ADC / SBC #
7093 : 08                       php             ;save carry for subtract
7094 : a544                     lda ad2
7096 : 8d1202                   sta ex_adci+1   ;set ADC # operand
7099 : a543                     lda ad1
709b : 201102                   jsr ex_adci     ;execute ADC # in RAM
709e : 08                       php
709f : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
70a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
70a3 : 68                       pla             ;check flags
70a4 : 2901                     and #1          ;mask carry
70a6 : c546                     cmp adrh
                                trap_ne         ;bad carry
70a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
70aa : 28                       plp
70ab : 08                       php             ;save carry for next add
70ac : a548                     lda sb2
70ae : 8d1502                   sta ex_sbci+1   ;set SBC # operand
70b1 : a543                     lda ad1
70b3 : 201402                   jsr ex_sbci     ;execute SBC # in RAM
70b6 : 08                       php
70b7 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
70b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
70bb : 68                       pla             ;check flags
70bc : 2901                     and #1          ;mask carry
70be : c546                     cmp adrh
                                trap_ne         ;bad carry
70c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
70c2 : 28                       plp
                        ; decimal ADC / SBC zp,x
70c3 : 08                       php             ;save carry for subtract
70c4 : a543                     lda ad1
70c6 : 7500                     adc 0,x         ;perform add
70c8 : 08                       php
70c9 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
70cb : d0fe            >        bne *           ;failed not equal (non zero)
                        
70cd : 68                       pla             ;check flags
70ce : 2901                     and #1          ;mask carry
70d0 : c546                     cmp adrh
                                trap_ne         ;bad carry
70d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
70d4 : 28                       plp
70d5 : 08                       php             ;save carry for next add
70d6 : a543                     lda ad1
70d8 : f504                     sbc sb2-ad2,x   ;perform subtract
70da : 08                       php
70db : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
70dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
70df : 68                       pla             ;check flags
70e0 : 2901                     and #1          ;mask carry
70e2 : c546                     cmp adrh
                                trap_ne         ;bad carry
70e4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
70e6 : 28                       plp
                        ; decimal ADC / SBC abs,x
70e7 : 08                       php             ;save carry for subtract
70e8 : a543                     lda ad1
70ea : 7dbf01                   adc ada2-ad2,x  ;perform add
70ed : 08                       php
70ee : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
70f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
70f2 : 68                       pla             ;check flags
70f3 : 2901                     and #1          ;mask carry
70f5 : c546                     cmp adrh
                                trap_ne         ;bad carry
70f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
70f9 : 28                       plp
70fa : 08                       php             ;save carry for next add
70fb : a543                     lda ad1
70fd : fdc001                   sbc sba2-ad2,x  ;perform subtract
7100 : 08                       php
7101 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7103 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7105 : 68                       pla             ;check flags
7106 : 2901                     and #1          ;mask carry
7108 : c546                     cmp adrh
                                trap_ne         ;bad carry
710a : d0fe            >        bne *           ;failed not equal (non zero)
                        
710c : 28                       plp
                        ; decimal ADC / SBC abs,y
710d : 08                       php             ;save carry for subtract
710e : a543                     lda ad1
7110 : 790401                   adc ada2-$ff,y  ;perform add
7113 : 08                       php
7114 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7116 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7118 : 68                       pla             ;check flags
7119 : 2901                     and #1          ;mask carry
711b : c546                     cmp adrh
                                trap_ne         ;bad carry
711d : d0fe            >        bne *           ;failed not equal (non zero)
                        
711f : 28                       plp
7120 : 08                       php             ;save carry for next add
7121 : a543                     lda ad1
7123 : f90501                   sbc sba2-$ff,y  ;perform subtract
7126 : 08                       php
7127 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7129 : d0fe            >        bne *           ;failed not equal (non zero)
                        
712b : 68                       pla             ;check flags
712c : 2901                     and #1          ;mask carry
712e : c546                     cmp adrh
                                trap_ne         ;bad carry
7130 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7132 : 28                       plp
                        ; decimal ADC / SBC (zp,x)
7133 : 08                       php             ;save carry for subtract
7134 : a543                     lda ad1
7136 : 6144                     adc (lo adi2-ad2,x) ;perform add
7138 : 08                       php
7139 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
713b : d0fe            >        bne *           ;failed not equal (non zero)
                        
713d : 68                       pla             ;check flags
713e : 2901                     and #1          ;mask carry
7140 : c546                     cmp adrh
                                trap_ne         ;bad carry
7142 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7144 : 28                       plp
7145 : 08                       php             ;save carry for next add
7146 : a543                     lda ad1
7148 : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
714a : 08                       php
714b : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
714d : d0fe            >        bne *           ;failed not equal (non zero)
                        
714f : 68                       pla             ;check flags
7150 : 2901                     and #1          ;mask carry
7152 : c546                     cmp adrh
                                trap_ne         ;bad carry
7154 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7156 : 28                       plp
                        ; decimal ADC / SBC (abs),y
7157 : 08                       php             ;save carry for subtract
7158 : a543                     lda ad1
715a : 718c                     adc (adiy2),y   ;perform add
715c : 08                       php
715d : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
715f : d0fe            >        bne *           ;failed not equal (non zero)
                        
7161 : 68                       pla             ;check flags
7162 : 2901                     and #1          ;mask carry
7164 : c546                     cmp adrh
                                trap_ne         ;bad carry
7166 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7168 : 28                       plp
7169 : 08                       php             ;save carry for next add
716a : a543                     lda ad1
716c : f18e                     sbc (sbiy2),y   ;perform subtract
716e : 08                       php
716f : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7171 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7173 : 68                       pla             ;check flags
7174 : 2901                     and #1          ;mask carry
7176 : c546                     cmp adrh
                                trap_ne         ;bad carry
7178 : d0fe            >        bne *           ;failed not equal (non zero)
                        
717a : 28                       plp
717b : 60                       rts
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
717c : a547             chkadd  lda adrf        ;add V-flag if overflow
717e : 2983                     and #$83        ;keep N-----ZC / clear V
7180 : 48                       pha
7181 : a543                     lda ad1         ;test sign unequal between operands
7183 : 4544                     eor ad2
7185 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
7187 : a543                     lda ad1         ;test sign equal between operands and result
7189 : 4545                     eor adrl
718b : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
718d : 68                       pla
718e : 0940                     ora #$40        ;set V
7190 : 48                       pha
7191 : 68               ckad1   pla
7192 : 8547                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
7194 : 08                       php             ;save carry for subtract
7195 : a543                     lda ad1
7197 : 6544                     adc ad2         ;perform add
7199 : 08                       php
719a : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
719c : d0fe            >        bne *           ;failed not equal (non zero)
                        
719e : 68                       pla             ;check flags
719f : 29c3                     and #$c3        ;mask NV----ZC
71a1 : c547                     cmp adrf
                                trap_ne         ;bad flags
71a3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
71a5 : 28                       plp
71a6 : 08                       php             ;save carry for next add
71a7 : a543                     lda ad1
71a9 : e548                     sbc sb2         ;perform subtract
71ab : 08                       php
71ac : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
71ae : d0fe            >        bne *           ;failed not equal (non zero)
                        
71b0 : 68                       pla             ;check flags
71b1 : 29c3                     and #$c3        ;mask NV----ZC
71b3 : c547                     cmp adrf
                                trap_ne         ;bad flags
71b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
71b7 : 28                       plp
                        ; binary ADC / SBC abs
71b8 : 08                       php             ;save carry for subtract
71b9 : a543                     lda ad1
71bb : 6d0302                   adc ada2        ;perform add
71be : 08                       php
71bf : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
71c1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
71c3 : 68                       pla             ;check flags
71c4 : 29c3                     and #$c3        ;mask NV----ZC
71c6 : c547                     cmp adrf
                                trap_ne         ;bad flags
71c8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
71ca : 28                       plp
71cb : 08                       php             ;save carry for next add
71cc : a543                     lda ad1
71ce : ed0402                   sbc sba2        ;perform subtract
71d1 : 08                       php
71d2 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
71d4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
71d6 : 68                       pla             ;check flags
71d7 : 29c3                     and #$c3        ;mask NV----ZC
71d9 : c547                     cmp adrf
                                trap_ne         ;bad flags
71db : d0fe            >        bne *           ;failed not equal (non zero)
                        
71dd : 28                       plp
                        ; binary ADC / SBC #
71de : 08                       php             ;save carry for subtract
71df : a544                     lda ad2
71e1 : 8d1202                   sta ex_adci+1   ;set ADC # operand
71e4 : a543                     lda ad1
71e6 : 201102                   jsr ex_adci     ;execute ADC # in RAM
71e9 : 08                       php
71ea : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
71ec : d0fe            >        bne *           ;failed not equal (non zero)
                        
71ee : 68                       pla             ;check flags
71ef : 29c3                     and #$c3        ;mask NV----ZC
71f1 : c547                     cmp adrf
                                trap_ne         ;bad flags
71f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
71f5 : 28                       plp
71f6 : 08                       php             ;save carry for next add
71f7 : a548                     lda sb2
71f9 : 8d1502                   sta ex_sbci+1   ;set SBC # operand
71fc : a543                     lda ad1
71fe : 201402                   jsr ex_sbci     ;execute SBC # in RAM
7201 : 08                       php
7202 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7204 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7206 : 68                       pla             ;check flags
7207 : 29c3                     and #$c3        ;mask NV----ZC
7209 : c547                     cmp adrf
                                trap_ne         ;bad flags
720b : d0fe            >        bne *           ;failed not equal (non zero)
                        
720d : 28                       plp
                        ; binary ADC / SBC zp,x
720e : 08                       php             ;save carry for subtract
720f : a543                     lda ad1
7211 : 7500                     adc 0,x         ;perform add
7213 : 08                       php
7214 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7216 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7218 : 68                       pla             ;check flags
7219 : 29c3                     and #$c3        ;mask NV----ZC
721b : c547                     cmp adrf
                                trap_ne         ;bad flags
721d : d0fe            >        bne *           ;failed not equal (non zero)
                        
721f : 28                       plp
7220 : 08                       php             ;save carry for next add
7221 : a543                     lda ad1
7223 : f504                     sbc sb2-ad2,x   ;perform subtract
7225 : 08                       php
7226 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7228 : d0fe            >        bne *           ;failed not equal (non zero)
                        
722a : 68                       pla             ;check flags
722b : 29c3                     and #$c3        ;mask NV----ZC
722d : c547                     cmp adrf
                                trap_ne         ;bad flags
722f : d0fe            >        bne *           ;failed not equal (non zero)
                        
7231 : 28                       plp
                        ; binary ADC / SBC abs,x
7232 : 08                       php             ;save carry for subtract
7233 : a543                     lda ad1
7235 : 7dbf01                   adc ada2-ad2,x  ;perform add
7238 : 08                       php
7239 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
723b : d0fe            >        bne *           ;failed not equal (non zero)
                        
723d : 68                       pla             ;check flags
723e : 29c3                     and #$c3        ;mask NV----ZC
7240 : c547                     cmp adrf
                                trap_ne         ;bad flags
7242 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7244 : 28                       plp
7245 : 08                       php             ;save carry for next add
7246 : a543                     lda ad1
7248 : fdc001                   sbc sba2-ad2,x  ;perform subtract
724b : 08                       php
724c : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
724e : d0fe            >        bne *           ;failed not equal (non zero)
                        
7250 : 68                       pla             ;check flags
7251 : 29c3                     and #$c3        ;mask NV----ZC
7253 : c547                     cmp adrf
                                trap_ne         ;bad flags
7255 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7257 : 28                       plp
                        ; binary ADC / SBC abs,y
7258 : 08                       php             ;save carry for subtract
7259 : a543                     lda ad1
725b : 790401                   adc ada2-$ff,y  ;perform add
725e : 08                       php
725f : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7261 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7263 : 68                       pla             ;check flags
7264 : 29c3                     and #$c3        ;mask NV----ZC
7266 : c547                     cmp adrf
                                trap_ne         ;bad flags
7268 : d0fe            >        bne *           ;failed not equal (non zero)
                        
726a : 28                       plp
726b : 08                       php             ;save carry for next add
726c : a543                     lda ad1
726e : f90501                   sbc sba2-$ff,y  ;perform subtract
7271 : 08                       php
7272 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7274 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7276 : 68                       pla             ;check flags
7277 : 29c3                     and #$c3        ;mask NV----ZC
7279 : c547                     cmp adrf
                                trap_ne         ;bad flags
727b : d0fe            >        bne *           ;failed not equal (non zero)
                        
727d : 28                       plp
                        ; binary ADC / SBC (zp,x)
727e : 08                       php             ;save carry for subtract
727f : a543                     lda ad1
7281 : 6144                     adc (lo adi2-ad2,x) ;perform add
7283 : 08                       php
7284 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7286 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7288 : 68                       pla             ;check flags
7289 : 29c3                     and #$c3        ;mask NV----ZC
728b : c547                     cmp adrf
                                trap_ne         ;bad flags
728d : d0fe            >        bne *           ;failed not equal (non zero)
                        
728f : 28                       plp
7290 : 08                       php             ;save carry for next add
7291 : a543                     lda ad1
7293 : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
7295 : 08                       php
7296 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
7298 : d0fe            >        bne *           ;failed not equal (non zero)
                        
729a : 68                       pla             ;check flags
729b : 29c3                     and #$c3        ;mask NV----ZC
729d : c547                     cmp adrf
                                trap_ne         ;bad flags
729f : d0fe            >        bne *           ;failed not equal (non zero)
                        
72a1 : 28                       plp
                        ; binary ADC / SBC (abs),y
72a2 : 08                       php             ;save carry for subtract
72a3 : a543                     lda ad1
72a5 : 718c                     adc (adiy2),y   ;perform add
72a7 : 08                       php
72a8 : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
72aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
72ac : 68                       pla             ;check flags
72ad : 29c3                     and #$c3        ;mask NV----ZC
72af : c547                     cmp adrf
                                trap_ne         ;bad flags
72b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
72b3 : 28                       plp
72b4 : 08                       php             ;save carry for next add
72b5 : a543                     lda ad1
72b7 : f18e                     sbc (sbiy2),y   ;perform subtract
72b9 : 08                       php
72ba : c545                     cmp adrl        ;check result
                                trap_ne         ;bad result
72bc : d0fe            >        bne *           ;failed not equal (non zero)
                        
72be : 68                       pla             ;check flags
72bf : 29c3                     and #$c3        ;mask NV----ZC
72c1 : c547                     cmp adrf
                                trap_ne         ;bad flags
72c3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
72c5 : 28                       plp
72c6 : 60                       rts
                        
                        ; target for the jump absolute test
72c7 : 88                       dey
72c8 : 88                       dey
72c9 :                  test_far
72c9 : 08                       php             ;either SP or Y count will fail, if we do not hit
72ca : 88                       dey
72cb : 88                       dey
72cc : 88                       dey
72cd : 28                       plp
                                trap_cs         ;flags loaded?
72ce : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
72d0 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
72d2 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq
72d4 : f0fe            >        beq *           ;failed equal (zero)
                        
72d6 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
72d8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
72da : e041                     cpx #'A'
                                trap_ne
72dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
72de : c04f                     cpy #('R'-3)
                                trap_ne
72e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
72e2 : 48                       pha             ;save a,x
72e3 : 8a                       txa
72e4 : 48                       pha
72e5 : ba                       tsx
72e6 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
72e8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
72ea : 68                       pla             ;restore x
72eb : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
72ec : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
72ee : 48              >            pha         ;use stack to load status
72ef : 28              >            plp
                        
72f0 : 68                       pla             ;restore a
72f1 : e8                       inx             ;return registers with modifications
72f2 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
72f4 : 4c0f45                   jmp far_ret
                        
                        ; target for the jump indirect test
72f7 : 00                       align
72f8 : 0173             ptr_tst_ind dw test_ind
72fa : 6445             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
72fc : 4cfc72          >        jmp *           ;failed anyway
                        
72ff : 88                       dey
7300 : 88                       dey
7301 :                  test_ind
7301 : 08                       php             ;either SP or Y count will fail, if we do not hit
7302 : 88                       dey
7303 : 88                       dey
7304 : 88                       dey
7305 : 28                       plp
                                trap_cs         ;flags loaded?
7306 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
7308 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
730a : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq
730c : f0fe            >        beq *           ;failed equal (zero)
                        
730e : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
7310 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7312 : e04e                     cpx #'N'
                                trap_ne
7314 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7316 : c041                     cpy #('D'-3)
                                trap_ne
7318 : d0fe            >        bne *           ;failed not equal (non zero)
                        
731a : 48                       pha             ;save a,x
731b : 8a                       txa
731c : 48                       pha
731d : ba                       tsx
731e : e0fd                     cpx #$fd        ;check SP
                                trap_ne
7320 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7322 : 68                       pla             ;restore x
7323 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
7324 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
7326 : 48              >            pha         ;use stack to load status
7327 : 28              >            plp
                        
7328 : 68                       pla             ;restore a
7329 : e8                       inx             ;return registers with modifications
732a : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
732c : 6cfa72                   jmp (ptr_ind_ret)
                                trap            ;runover protection
732f : 4c2f73          >        jmp *           ;failed anyway
                        
                        
                        ; target for the jump subroutine test
7332 : 88                       dey
7333 : 88                       dey
7334 :                  test_jsr
7334 : 08                       php             ;either SP or Y count will fail, if we do not hit
7335 : 88                       dey
7336 : 88                       dey
7337 : 88                       dey
7338 : 28                       plp
                                trap_cs         ;flags loaded?
7339 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
733b : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
733d : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq
733f : f0fe            >        beq *           ;failed equal (zero)
                        
7341 : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
7343 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7345 : e053                     cpx #'S'
                                trap_ne
7347 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7349 : c04f                     cpy #('R'-3)
                                trap_ne
734b : d0fe            >        bne *           ;failed not equal (non zero)
                        
734d : 48                       pha             ;save a,x
734e : 8a                       txa
734f : 48                       pha
7350 : ba                       tsx             ;sp -4? (return addr,a,x)
7351 : e0fb                     cpx #$fb
                                trap_ne
7353 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7355 : adff01                   lda $1ff        ;propper return on stack
7358 : c945                     cmp #hi(jsr_ret)
                                trap_ne
735a : d0fe            >        bne *           ;failed not equal (non zero)
                        
735c : adfe01                   lda $1fe
735f : c99a                     cmp #lo(jsr_ret)
                                trap_ne
7361 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
7363 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
7365 : 48              >            pha         ;use stack to load status
7366 : 28              >            plp
                        
7367 : 68                       pla             ;pull x,a
7368 : aa                       tax
7369 : 68                       pla
736a : e8                       inx             ;return registers with modifications
736b : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
736d : 60                       rts
                                trap            ;runover protection
736e : 4c6e73          >        jmp *           ;failed anyway
                        
                        
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
7371 :                  nmi_trap
                                trap            ;check stack for conditions at NMI
7371 : 4c7173          >        jmp *           ;failed anyway
                        
7374 :                  res_trap
                                trap            ;unexpected RESET
7374 : 4c7473          >        jmp *           ;failed anyway
                        
                        
7377 : 88                       dey
7378 : 88                       dey
7379 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
7379 : 08                       php             ;either SP or Y count will fail, if we do not hit
737a : 88                       dey
737b : 88                       dey
737c : 88                       dey
                                ;next 4 traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
737d : c942                     cmp #'B'        ;registers loaded?
                                trap_ne
737f : d0fe            >        bne *           ;failed not equal (non zero)
                        
7381 : e052                     cpx #'R'
                                trap_ne
7383 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7385 : c048                     cpy #('K'-3)
                                trap_ne
7387 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7389 : 8540                     sta irq_a       ;save registers during break test
738b : 8641                     stx irq_x
738d : ba                       tsx             ;test break on stack
738e : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1
7391 : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
7393 : d0fe            >        bne *           ;failed not equal (non zero)
                        
7395 : 68                       pla
7396 : c934                     cmp #fai        ;should have added interrupt disable
                                trap_ne
7398 : d0fe            >        bne *           ;failed not equal (non zero)
                        
739a : ba                       tsx
739b : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
739d : d0fe            >        bne *           ;failed not equal (non zero)
                        
739f : adff01                   lda $1ff        ;propper return on stack
73a2 : c945                     cmp #hi(brk_ret)
                                trap_ne
73a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
73a6 : adfe01                   lda $1fe
73a9 : c9d1                     cmp #lo(brk_ret)
                                trap_ne
73ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
73ad : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
73af : 48              >            pha         ;use stack to load status
73b0 : 28              >            plp
                        
73b1 : a641                     ldx irq_x
73b3 : e8                       inx             ;return registers with modifications
73b4 : a540                     lda irq_a
73b6 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1 but original flags should be restored
73b8 : 40                       rti
                                trap            ;runover protection
73b9 : 4cb973          >        jmp *           ;failed anyway
                        
                        
                            if report = 1
                                include "report.i65"
                            endif
                        
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif
                        data_init
                        ex_and_ and #0              ;execute immediate opcodes
                                rts
                        ex_eor_ eor #0              ;execute immediate opcodes
                                rts
                        ex_ora_ ora #0              ;execute immediate opcodes
                                rts
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
                        rASL_                       ;expected result ASL & ROL -carry
                        rROL_   db  $86,$04,$82,0   ; "
                        rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
                        rLSR_                       ;expected result LSR & ROR -carry
                        rROR_   db  $61,$41,$20,0   ; "
                        rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                       ;expected flags for shifts
                        fROL_   db  fnc,fc,fn,fz    ;no carry in
                        fROLc_  db  fnc,fc,fn,0     ;carry in
                        fLSR_
                        fROR_   db  fc,0,fc,fz      ;no carry in
                        fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80   ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0     ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                        
                            if (load_data_direct = 1) & (ROM_vectors = 1)
fffa =                          org $fffa       ;vectors
fffa : 7173                     dw  nmi_trap
fffc : 7473                     dw  res_trap
fffe : 7973                     dw  irq_trap
                            endif
                        
fffa =                          end start
                        
No errors in pass 2.
